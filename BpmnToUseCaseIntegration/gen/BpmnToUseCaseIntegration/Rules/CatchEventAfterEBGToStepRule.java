/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Catch Event After EBG To Step Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getCatchEventAfterEBGToStepRule()
 * @model
 * @generated
 */
public interface CatchEventAfterEBGToStepRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __process_flowElements_intermediateCatchEvent = null;\n      EMoflonEdge __outFlow_targetRef_intermediateCatchEvent = null;\n      EMoflonEdge __intermediateCatchEvent_incoming_outFlow = null;\n      EMoflonEdge __eventBasedGateway_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_eventBasedGateway = null;\n      EMoflonEdge __eventBasedGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_eventBasedGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_eventBasedGateway = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object eventBasedGateway is really bound\n         JavaSDM.ensure ( eventBasedGateway != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object eventBasedGateway is really bound\n            JavaSDM.ensure ( eventBasedGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object intermediateCatchEvent is really bound\n            JavaSDM.ensure ( intermediateCatchEvent != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_intermediateCatchEvent\n            __process_flowElements_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_targetRef_intermediateCatchEvent\n            __outFlow_targetRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __intermediateCatchEvent_incoming_outFlow\n            __intermediateCatchEvent_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __eventBasedGateway_outgoing_outFlow\n            __eventBasedGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_eventBasedGateway\n            __outFlow_sourceRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_intermediateCatchEvent\n            __process_flowElements_intermediateCatchEvent.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __outFlow_sourceRef_eventBasedGateway\n            __outFlow_sourceRef_eventBasedGateway.setName (\"sourceRef\");\n            // assign attribute __eventBasedGateway_outgoing_outFlow\n            __eventBasedGateway_outgoing_outFlow.setName (\"outgoing\");\n            // assign attribute __outFlow_targetRef_intermediateCatchEvent\n            __outFlow_targetRef_intermediateCatchEvent.setName (\"targetRef\");\n            // assign attribute __intermediateCatchEvent_incoming_outFlow\n            __intermediateCatchEvent_incoming_outFlow.setName (\"incoming\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_intermediateCatchEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_targetRef_intermediateCatchEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__intermediateCatchEvent_incoming_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,intermediateCatchEvent,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__eventBasedGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_eventBasedGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            __process_flowElements_intermediateCatchEvent.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __outFlow_sourceRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n            // create link\n            __eventBasedGateway_outgoing_outFlow.setSrc( eventBasedGateway);\n\n\n            // create link\n            __outFlow_targetRef_intermediateCatchEvent.setSrc( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_eventBasedGateway.setSrc( outFlow);\n\n\n            // create link\n            __intermediateCatchEvent_incoming_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __eventBasedGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n            // create link\n            __intermediateCatchEvent_incoming_outFlow.setSrc( intermediateCatchEvent);\n\n\n            // create link\n            __outFlow_targetRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object eventBasedGateway is really bound\n            JavaSDM.ensure ( eventBasedGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object intermediateCatchEvent is really bound\n            JavaSDM.ensure ( intermediateCatchEvent != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __eventBasedGateway_incoming_inFlow\n            __eventBasedGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_eventBasedGateway\n            __process_flowElements_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_eventBasedGateway\n            __inFlow_targetRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_eventBasedGateway\n            __process_flowElements_eventBasedGateway.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_eventBasedGateway\n            __inFlow_targetRef_eventBasedGateway.setName (\"targetRef\");\n            // assign attribute __eventBasedGateway_incoming_inFlow\n            __eventBasedGateway_incoming_inFlow.setName (\"incoming\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__eventBasedGateway_incoming_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_eventBasedGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,eventBasedGateway,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_eventBasedGateway,\"contextEdges\");\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_eventBasedGateway.setSrc( process);\n\n\n            // create link\n            __eventBasedGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_eventBasedGateway.setSrc( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __eventBasedGateway_incoming_inFlow.setSrc( eventBasedGateway);\n\n\n            // create link\n            __inFlow_targetRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n            // create link\n            __process_flowElements_eventBasedGateway.setTrg( eventBasedGateway);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EventBasedGateway eventBasedGateway,
			SequenceFlow outFlow, IntermediateCatchEvent intermediateCatchEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      FlowNodeToStep ebgToNormalStep = null;\n      EventBasedGateway eventBasedGateway = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      NormalStep normalStep = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlowToAlternativeFlowAlternative outFlowToAlt = null;\n      SequenceFlowToUCFlow outFlowToAlternativeFlow = null;\n      IntermediateCatchEventToAlternativeFlow iceToAltFlow = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge outFlowToAlt__target__alt = null;\n      EMoflonEdge outFlowToAlternativeFlow__source__outFlow = null;\n      EMoflonEdge alt__ref__alternativeFlow = null;\n      EMoflonEdge __process_flowElements_intermediateCatchEvent = null;\n      EMoflonEdge __intermediateCatchEvent_incoming_outFlow = null;\n      EMoflonEdge outFlowToAlternativeFlow__target__alternativeFlow = null;\n      EMoflonEdge __eventBasedGateway_outgoing_outFlow = null;\n      EMoflonEdge useCase__flows__alternativeFlow = null;\n      EMoflonEdge iceToAltFlow__target__alternativeFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge outFlowToAlt__source__outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_eventBasedGateway = null;\n      EMoflonEdge normalStep__stepAlternative__alt = null;\n      EMoflonEdge iceToAltFlow__source__intermediateCatchEvent = null;\n      EMoflonEdge __outFlow_targetRef_intermediateCatchEvent = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"ebgToNormalStep\"));\n\n         // ensure correct type and really bound of object ebgToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         ebgToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"eventBasedGateway\"));\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"intermediateCatchEvent\"));\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object outFlowToAlt\n         outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToAlternativeFlowAlternative();\n\n         // create object outFlowToAlternativeFlow\n         outFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object iceToAltFlow\n         iceToAltFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createIntermediateCatchEventToAlternativeFlow();\n\n         // create object alternativeFlow\n         alternativeFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();\n\n         // create object alt\n         alt = UseCaseDSLFactory.eINSTANCE.createAlternativeFlowAlternative();\n\n         // assign attribute alt\n         alt.setCondition ((java.lang.String)csp.getAttributeVariable(\"alt\",\"condition\").getValue());\n         // assign attribute alternativeFlow\n         alternativeFlow.setName ((java.lang.String)csp.getAttributeVariable(\"alternativeFlow\",\"name\").getValue());\n\n         // create link\n         outFlowToAlt.setSource( outFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow.setSource( outFlow);\n\n\n         // create link\n         iceToAltFlow.setSource( intermediateCatchEvent);\n\n\n         // create link\n         \tuseCase.getFlows().add(alternativeFlow); // add link\n\n\n         // create link\n         \tnormalStep.getStepAlternative().add(alt); // add link\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt,alternativeFlow,\"ref\");\n\n         // create link\n         outFlowToAlt.setTarget( alt);\n\n\n         // create link\n         outFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         iceToAltFlow.setTarget( alternativeFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternativeFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object ebgToNormalStep is really bound\n         JavaSDM.ensure ( ebgToNormalStep != null );\n         // check object eventBasedGateway is really bound\n         JavaSDM.ensure ( eventBasedGateway != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects alternativeFlow and alt \n         JavaSDM.ensure ( !alternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alt \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects eventBasedGateway and alt \n         JavaSDM.ensure ( !eventBasedGateway.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects iceToAltFlow and alt \n         JavaSDM.ensure ( !iceToAltFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alt \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlt and alt \n         JavaSDM.ensure ( !outFlowToAlt.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects processToUseCase and alt \n         JavaSDM.ensure ( !processToUseCase.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alternativeFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and alternativeFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and alternativeFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alternativeFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and alternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects process and alternativeFlow \n         JavaSDM.ensure ( !process.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and alternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects useCase and alternativeFlow \n         JavaSDM.ensure ( !useCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ebgToNormalStep \n         JavaSDM.ensure ( !eventBasedGateway.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and ebgToNormalStep \n         JavaSDM.ensure ( !flow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects iceToAltFlow and ebgToNormalStep \n         JavaSDM.ensure ( !iceToAltFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ebgToNormalStep \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and ebgToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and ebgToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and ebgToNormalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and ebgToNormalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects process and ebgToNormalStep \n         JavaSDM.ensure ( !process.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects processToUseCase and ebgToNormalStep \n         JavaSDM.ensure ( !processToUseCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects useCase and ebgToNormalStep \n         JavaSDM.ensure ( !useCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and eventBasedGateway \n         JavaSDM.ensure ( !flow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and eventBasedGateway \n         JavaSDM.ensure ( !iceToAltFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and eventBasedGateway \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects normalStep and eventBasedGateway \n         JavaSDM.ensure ( !normalStep.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlow and eventBasedGateway \n         JavaSDM.ensure ( !outFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlowToAlt and eventBasedGateway \n         JavaSDM.ensure ( !outFlowToAlt.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and eventBasedGateway \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects process and eventBasedGateway \n         JavaSDM.ensure ( !process.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects processToUseCase and eventBasedGateway \n         JavaSDM.ensure ( !processToUseCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects useCase and eventBasedGateway \n         JavaSDM.ensure ( !useCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and flow \n         JavaSDM.ensure ( !iceToAltFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and flow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlt and flow \n         JavaSDM.ensure ( !outFlowToAlt.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and flow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and iceToAltFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects normalStep and iceToAltFlow \n         JavaSDM.ensure ( !normalStep.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlow and iceToAltFlow \n         JavaSDM.ensure ( !outFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and iceToAltFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and iceToAltFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects process and iceToAltFlow \n         JavaSDM.ensure ( !process.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects processToUseCase and iceToAltFlow \n         JavaSDM.ensure ( !processToUseCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects useCase and iceToAltFlow \n         JavaSDM.ensure ( !useCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and inFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlowToFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and intermediateCatchEvent \n         JavaSDM.ensure ( !normalStep.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlow and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlow.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlowToAlt and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlowToAlt.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects process and intermediateCatchEvent \n         JavaSDM.ensure ( !process.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects processToUseCase and intermediateCatchEvent \n         JavaSDM.ensure ( !processToUseCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects useCase and intermediateCatchEvent \n         JavaSDM.ensure ( !useCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and normalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and normalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToUseCase and normalStep \n         JavaSDM.ensure ( !processToUseCase.equals (normalStep) );\n\n         // check isomorphic binding between objects useCase and normalStep \n         JavaSDM.ensure ( !useCase.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and outFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlow) );\n\n         // check isomorphic binding between objects useCase and outFlow \n         JavaSDM.ensure ( !useCase.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlowToAlt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlt \n         JavaSDM.ensure ( !process.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlt \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlt \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !process.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object outFlowToAlt__target__alt\n         outFlowToAlt__target__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alt__ref__alternativeFlow\n         alt__ref__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_intermediateCatchEvent\n         __process_flowElements_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __intermediateCatchEvent_incoming_outFlow\n         __intermediateCatchEvent_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __eventBasedGateway_outgoing_outFlow\n         __eventBasedGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__alternativeFlow\n         useCase__flows__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_eventBasedGateway\n         __outFlow_sourceRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__stepAlternative__alt\n         normalStep__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_targetRef_intermediateCatchEvent\n         __outFlow_targetRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"CatchEventAfterEBGToStepRule\");\n         // assign attribute __process_flowElements_intermediateCatchEvent\n         __process_flowElements_intermediateCatchEvent.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __outFlow_sourceRef_eventBasedGateway\n         __outFlow_sourceRef_eventBasedGateway.setName (\"sourceRef\");\n         // assign attribute __eventBasedGateway_outgoing_outFlow\n         __eventBasedGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute __outFlow_targetRef_intermediateCatchEvent\n         __outFlow_targetRef_intermediateCatchEvent.setName (\"targetRef\");\n         // assign attribute __intermediateCatchEvent_incoming_outFlow\n         __intermediateCatchEvent_incoming_outFlow.setName (\"incoming\");\n         // assign attribute useCase__flows__alternativeFlow\n         useCase__flows__alternativeFlow.setName (\"flows\");\n         // assign attribute normalStep__stepAlternative__alt\n         normalStep__stepAlternative__alt.setName (\"stepAlternative\");\n         // assign attribute alt__ref__alternativeFlow\n         alt__ref__alternativeFlow.setName (\"ref\");\n         // assign attribute outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlt__target__alt\n         outFlowToAlt__target__alt.setName (\"target\");\n         // assign attribute outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow.setName (\"target\");\n         // assign attribute iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent.setName (\"source\");\n         // assign attribute iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__target__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt__ref__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_intermediateCatchEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__intermediateCatchEvent_incoming_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__eventBasedGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_eventBasedGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__stepAlternative__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__source__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_targetRef_intermediateCatchEvent,\"translatedEdges\");\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_intermediateCatchEvent.setSrc( process);\n\n\n         // create link\n         __outFlow_sourceRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n         // create link\n         __eventBasedGateway_outgoing_outFlow.setSrc( eventBasedGateway);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __intermediateCatchEvent_incoming_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_targetRef_intermediateCatchEvent.setSrc( outFlow);\n\n\n         // create link\n         __eventBasedGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_eventBasedGateway.setSrc( outFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __intermediateCatchEvent_incoming_outFlow.setSrc( intermediateCatchEvent);\n\n\n         // create link\n         __outFlow_targetRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __process_flowElements_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         useCase__flows__alternativeFlow.setSrc( useCase);\n\n\n         // create link\n         normalStep__stepAlternative__alt.setSrc( normalStep);\n\n\n         // create link\n         outFlowToAlt__target__alt.setTrg( alt);\n\n\n         // create link\n         normalStep__stepAlternative__alt.setTrg( alt);\n\n\n         // create link\n         alt__ref__alternativeFlow.setSrc( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setSrc( outFlowToAlt);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setSrc( outFlowToAlt);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         alt__ref__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         useCase__flows__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setSrc( iceToAltFlow);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setSrc( iceToAltFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,outFlowToAlt,alternativeFlow,outFlowToAlternativeFlow,iceToAltFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      EventBasedGateway eventBasedGateway = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __process_flowElements_intermediateCatchEvent = null;\n      EMoflonEdge __process_flowElements_eventBasedGateway = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_eventBasedGateway = null;\n      EMoflonEdge __eventBasedGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __eventBasedGateway_outgoing_outFlow = null;\n      EMoflonEdge __ebgToNormalStep_source_eventBasedGateway = null;\n      EMoflonEdge __outFlow_sourceRef_eventBasedGateway = null;\n      EMoflonEdge __intermediateCatchEvent_incoming_outFlow = null;\n      EMoflonEdge __outFlow_targetRef_intermediateCatchEvent = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __ebgToNormalStep_target_normalStep = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterEventBasedGatewayToEbgToNormalStep = null;\n      FlowNodeToStep ebgToNormalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"CatchEventAfterEBGToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"eventBasedGateway\"));\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"intermediateCatchEvent\"));\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from eventBasedGateway to ebgToNormalStep\n         fujaba__Success = false;\n\n         fujaba__IterEventBasedGatewayToEbgToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(eventBasedGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n         while ( fujaba__IterEventBasedGatewayToEbgToNormalStep.hasNext () )\n         {\n            try\n            {\n               ebgToNormalStep = (FlowNodeToStep) fujaba__IterEventBasedGatewayToEbgToNormalStep.next ();\n\n               // check object ebgToNormalStep is really bound\n               JavaSDM.ensure ( ebgToNormalStep != null );\n               // bind object\n               _TmpObject = ebgToNormalStep.getTarget ();\n\n               // ensure correct type and really bound of object normalStep\n               JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n               normalStep = (NormalStep) _TmpObject;\n\n               // iterate to-many link source from inFlow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // bind object\n                     flow = inFlowToFlow.getTarget ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // iterate to-many link source from process to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           useCase = processToUseCase.getTarget ();\n\n                           // check object useCase is really bound\n                           JavaSDM.ensure ( useCase != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object ebgToNormalStep is really bound\n                              JavaSDM.ensure ( ebgToNormalStep != null );\n                              // check object eventBasedGateway is really bound\n                              JavaSDM.ensure ( eventBasedGateway != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object intermediateCatchEvent is really bound\n                              JavaSDM.ensure ( intermediateCatchEvent != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from eventBasedGateway to process\n                              JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from intermediateCatchEvent to process\n                              JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from ebgToNormalStep to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (ebgToNormalStep.getSource ()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link sourceRef from outFlow to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from ebgToNormalStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (ebgToNormalStep.getTarget ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link targetRef from outFlow to intermediateCatchEvent\n                              JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                              ));\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_intermediateCatchEvent\n                              __process_flowElements_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_eventBasedGateway\n                              __process_flowElements_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_eventBasedGateway\n                              __inFlow_targetRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __eventBasedGateway_incoming_inFlow\n                              __eventBasedGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __eventBasedGateway_outgoing_outFlow\n                              __eventBasedGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ebgToNormalStep_source_eventBasedGateway\n                              __ebgToNormalStep_source_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_sourceRef_eventBasedGateway\n                              __outFlow_sourceRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __intermediateCatchEvent_incoming_outFlow\n                              __intermediateCatchEvent_incoming_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_targetRef_intermediateCatchEvent\n                              __outFlow_targetRef_intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ebgToNormalStep_target_normalStep\n                              __ebgToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_intermediateCatchEvent\n                              __process_flowElements_intermediateCatchEvent.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_eventBasedGateway\n                              __process_flowElements_eventBasedGateway.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_eventBasedGateway\n                              __inFlow_targetRef_eventBasedGateway.setName (\"targetRef\");\n                              // assign attribute __eventBasedGateway_incoming_inFlow\n                              __eventBasedGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __outFlow_sourceRef_eventBasedGateway\n                              __outFlow_sourceRef_eventBasedGateway.setName (\"sourceRef\");\n                              // assign attribute __eventBasedGateway_outgoing_outFlow\n                              __eventBasedGateway_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __outFlow_targetRef_intermediateCatchEvent\n                              __outFlow_targetRef_intermediateCatchEvent.setName (\"targetRef\");\n                              // assign attribute __intermediateCatchEvent_incoming_outFlow\n                              __intermediateCatchEvent_incoming_outFlow.setName (\"incoming\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __ebgToNormalStep_source_eventBasedGateway\n                              __ebgToNormalStep_source_eventBasedGateway.setName (\"source\");\n                              // assign attribute __ebgToNormalStep_target_normalStep\n                              __ebgToNormalStep_target_normalStep.setName (\"target\");\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              __process_flowElements_intermediateCatchEvent.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_eventBasedGateway.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_eventBasedGateway.setSrc( inFlow);\n\n\n                              // create link\n                              __eventBasedGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __process_flowElements_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __eventBasedGateway_incoming_inFlow.setSrc( eventBasedGateway);\n\n\n                              // create link\n                              __eventBasedGateway_outgoing_outFlow.setSrc( eventBasedGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(eventBasedGateway);\n\n\n                              // create link\n                              __ebgToNormalStep_source_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_eventBasedGateway.setSrc( outFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __eventBasedGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              __intermediateCatchEvent_incoming_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __outFlow_targetRef_intermediateCatchEvent.setSrc( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(intermediateCatchEvent);\n\n\n                              // create link\n                              __intermediateCatchEvent_incoming_outFlow.setSrc( intermediateCatchEvent);\n\n\n                              // create link\n                              __outFlow_targetRef_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n                              // create link\n                              __process_flowElements_intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __ebgToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __ebgToNormalStep_source_eventBasedGateway.setSrc( ebgToNormalStep);\n\n\n                              // create link\n                              __ebgToNormalStep_target_normalStep.setSrc( ebgToNormalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(ebgToNormalStep);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_targetRef_intermediateCatchEvent,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__intermediateCatchEvent_incoming_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__eventBasedGateway_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_intermediateCatchEvent,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_source_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__eventBasedGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_target_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"CatchEventAfterEBGToStepRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"eventBasedGateway\", eventBasedGateway);\nmatch.registerObject(\"outFlow\", outFlow);\nmatch.registerObject(\"intermediateCatchEvent\", intermediateCatchEvent);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EventBasedGateway eventBasedGateway,
			SequenceFlow outFlow, IntermediateCatchEvent intermediateCatchEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"eventBasedGateway.gatewayDirection\", true, csp);\r\nvar_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EventBasedGateway eventBasedGateway,
			SequenceFlow outFlow, IntermediateCatchEvent intermediateCatchEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.id\", true, csp);\r\nvar_intermediateCatchEvent_id.setValue(intermediateCatchEvent.getId());\r\nVariable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.name\", true, csp);\r\nvar_intermediateCatchEvent_name.setValue(intermediateCatchEvent.getName());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", csp);\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_intermediateCatchEvent_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"eventBasedGateway\",eventBasedGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"intermediateCatchEvent\",intermediateCatchEvent);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"ebgToNormalStep\",ebgToNormalStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			EventBasedGateway eventBasedGateway, SequenceFlow outFlow,
			IntermediateCatchEvent intermediateCatchEvent, UseCase useCase,
			ProcessToUseCase processToUseCase, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, NormalStep normalStep,
			FlowNodeToStep ebgToNormalStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"eventBasedGateway\", eventBasedGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"intermediateCatchEvent\", intermediateCatchEvent);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"ebgToNormalStep\", ebgToNormalStep);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"outFlowToAlt\", outFlowToAlt);\nruleresult.registerObject(\"alternativeFlow\", alternativeFlow);\nruleresult.registerObject(\"outFlowToAlternativeFlow\", outFlowToAlternativeFlow);\nruleresult.registerObject(\"iceToAltFlow\", iceToAltFlow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject eventBasedGateway, EObject outFlow,
			EObject intermediateCatchEvent, EObject useCase,
			EObject processToUseCase, EObject flow, EObject inFlowToFlow,
			EObject normalStep, EObject ebgToNormalStep, EObject alt,
			EObject outFlowToAlt, EObject alternativeFlow,
			EObject outFlowToAlternativeFlow, EObject iceToAltFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow()) && match.getObject(\"intermediateCatchEvent\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,useCase,flow,normalStep,alt,alternativeFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object alternativeFlow is really bound\n            JavaSDM.ensure ( alternativeFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects flow and alternativeFlow \n            JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n            // create object __normalStep_stepAlternative_alt\n            __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_alternativeFlow\n            __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __alt_ref_alternativeFlow\n            __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_alternativeFlow\n            __useCase_flows_alternativeFlow.setName (\"flows\");\n            // assign attribute __normalStep_stepAlternative_alt\n            __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n            // assign attribute __alt_ref_alternativeFlow\n            __alt_ref_alternativeFlow.setName (\"ref\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_stepAlternative_alt,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alternativeFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_alternativeFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__alt_ref_alternativeFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alt,\"toBeTranslatedNodes\");\n\n            // create link\n            __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n            // create link\n            __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n            // create link\n            __alt_ref_alternativeFlow.setSrc( alt);\n\n\n            // create link\n            __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n            // create link\n            __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n            // create link\n            __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object alternativeFlow is really bound\n            JavaSDM.ensure ( alternativeFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects flow and alternativeFlow \n            JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      FlowNodeToStep ebgToNormalStep = null;\n      EventBasedGateway eventBasedGateway = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      NormalStep normalStep = null;\n      Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlow outFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      SequenceFlowToAlternativeFlowAlternative outFlowToAlt = null;\n      SequenceFlowToUCFlow outFlowToAlternativeFlow = null;\n      IntermediateCatchEventToAlternativeFlow iceToAltFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge outFlowToAlternativeFlow__source__outFlow = null;\n      EMoflonEdge outFlow__targetRef__intermediateCatchEvent = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge outFlowToAlt__source__outFlow = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge eventBasedGateway__outgoing__outFlow = null;\n      EMoflonEdge intermediateCatchEvent__incoming__outFlow = null;\n      EMoflonEdge outFlowToAlternativeFlow__target__alternativeFlow = null;\n      EMoflonEdge iceToAltFlow__target__alternativeFlow = null;\n      EMoflonEdge process__flowElements__intermediateCatchEvent = null;\n      EMoflonEdge outFlow__sourceRef__eventBasedGateway = null;\n      EMoflonEdge outFlowToAlt__target__alt = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge iceToAltFlow__source__intermediateCatchEvent = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"alternativeFlow\"));\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"ebgToNormalStep\"));\n\n         // ensure correct type and really bound of object ebgToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         ebgToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"eventBasedGateway\"));\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object intermediateCatchEvent\n         intermediateCatchEvent = Bpmn2Factory.eINSTANCE.createIntermediateCatchEvent();\n\n         // create object outFlowToAlt\n         outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToAlternativeFlowAlternative();\n\n         // create object outFlowToAlternativeFlow\n         outFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object iceToAltFlow\n         iceToAltFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createIntermediateCatchEventToAlternativeFlow();\n\n         // assign attribute intermediateCatchEvent\n         intermediateCatchEvent.setId ((java.lang.String)csp.getAttributeVariable(\"intermediateCatchEvent\",\"id\").getValue());\n         // assign attribute intermediateCatchEvent\n         intermediateCatchEvent.setName ((java.lang.String)csp.getAttributeVariable(\"intermediateCatchEvent\",\"name\").getValue());\n\n         // create link\n         outFlowToAlt.setTarget( alt);\n\n\n         // create link\n         outFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         iceToAltFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(intermediateCatchEvent); // add link\n\n\n         // create link\n         outFlow.setSourceRef( eventBasedGateway);\n\n\n         // create link\n         intermediateCatchEvent.getIncoming().add(outFlow);\n\n\n         // create link\n         outFlowToAlt.setSource( outFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow.setSource( outFlow);\n\n\n         // create link\n         iceToAltFlow.setSource( intermediateCatchEvent);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternativeFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object ebgToNormalStep is really bound\n         JavaSDM.ensure ( ebgToNormalStep != null );\n         // check object eventBasedGateway is really bound\n         JavaSDM.ensure ( eventBasedGateway != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object iceToAltFlow is really bound\n         JavaSDM.ensure ( iceToAltFlow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object intermediateCatchEvent is really bound\n         JavaSDM.ensure ( intermediateCatchEvent != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects alternativeFlow and alt \n         JavaSDM.ensure ( !alternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alt \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects eventBasedGateway and alt \n         JavaSDM.ensure ( !eventBasedGateway.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects iceToAltFlow and alt \n         JavaSDM.ensure ( !iceToAltFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alt \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlt and alt \n         JavaSDM.ensure ( !outFlowToAlt.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects processToUseCase and alt \n         JavaSDM.ensure ( !processToUseCase.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects ebgToNormalStep and alternativeFlow \n         JavaSDM.ensure ( !ebgToNormalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and alternativeFlow \n         JavaSDM.ensure ( !eventBasedGateway.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects iceToAltFlow and alternativeFlow \n         JavaSDM.ensure ( !iceToAltFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and alternativeFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and alternativeFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and alternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects process and alternativeFlow \n         JavaSDM.ensure ( !process.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and alternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects useCase and alternativeFlow \n         JavaSDM.ensure ( !useCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects eventBasedGateway and ebgToNormalStep \n         JavaSDM.ensure ( !eventBasedGateway.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and ebgToNormalStep \n         JavaSDM.ensure ( !flow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects iceToAltFlow and ebgToNormalStep \n         JavaSDM.ensure ( !iceToAltFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and ebgToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and ebgToNormalStep \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and ebgToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and ebgToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and ebgToNormalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and ebgToNormalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects process and ebgToNormalStep \n         JavaSDM.ensure ( !process.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects processToUseCase and ebgToNormalStep \n         JavaSDM.ensure ( !processToUseCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects useCase and ebgToNormalStep \n         JavaSDM.ensure ( !useCase.equals (ebgToNormalStep) );\n\n         // check isomorphic binding between objects flow and eventBasedGateway \n         JavaSDM.ensure ( !flow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and eventBasedGateway \n         JavaSDM.ensure ( !iceToAltFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and eventBasedGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and eventBasedGateway \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects normalStep and eventBasedGateway \n         JavaSDM.ensure ( !normalStep.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlow and eventBasedGateway \n         JavaSDM.ensure ( !outFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlowToAlt and eventBasedGateway \n         JavaSDM.ensure ( !outFlowToAlt.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and eventBasedGateway \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects process and eventBasedGateway \n         JavaSDM.ensure ( !process.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects processToUseCase and eventBasedGateway \n         JavaSDM.ensure ( !processToUseCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects useCase and eventBasedGateway \n         JavaSDM.ensure ( !useCase.equals (eventBasedGateway) );\n\n         // check isomorphic binding between objects iceToAltFlow and flow \n         JavaSDM.ensure ( !iceToAltFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and flow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlt and flow \n         JavaSDM.ensure ( !outFlowToAlt.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and flow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and iceToAltFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and iceToAltFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects normalStep and iceToAltFlow \n         JavaSDM.ensure ( !normalStep.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlow and iceToAltFlow \n         JavaSDM.ensure ( !outFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and iceToAltFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and iceToAltFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects process and iceToAltFlow \n         JavaSDM.ensure ( !process.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects processToUseCase and iceToAltFlow \n         JavaSDM.ensure ( !processToUseCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects useCase and iceToAltFlow \n         JavaSDM.ensure ( !useCase.equals (iceToAltFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and inFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects intermediateCatchEvent and inFlowToFlow \n         JavaSDM.ensure ( !intermediateCatchEvent.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and intermediateCatchEvent \n         JavaSDM.ensure ( !normalStep.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlow and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlow.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlowToAlt and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlowToAlt.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and intermediateCatchEvent \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects process and intermediateCatchEvent \n         JavaSDM.ensure ( !process.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects processToUseCase and intermediateCatchEvent \n         JavaSDM.ensure ( !processToUseCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects useCase and intermediateCatchEvent \n         JavaSDM.ensure ( !useCase.equals (intermediateCatchEvent) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and normalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and normalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToUseCase and normalStep \n         JavaSDM.ensure ( !processToUseCase.equals (normalStep) );\n\n         // check isomorphic binding between objects useCase and normalStep \n         JavaSDM.ensure ( !useCase.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and outFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlow) );\n\n         // check isomorphic binding between objects useCase and outFlow \n         JavaSDM.ensure ( !useCase.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlowToAlt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlt \n         JavaSDM.ensure ( !process.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlt \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlt \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !process.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__targetRef__intermediateCatchEvent\n         outFlow__targetRef__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_stepAlternative_alt\n         __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __alt_ref_alternativeFlow\n         __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object eventBasedGateway__outgoing__outFlow\n         eventBasedGateway__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object intermediateCatchEvent__incoming__outFlow\n         intermediateCatchEvent__incoming__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__intermediateCatchEvent\n         process__flowElements__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__eventBasedGateway\n         outFlow__sourceRef__eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__target__alt\n         outFlowToAlt__target__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_alternativeFlow\n         __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"CatchEventAfterEBGToStepRule\");\n         // assign attribute process__flowElements__intermediateCatchEvent\n         process__flowElements__intermediateCatchEvent.setName (\"flowElements\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute outFlow__sourceRef__eventBasedGateway\n         outFlow__sourceRef__eventBasedGateway.setName (\"sourceRef\");\n         // assign attribute eventBasedGateway__outgoing__outFlow\n         eventBasedGateway__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute outFlow__targetRef__intermediateCatchEvent\n         outFlow__targetRef__intermediateCatchEvent.setName (\"targetRef\");\n         // assign attribute intermediateCatchEvent__incoming__outFlow\n         intermediateCatchEvent__incoming__outFlow.setName (\"incoming\");\n         // assign attribute __useCase_flows_alternativeFlow\n         __useCase_flows_alternativeFlow.setName (\"flows\");\n         // assign attribute __normalStep_stepAlternative_alt\n         __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n         // assign attribute __alt_ref_alternativeFlow\n         __alt_ref_alternativeFlow.setName (\"ref\");\n         // assign attribute outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlt__target__alt\n         outFlowToAlt__target__alt.setName (\"target\");\n         // assign attribute outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow.setName (\"target\");\n         // assign attribute iceToAltFlow__source__intermediateCatchEvent\n         iceToAltFlow__source__intermediateCatchEvent.setName (\"source\");\n         // assign attribute iceToAltFlow__target__alternativeFlow\n         iceToAltFlow__target__alternativeFlow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__targetRef__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_stepAlternative_alt,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__alt_ref_alternativeFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventBasedGateway__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,intermediateCatchEvent__incoming__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__eventBasedGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__target__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_alternativeFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,iceToAltFlow__source__intermediateCatchEvent,\"createdEdges\");\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         process__flowElements__intermediateCatchEvent.setSrc( process);\n\n\n         // create link\n         eventBasedGateway__outgoing__outFlow.setSrc( eventBasedGateway);\n\n\n         // create link\n         outFlow__sourceRef__eventBasedGateway.setTrg( eventBasedGateway);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         intermediateCatchEvent__incoming__outFlow.setTrg( outFlow);\n\n\n         // create link\n         eventBasedGateway__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__eventBasedGateway.setSrc( outFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__targetRef__intermediateCatchEvent.setSrc( outFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         intermediateCatchEvent__incoming__outFlow.setSrc( intermediateCatchEvent);\n\n\n         // create link\n         outFlow__targetRef__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         process__flowElements__intermediateCatchEvent.setTrg( intermediateCatchEvent);\n\n\n         // create link\n         __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n         // create link\n         __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n         // create link\n         __alt_ref_alternativeFlow.setSrc( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setTrg( alt);\n\n\n         // create link\n         __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setSrc( outFlowToAlt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setSrc( outFlowToAlt);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         iceToAltFlow__target__alternativeFlow.setSrc( iceToAltFlow);\n\n\n         // create link\n         iceToAltFlow__source__intermediateCatchEvent.setSrc( iceToAltFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,outFlowToAlt,alternativeFlow,outFlowToAlternativeFlow,iceToAltFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      UseCase useCase = null;\n      EMoflonEdge __process_flowElements_eventBasedGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlow_targetRef_eventBasedGateway = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __eventBasedGateway_incoming_inFlow = null;\n      EMoflonEdge __ebgToNormalStep_source_eventBasedGateway = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __ebgToNormalStep_target_normalStep = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      CSP csp = null;\n      Process process = null;\n      Iterator fujaba__IterUseCaseToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterNormalStepToEbgToNormalStep = null;\n      FlowNodeToStep ebgToNormalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"CatchEventAfterEBGToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (match.getObject(\"alternativeFlow\"));\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // iterate to-many link target from normalStep to ebgToNormalStep\n         fujaba__Success = false;\n\n         fujaba__IterNormalStepToEbgToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,FlowNodeToStep.class,\"target\")).iterator ();\n\n         while ( fujaba__IterNormalStepToEbgToNormalStep.hasNext () )\n         {\n            try\n            {\n               ebgToNormalStep = (FlowNodeToStep) fujaba__IterNormalStepToEbgToNormalStep.next ();\n\n               // check object ebgToNormalStep is really bound\n               JavaSDM.ensure ( ebgToNormalStep != null );\n               // bind object\n               _TmpObject = ebgToNormalStep.getSource ();\n\n               // ensure correct type and really bound of object eventBasedGateway\n               JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n               eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n               // iterate to-many link target from flow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n               while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // iterate to-many link target from useCase to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterUseCaseToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,ProcessToUseCase.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterUseCaseToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterUseCaseToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           process = processToUseCase.getSource ();\n\n                           // check object process is really bound\n                           JavaSDM.ensure ( process != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object alternativeFlow is really bound\n                              JavaSDM.ensure ( alternativeFlow != null );\n                              // check object ebgToNormalStep is really bound\n                              JavaSDM.ensure ( ebgToNormalStep != null );\n                              // check object eventBasedGateway is really bound\n                              JavaSDM.ensure ( eventBasedGateway != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects flow and alternativeFlow \n                              JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                              // check link ref from alt to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                              ));\n\n                              // check link flowElements from eventBasedGateway to process\n                              JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flows from alternativeFlow to useCase\n                              JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from ebgToNormalStep to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (ebgToNormalStep.getSource ()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link stepAlternative from alt to normalStep\n                              JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from ebgToNormalStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (ebgToNormalStep.getTarget ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to eventBasedGateway\n                              JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // create object __process_flowElements_eventBasedGateway\n                              __process_flowElements_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __inFlow_targetRef_eventBasedGateway\n                              __inFlow_targetRef_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __eventBasedGateway_incoming_inFlow\n                              __eventBasedGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ebgToNormalStep_source_eventBasedGateway\n                              __ebgToNormalStep_source_eventBasedGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_alternativeFlow\n                              __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __ebgToNormalStep_target_normalStep\n                              __ebgToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __normalStep_stepAlternative_alt\n                              __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __alt_ref_alternativeFlow\n                              __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_eventBasedGateway\n                              __process_flowElements_eventBasedGateway.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_eventBasedGateway\n                              __inFlow_targetRef_eventBasedGateway.setName (\"targetRef\");\n                              // assign attribute __eventBasedGateway_incoming_inFlow\n                              __eventBasedGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCase_flows_alternativeFlow\n                              __useCase_flows_alternativeFlow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __normalStep_stepAlternative_alt\n                              __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n                              // assign attribute __ebgToNormalStep_source_eventBasedGateway\n                              __ebgToNormalStep_source_eventBasedGateway.setName (\"source\");\n                              // assign attribute __ebgToNormalStep_target_normalStep\n                              __ebgToNormalStep_target_normalStep.setName (\"target\");\n                              // assign attribute __alt_ref_alternativeFlow\n                              __alt_ref_alternativeFlow.setName (\"ref\");\n\n                              // create link\n                              __process_flowElements_eventBasedGateway.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __inFlow_targetRef_eventBasedGateway.setSrc( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __eventBasedGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __ebgToNormalStep_source_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              __process_flowElements_eventBasedGateway.setTrg( eventBasedGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(eventBasedGateway);\n\n\n                              // create link\n                              __eventBasedGateway_incoming_inFlow.setSrc( eventBasedGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __ebgToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __ebgToNormalStep_target_normalStep.setSrc( ebgToNormalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(ebgToNormalStep);\n\n\n                              // create link\n                              __ebgToNormalStep_source_eventBasedGateway.setSrc( ebgToNormalStep);\n\n\n                              // create link\n                              __alt_ref_alternativeFlow.setSrc( alt);\n\n\n                              // create link\n                              __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(alt);\n\n\n                              // create link\n                              __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n                              // create link\n                              __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(alternativeFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_target_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__eventBasedGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_alternativeFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_alternativeFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__ebgToNormalStep_source_eventBasedGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_stepAlternative_alt,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_eventBasedGateway,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,process,inFlow,eventBasedGateway,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,alternativeFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"CatchEventAfterEBGToStepRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"alt\", alt);\nmatch.registerObject(\"alternativeFlow\", alternativeFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", true, csp);\r\nvar_alternativeFlow_name.setValue(alternativeFlow.getName());\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", true, csp);\r\nvar_alt_condition.setValue(alt.getCondition());\r\nVariable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"eventBasedGateway.gatewayDirection\", true, csp);\r\nvar_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.id\", csp);\r\nVariable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.name\", csp);\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_intermediateCatchEvent_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"eventBasedGateway\",eventBasedGateway);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"ebgToNormalStep\",ebgToNormalStep);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"alternativeFlow\",alternativeFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			EventBasedGateway eventBasedGateway, UseCase useCase,
			ProcessToUseCase processToUseCase, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, NormalStep normalStep,
			FlowNodeToStep ebgToNormalStep, AlternativeFlowAlternative alt,
			AlternativeFlow alternativeFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"eventBasedGateway\", eventBasedGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"intermediateCatchEvent\", intermediateCatchEvent);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"ebgToNormalStep\", ebgToNormalStep);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"outFlowToAlt\", outFlowToAlt);\nruleresult.registerObject(\"alternativeFlow\", alternativeFlow);\nruleresult.registerObject(\"outFlowToAlternativeFlow\", outFlowToAlternativeFlow);\nruleresult.registerObject(\"iceToAltFlow\", iceToAltFlow);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject eventBasedGateway, EObject outFlow,
			EObject intermediateCatchEvent, EObject useCase,
			EObject processToUseCase, EObject flow, EObject inFlowToFlow,
			EObject normalStep, EObject ebgToNormalStep, EObject alt,
			EObject outFlowToAlt, EObject alternativeFlow,
			EObject outFlowToAlternativeFlow, EObject iceToAltFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"alt\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative()) && match.getObject(\"alternativeFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_918296 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_428023 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_223426 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_223426 = null;\n      Match match = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // bind object\n                     _TmpObject = outFlow.getSourceRef ();\n\n                     // ensure correct type and really bound of object eventBasedGateway\n                     JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n                     eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n                     // check link flowElements from eventBasedGateway to process\n                     JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                     ));\n\n                     // check link targetRef from inFlow to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // check link targetRef from outFlow to intermediateCatchEvent\n                     JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_intermediateCatchEvent_flowElements_918296 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                           // check object __DEC_intermediateCatchEvent_flowElements_918296 is really bound\n                           JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_918296 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_918296.getFlowElements().contains(intermediateCatchEvent));\n\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_918296 and process \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_918296.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_428023 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_428023 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_428023 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_428023.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_428023 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_428023.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from intermediateCatchEvent\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_223426\n                           fujaba__Success = false;\n\n                           fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_223426 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_223426.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_intermediateCatchEvent_targetRef_223426 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_223426.next ();\n\n                                 // check object __DEC_intermediateCatchEvent_targetRef_223426 is really bound\n                                 JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_223426 != null );\n                                 // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_223426 and inFlow \n                                 JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_223426.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_223426 and outFlow \n                                 JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_223426.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object eventBasedGateway is really bound\n                        JavaSDM.ensure ( eventBasedGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object intermediateCatchEvent is really bound\n                        JavaSDM.ensure ( intermediateCatchEvent != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from eventBasedGateway to process\n                        JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from intermediateCatchEvent to process\n                        JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to intermediateCatchEvent\n                        JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from inFlow to intermediateCatchEvent\n                        JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_flowElements to intermediateCatchEvent\n                        JavaSDM.ensure (intermediateCatchEvent.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_526(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_499035 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_906676 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_898041 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_898041 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      EventBasedGateway eventBasedGateway = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getTargetRef ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to eventBasedGateway\n               JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_intermediateCatchEvent_flowElements_499035 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                     // check object __DEC_intermediateCatchEvent_flowElements_499035 is really bound\n                     JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_499035 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_499035.getFlowElements().contains(intermediateCatchEvent));\n\n                     // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_499035 and process \n                     JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_499035.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_906676 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_906676 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_906676 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_906676.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_906676 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_906676.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from intermediateCatchEvent\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_898041\n                     fujaba__Success = false;\n\n                     fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_898041 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_898041.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_intermediateCatchEvent_targetRef_898041 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_898041.next ();\n\n                           // check object __DEC_intermediateCatchEvent_targetRef_898041 is really bound\n                           JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_898041 != null );\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_898041 and inFlow \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_898041.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_898041 and outFlow \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_898041.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object eventBasedGateway is really bound\n                  JavaSDM.ensure ( eventBasedGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object intermediateCatchEvent is really bound\n                  JavaSDM.ensure ( intermediateCatchEvent != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from eventBasedGateway to process\n                  JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from intermediateCatchEvent to process\n                  JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to intermediateCatchEvent\n                  JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from inFlow to intermediateCatchEvent\n                  JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_flowElements to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_527(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_114137 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_797648 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_290979 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_290979 = null;\n      Match match = null;\n      Iterator fujaba__IterEventBasedGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      EventBasedGateway eventBasedGateway = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.getTargetRef ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = eventBasedGateway.eContainer() instanceof Process ? (Process) eventBasedGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(eventBasedGateway));\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to eventBasedGateway\n         JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link targetRef from eventBasedGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventBasedGatewayToInFlow = new ArrayList(eventBasedGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterEventBasedGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterEventBasedGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_intermediateCatchEvent_flowElements_114137 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                     // check object __DEC_intermediateCatchEvent_flowElements_114137 is really bound\n                     JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_114137 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_114137.getFlowElements().contains(intermediateCatchEvent));\n\n                     // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_114137 and process \n                     JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_114137.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_797648 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_797648 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_797648 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_797648.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_797648 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_797648.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from intermediateCatchEvent\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_290979\n                     fujaba__Success = false;\n\n                     fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_290979 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_290979.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_intermediateCatchEvent_targetRef_290979 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_290979.next ();\n\n                           // check object __DEC_intermediateCatchEvent_targetRef_290979 is really bound\n                           JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_290979 != null );\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_290979 and inFlow \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_290979.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_290979 and outFlow \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_290979.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object eventBasedGateway is really bound\n                  JavaSDM.ensure ( eventBasedGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object intermediateCatchEvent is really bound\n                  JavaSDM.ensure ( intermediateCatchEvent != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from eventBasedGateway to process\n                  JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from intermediateCatchEvent to process\n                  JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_sourceRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to intermediateCatchEvent\n                  JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from inFlow to intermediateCatchEvent\n                  JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_sourceRef to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_528(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_756715 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_241890 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_643639 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_643639 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to eventBasedGateway\n         JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getTargetRef ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to eventBasedGateway\n               JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link src from outFlow to _edge_sourceRef\n               fujaba__Success = false;\n\n               fujaba__IterOutFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterOutFlowTo_edge_sourceRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_sourceRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_sourceRef.next ();\n\n                     // check object _edge_sourceRef is really bound\n                     JavaSDM.ensure ( _edge_sourceRef != null );\n                     // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                     JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                     // check link trg from _edge_sourceRef to eventBasedGateway\n                     JavaSDM.ensure (eventBasedGateway.equals (_edge_sourceRef.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_intermediateCatchEvent_flowElements_756715 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                           // check object __DEC_intermediateCatchEvent_flowElements_756715 is really bound\n                           JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_756715 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_756715.getFlowElements().contains(intermediateCatchEvent));\n\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_756715 and process \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_756715.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_241890 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_241890 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_241890 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_241890.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_241890 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_241890.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from intermediateCatchEvent\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_643639\n                           fujaba__Success = false;\n\n                           fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_643639 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_643639.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_intermediateCatchEvent_targetRef_643639 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_643639.next ();\n\n                                 // check object __DEC_intermediateCatchEvent_targetRef_643639 is really bound\n                                 JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_643639 != null );\n                                 // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_643639 and inFlow \n                                 JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_643639.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_643639 and outFlow \n                                 JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_643639.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_outgoing is really bound\n                        JavaSDM.ensure ( _edge_outgoing != null );\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object eventBasedGateway is really bound\n                        JavaSDM.ensure ( eventBasedGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object intermediateCatchEvent is really bound\n                        JavaSDM.ensure ( intermediateCatchEvent != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                        JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from eventBasedGateway to process\n                        JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from intermediateCatchEvent to process\n                        JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_outgoing to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (_edge_outgoing.getSrc ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to intermediateCatchEvent\n                        JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from inFlow to intermediateCatchEvent\n                        JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_outgoing to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_529(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_905775 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_556747 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_882250 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_882250 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      EventBasedGateway eventBasedGateway = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // check link targetRef from outFlow to intermediateCatchEvent\n         JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to eventBasedGateway\n               JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_intermediateCatchEvent_flowElements_905775 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                     // check object __DEC_intermediateCatchEvent_flowElements_905775 is really bound\n                     JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_905775 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_905775.getFlowElements().contains(intermediateCatchEvent));\n\n                     // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_905775 and process \n                     JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_905775.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_556747 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_556747 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_556747 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_556747.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_556747 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_556747.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from intermediateCatchEvent\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_882250\n                     fujaba__Success = false;\n\n                     fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_882250 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_882250.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_intermediateCatchEvent_targetRef_882250 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_882250.next ();\n\n                           // check object __DEC_intermediateCatchEvent_targetRef_882250 is really bound\n                           JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_882250 != null );\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_882250 and inFlow \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_882250.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_882250 and outFlow \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_882250.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_targetRef is really bound\n                  JavaSDM.ensure ( _edge_targetRef != null );\n                  // check object eventBasedGateway is really bound\n                  JavaSDM.ensure ( eventBasedGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object intermediateCatchEvent is really bound\n                  JavaSDM.ensure ( intermediateCatchEvent != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from eventBasedGateway to process\n                  JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from intermediateCatchEvent to process\n                  JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_targetRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_targetRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to eventBasedGateway\n                  JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to intermediateCatchEvent\n                  JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from inFlow to intermediateCatchEvent\n                  JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_targetRef to intermediateCatchEvent\n                  JavaSDM.ensure (intermediateCatchEvent.equals (_edge_targetRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_530(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_intermediateCatchEvent_flowElements_234625 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_825382 = null;\n      Iterator fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_151780 = null;\n      SequenceFlow __DEC_intermediateCatchEvent_targetRef_151780 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      EventBasedGateway eventBasedGateway = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object intermediateCatchEvent\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         intermediateCatchEvent = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from intermediateCatchEvent to process\n         JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object eventBasedGateway\n         JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n         eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n         // check link flowElements from eventBasedGateway to process\n         JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n         ));\n\n         // check link targetRef from outFlow to intermediateCatchEvent\n         JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to eventBasedGateway\n               JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link src from outFlow to _edge_targetRef\n               fujaba__Success = false;\n\n               fujaba__IterOutFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterOutFlowTo_edge_targetRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_targetRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_targetRef.next ();\n\n                     // check object _edge_targetRef is really bound\n                     JavaSDM.ensure ( _edge_targetRef != null );\n                     // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                     JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                     // check link trg from _edge_targetRef to intermediateCatchEvent\n                     JavaSDM.ensure (intermediateCatchEvent.equals (_edge_targetRef.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_intermediateCatchEvent_flowElements_234625 = intermediateCatchEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) intermediateCatchEvent.eContainer() : null;\n\n                           // check object __DEC_intermediateCatchEvent_flowElements_234625 is really bound\n                           JavaSDM.ensure ( __DEC_intermediateCatchEvent_flowElements_234625 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_intermediateCatchEvent_flowElements_234625.getFlowElements().contains(intermediateCatchEvent));\n\n                           // check isomorphic binding between objects __DEC_intermediateCatchEvent_flowElements_234625 and process \n                           JavaSDM.ensure ( !__DEC_intermediateCatchEvent_flowElements_234625.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_825382 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_825382 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_825382 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_825382.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_825382 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_825382.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from intermediateCatchEvent\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(intermediateCatchEvent,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from intermediateCatchEvent to __DEC_intermediateCatchEvent_targetRef_151780\n                           fujaba__Success = false;\n\n                           fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_151780 = new ArrayList(intermediateCatchEvent.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_151780.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_intermediateCatchEvent_targetRef_151780 = (SequenceFlow) fujaba__IterIntermediateCatchEventTo__DEC_intermediateCatchEvent_targetRef_151780.next ();\n\n                                 // check object __DEC_intermediateCatchEvent_targetRef_151780 is really bound\n                                 JavaSDM.ensure ( __DEC_intermediateCatchEvent_targetRef_151780 != null );\n                                 // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_151780 and inFlow \n                                 JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_151780.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_intermediateCatchEvent_targetRef_151780 and outFlow \n                                 JavaSDM.ensure ( !__DEC_intermediateCatchEvent_targetRef_151780.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_incoming is really bound\n                        JavaSDM.ensure ( _edge_incoming != null );\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object eventBasedGateway is really bound\n                        JavaSDM.ensure ( eventBasedGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object intermediateCatchEvent is really bound\n                        JavaSDM.ensure ( intermediateCatchEvent != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                        JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from eventBasedGateway to process\n                        JavaSDM.ensure (process.equals (eventBasedGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from intermediateCatchEvent to process\n                        JavaSDM.ensure (process.equals (intermediateCatchEvent.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_incoming to intermediateCatchEvent\n                        JavaSDM.ensure (intermediateCatchEvent.equals (_edge_incoming.getSrc ()\n                        ));\n\n                        // check link src from _edge_targetRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to eventBasedGateway\n                        JavaSDM.ensure (eventBasedGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to intermediateCatchEvent\n                        JavaSDM.ensure (intermediateCatchEvent.equals (outFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from inFlow to intermediateCatchEvent\n                        JavaSDM.ensure (!(intermediateCatchEvent.equals (inFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_incoming to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_incoming.getTrg ()\n                        ));\n\n                        // check link trg from _edge_targetRef to intermediateCatchEvent\n                        JavaSDM.ensure (intermediateCatchEvent.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_531(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_462425 = null;\n      NormalStep __DEC_alt_stepAlternative_392698 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_983289 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_983289 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToNormalStep = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      Iterator fujaba__IterAlternativeFlowToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n\n         // check link flows from alternativeFlow to useCase\n         JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n         ));\n\n         // iterate to-many link ref from alternativeFlow to alt\n         fujaba__Success = false;\n\n         fujaba__IterAlternativeFlowToAlt = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n         while ( fujaba__IterAlternativeFlowToAlt.hasNext () )\n         {\n            try\n            {\n               alt = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowToAlt.next ();\n\n               // check object alt is really bound\n               JavaSDM.ensure ( alt != null );\n               // iterate to-many link flows from useCase to flow\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n               while ( fujaba__IterUseCaseToFlow.hasNext () )\n               {\n                  try\n                  {\n                     flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n                     // check isomorphic binding between objects flow and alternativeFlow \n                     JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                     // iterate to-many link steps from flow to normalStep\n                     fujaba__Success = false;\n\n                     fujaba__IterFlowToNormalStep = new ArrayList(flow.getSteps()).iterator ();\n\n                     while ( fujaba__IterFlowToNormalStep.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterFlowToNormalStep.next ();\n\n                           // ensure correct type and really bound of object normalStep\n                           JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                           normalStep = (NormalStep) _TmpObject;\n                           // check link stepAlternative from alt to normalStep\n                           JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_alternativeFlow_flows_462425 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                                 // check object __DEC_alternativeFlow_flows_462425 is really bound\n                                 JavaSDM.ensure ( __DEC_alternativeFlow_flows_462425 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_alternativeFlow_flows_462425.getFlows().contains(alternativeFlow));\n\n                                 // check isomorphic binding between objects __DEC_alternativeFlow_flows_462425 and useCase \n                                 JavaSDM.ensure ( !__DEC_alternativeFlow_flows_462425.equals (useCase) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_alt_stepAlternative_392698 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                                 // check object __DEC_alt_stepAlternative_392698 is really bound\n                                 JavaSDM.ensure ( __DEC_alt_stepAlternative_392698 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_alt_stepAlternative_392698.getStepAlternative().contains(alt));\n\n                                 // check isomorphic binding between objects __DEC_alt_stepAlternative_392698 and normalStep \n                                 JavaSDM.ensure ( !__DEC_alt_stepAlternative_392698.equals (normalStep) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_983289\n                                 fujaba__Success = false;\n\n                                 fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_983289 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_983289.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_alternativeFlow_ref_983289 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_983289.next ();\n\n                                       // check object __DEC_alternativeFlow_ref_983289 is really bound\n                                       JavaSDM.ensure ( __DEC_alternativeFlow_ref_983289 != null );\n                                       // check isomorphic binding between objects __DEC_alternativeFlow_ref_983289 and alt \n                                       JavaSDM.ensure ( !__DEC_alternativeFlow_ref_983289.equals (alt) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flows is really bound\n                              JavaSDM.ensure ( _edge_flows != null );\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object alternativeFlow is really bound\n                              JavaSDM.ensure ( alternativeFlow != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects flow and alternativeFlow \n                              JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                              // check link ref from alt to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                              ));\n\n                              // check link flows from alternativeFlow to useCase\n                              JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link src from _edge_flows to useCase\n                              JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                              ));\n\n                              // check link stepAlternative from alt to normalStep\n                              JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link trg from _edge_flows to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (_edge_flows.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_219(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_498690 = null;\n      NormalStep __DEC_alt_stepAlternative_969171 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_307724 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_307724 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToAlternativeFlow = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n      UseCase useCase = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_stepAlternative is really bound\n         JavaSDM.ensure ( _edge_stepAlternative != null );\n         // bind object\n         _TmpObject = _edge_stepAlternative.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_stepAlternative.getTrg ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // check link stepAlternative from alt to normalStep\n         JavaSDM.ensure (normalStep.equals (alt.eContainer()\n         ));\n\n         // iterate to-many link flows from useCase to alternativeFlow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToAlternativeFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToAlternativeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterUseCaseToAlternativeFlow.next ();\n\n               // ensure correct type and really bound of object alternativeFlow\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n               alternativeFlow = (AlternativeFlow) _TmpObject;\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // check link ref from alt to alternativeFlow\n               JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alternativeFlow_flows_498690 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                     // check object __DEC_alternativeFlow_flows_498690 is really bound\n                     JavaSDM.ensure ( __DEC_alternativeFlow_flows_498690 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alternativeFlow_flows_498690.getFlows().contains(alternativeFlow));\n\n                     // check isomorphic binding between objects __DEC_alternativeFlow_flows_498690 and useCase \n                     JavaSDM.ensure ( !__DEC_alternativeFlow_flows_498690.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alt_stepAlternative_969171 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                     // check object __DEC_alt_stepAlternative_969171 is really bound\n                     JavaSDM.ensure ( __DEC_alt_stepAlternative_969171 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alt_stepAlternative_969171.getStepAlternative().contains(alt));\n\n                     // check isomorphic binding between objects __DEC_alt_stepAlternative_969171 and normalStep \n                     JavaSDM.ensure ( !__DEC_alt_stepAlternative_969171.equals (normalStep) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_307724\n                     fujaba__Success = false;\n\n                     fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_307724 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_307724.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_alternativeFlow_ref_307724 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_307724.next ();\n\n                           // check object __DEC_alternativeFlow_ref_307724 is really bound\n                           JavaSDM.ensure ( __DEC_alternativeFlow_ref_307724 != null );\n                           // check isomorphic binding between objects __DEC_alternativeFlow_ref_307724 and alt \n                           JavaSDM.ensure ( !__DEC_alternativeFlow_ref_307724.equals (alt) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_stepAlternative is really bound\n                  JavaSDM.ensure ( _edge_stepAlternative != null );\n                  // check object alt is really bound\n                  JavaSDM.ensure ( alt != null );\n                  // check object alternativeFlow is really bound\n                  JavaSDM.ensure ( alternativeFlow != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects flow and alternativeFlow \n                  JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                  // check link ref from alt to alternativeFlow\n                  JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                  ));\n\n                  // check link flows from alternativeFlow to useCase\n                  JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link src from _edge_stepAlternative to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_stepAlternative.getSrc ()\n                  ));\n\n                  // check link stepAlternative from alt to normalStep\n                  JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_stepAlternative to alt\n                  JavaSDM.ensure (alt.equals (_edge_stepAlternative.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_220(
			EMoflonEdge _edge_stepAlternative);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_725540 = null;\n      NormalStep __DEC_alt_stepAlternative_737361 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_258785 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_258785 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToNormalStep = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      UseCase useCase = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_ref is really bound\n         JavaSDM.ensure ( _edge_ref != null );\n         // bind object\n         _TmpObject = _edge_ref.getSrc ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_ref.getTrg ();\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n\n         // check link ref from alt to alternativeFlow\n         JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n         ));\n\n         // bind object\n         useCase = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(alternativeFlow));\n\n         // iterate to-many link flows from useCase to flow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToFlow.hasNext () )\n         {\n            try\n            {\n               flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // iterate to-many link steps from flow to normalStep\n               fujaba__Success = false;\n\n               fujaba__IterFlowToNormalStep = new ArrayList(flow.getSteps()).iterator ();\n\n               while ( fujaba__IterFlowToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterFlowToNormalStep.next ();\n\n                     // ensure correct type and really bound of object normalStep\n                     JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                     normalStep = (NormalStep) _TmpObject;\n                     // check link stepAlternative from alt to normalStep\n                     JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_alternativeFlow_flows_725540 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                           // check object __DEC_alternativeFlow_flows_725540 is really bound\n                           JavaSDM.ensure ( __DEC_alternativeFlow_flows_725540 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_alternativeFlow_flows_725540.getFlows().contains(alternativeFlow));\n\n                           // check isomorphic binding between objects __DEC_alternativeFlow_flows_725540 and useCase \n                           JavaSDM.ensure ( !__DEC_alternativeFlow_flows_725540.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_alt_stepAlternative_737361 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                           // check object __DEC_alt_stepAlternative_737361 is really bound\n                           JavaSDM.ensure ( __DEC_alt_stepAlternative_737361 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_alt_stepAlternative_737361.getStepAlternative().contains(alt));\n\n                           // check isomorphic binding between objects __DEC_alt_stepAlternative_737361 and normalStep \n                           JavaSDM.ensure ( !__DEC_alt_stepAlternative_737361.equals (normalStep) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_258785\n                           fujaba__Success = false;\n\n                           fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_258785 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_258785.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_alternativeFlow_ref_258785 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_258785.next ();\n\n                                 // check object __DEC_alternativeFlow_ref_258785 is really bound\n                                 JavaSDM.ensure ( __DEC_alternativeFlow_ref_258785 != null );\n                                 // check isomorphic binding between objects __DEC_alternativeFlow_ref_258785 and alt \n                                 JavaSDM.ensure ( !__DEC_alternativeFlow_ref_258785.equals (alt) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_ref is really bound\n                        JavaSDM.ensure ( _edge_ref != null );\n                        // check object alt is really bound\n                        JavaSDM.ensure ( alt != null );\n                        // check object alternativeFlow is really bound\n                        JavaSDM.ensure ( alternativeFlow != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check isomorphic binding between objects flow and alternativeFlow \n                        JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                        // check link ref from alt to alternativeFlow\n                        JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                        ));\n\n                        // check link flows from alternativeFlow to useCase\n                        JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link src from _edge_ref to alt\n                        JavaSDM.ensure (alt.equals (_edge_ref.getSrc ()\n                        ));\n\n                        // check link stepAlternative from alt to normalStep\n                        JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link trg from _edge_ref to alternativeFlow\n                        JavaSDM.ensure (alternativeFlow.equals (_edge_ref.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alt,alternativeFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_221(EMoflonEdge _edge_ref);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      IntermediateCatchEvent intermediateCatchEvent = null;\n      SequenceFlow outFlow = null;\n      SequenceFlowToAlternativeFlowAlternative outFlowToAlt = null;\n      SequenceFlowToUCFlow outFlowToAlternativeFlow = null;\n      IntermediateCatchEventToAlternativeFlow iceToAltFlow = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterEventBasedGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      NormalStep normalStep = null;\n      Process process = null;\n      EventBasedGateway eventBasedGateway = null;\n      Iterator fujaba__IterEbgToNormalStepListToEbgToNormalStep = null;\n      FlowNodeToStep ebgToNormalStep = null;\n      Iterator fujaba__IterRuleEntryContainerToEbgToNormalStepList = null;\n      RuleEntryList ebgToNormalStepList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to ebgToNormalStepList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToEbgToNormalStepList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToEbgToNormalStepList.hasNext () )\n         {\n            try\n            {\n               ebgToNormalStepList = (RuleEntryList) fujaba__IterRuleEntryContainerToEbgToNormalStepList.next ();\n\n               // check object ebgToNormalStepList is really bound\n               JavaSDM.ensure ( ebgToNormalStepList != null );\n               // iterate to-many link entryObjects from ebgToNormalStepList to ebgToNormalStep\n               fujaba__Success = false;\n\n               fujaba__IterEbgToNormalStepListToEbgToNormalStep = new ArrayList(ebgToNormalStepList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterEbgToNormalStepListToEbgToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterEbgToNormalStepListToEbgToNormalStep.next ();\n\n                     // ensure correct type and really bound of object ebgToNormalStep\n                     JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n                     ebgToNormalStep = (FlowNodeToStep) _TmpObject;\n                     // bind object\n                     _TmpObject = ebgToNormalStep.getSource ();\n\n                     // ensure correct type and really bound of object eventBasedGateway\n                     JavaSDM.ensure ( _TmpObject instanceof EventBasedGateway );\n                     eventBasedGateway = (EventBasedGateway) _TmpObject;\n\n                     // bind object\n                     _TmpObject = eventBasedGateway.eContainer() instanceof Process ? (Process) eventBasedGateway.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof Process );\n                     process = (Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(eventBasedGateway));\n\n                     // bind object\n                     _TmpObject = ebgToNormalStep.getTarget ();\n\n                     // ensure correct type and really bound of object normalStep\n                     JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                     normalStep = (NormalStep) _TmpObject;\n\n                     // iterate to-many link targetRef from eventBasedGateway to inFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterEventBasedGatewayToInFlow = new ArrayList(eventBasedGateway.getIncoming()).iterator ();\n\n                     while ( fujaba__IterEventBasedGatewayToInFlow.hasNext () )\n                     {\n                        try\n                        {\n                           inFlow = (SequenceFlow) fujaba__IterEventBasedGatewayToInFlow.next ();\n\n                           // check object inFlow is really bound\n                           JavaSDM.ensure ( inFlow != null );\n                           // check link flowElements from inFlow to process\n                           JavaSDM.ensure (process.equals (inFlow.eContainer()\n                           ));\n\n                           // iterate to-many link source from inFlow to inFlowToFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                                 // check object inFlowToFlow is really bound\n                                 JavaSDM.ensure ( inFlowToFlow != null );\n                                 // bind object\n                                 flow = inFlowToFlow.getTarget ();\n\n                                 // check object flow is really bound\n                                 JavaSDM.ensure ( flow != null );\n\n                                 // check link steps from normalStep to flow\n                                 JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                                 ));\n\n                                 // iterate to-many link source from process to processToUseCase\n                                 fujaba__Success = false;\n\n                                 fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n                                 while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                                       // check object processToUseCase is really bound\n                                       JavaSDM.ensure ( processToUseCase != null );\n                                       // bind object\n                                       useCase = processToUseCase.getTarget ();\n\n                                       // check object useCase is really bound\n                                       JavaSDM.ensure ( useCase != null );\n\n                                       // check link flows from flow to useCase\n                                       JavaSDM.ensure (useCase.equals (flow.eContainer()\n                                       ));\n\n                                       // story node \'solve CSP\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,process,inFlow,eventBasedGateway,outFlow,intermediateCatchEvent,useCase,processToUseCase,flow,inFlowToFlow,normalStep,ebgToNormalStep,alt,outFlowToAlt,alternativeFlow,outFlowToAlternativeFlow,iceToAltFlow,ruleResult));\n\n                                          // ensure correct type and really bound of object csp\n                                          JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                          csp = (CSP) _TmpObject;\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n                                       // statement node \'check CSP\'\n                                       fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'perform\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object ebgToNormalStep is really bound\n                                             JavaSDM.ensure ( ebgToNormalStep != null );\n                                             // check object eventBasedGateway is really bound\n                                             JavaSDM.ensure ( eventBasedGateway != null );\n                                             // check object flow is really bound\n                                             JavaSDM.ensure ( flow != null );\n                                             // check object inFlow is really bound\n                                             JavaSDM.ensure ( inFlow != null );\n                                             // check object inFlowToFlow is really bound\n                                             JavaSDM.ensure ( inFlowToFlow != null );\n                                             // check object normalStep is really bound\n                                             JavaSDM.ensure ( normalStep != null );\n                                             // check object process is really bound\n                                             JavaSDM.ensure ( process != null );\n                                             // check object processToUseCase is really bound\n                                             JavaSDM.ensure ( processToUseCase != null );\n                                             // check object ruleResult is really bound\n                                             JavaSDM.ensure ( ruleResult != null );\n                                             // check object useCase is really bound\n                                             JavaSDM.ensure ( useCase != null );\n                                             // create object intermediateCatchEvent\n                                             intermediateCatchEvent = Bpmn2Factory.eINSTANCE.createIntermediateCatchEvent();\n\n                                             // create object outFlow\n                                             outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                             // create object outFlowToAlt\n                                             outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToAlternativeFlowAlternative();\n\n                                             // create object outFlowToAlternativeFlow\n                                             outFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                             // create object iceToAltFlow\n                                             iceToAltFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createIntermediateCatchEventToAlternativeFlow();\n\n                                             // create object alternativeFlow\n                                             alternativeFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();\n\n                                             // create object alt\n                                             alt = UseCaseDSLFactory.eINSTANCE.createAlternativeFlowAlternative();\n\n                                             // assign attribute intermediateCatchEvent\n                                             intermediateCatchEvent.setId ((java.lang.String)csp.getAttributeVariable(\"intermediateCatchEvent\",\"id\").getValue());\n                                             // assign attribute intermediateCatchEvent\n                                             intermediateCatchEvent.setName ((java.lang.String)csp.getAttributeVariable(\"intermediateCatchEvent\",\"name\").getValue());\n                                             // assign attribute alt\n                                             alt.setCondition ((java.lang.String)csp.getAttributeVariable(\"alt\",\"condition\").getValue());\n                                             // assign attribute alternativeFlow\n                                             alternativeFlow.setName ((java.lang.String)csp.getAttributeVariable(\"alternativeFlow\",\"name\").getValue());\n                                             // assign attribute ruleResult\n                                             ruleResult.setSuccess (true);\n\n                                             // create link\n                                             \tprocess.getFlowElements().add(intermediateCatchEvent); // add link\n\n\n                                             // create link\n                                             \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                             // create link\n                                             outFlow.setSourceRef( eventBasedGateway);\n\n\n                                             // create link\n                                             intermediateCatchEvent.getIncoming().add(outFlow);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(outFlow);\n\n\n                                             // create link\n                                             outFlowToAlt.setSource( outFlow);\n\n\n                                             // create link\n                                             outFlowToAlternativeFlow.setSource( outFlow);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(intermediateCatchEvent);\n\n\n                                             // create link\n                                             iceToAltFlow.setSource( intermediateCatchEvent);\n\n\n                                             // create link\n                                             \tuseCase.getFlows().add(alternativeFlow); // add link\n\n\n                                             // create link\n                                             \tnormalStep.getStepAlternative().add(alt); // add link\n\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt,alternativeFlow,\"ref\");\n\n                                             // create link\n                                             outFlowToAlt.setTarget( alt);\n\n\n                                             // create link\n                                             ruleResult.getTargetObjects().add(alt);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(outFlowToAlt);\n\n\n                                             // create link\n                                             outFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n                                             // create link\n                                             ruleResult.getTargetObjects().add(alternativeFlow);\n\n\n                                             // create link\n                                             iceToAltFlow.setTarget( alternativeFlow);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(outFlowToAlternativeFlow);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(iceToAltFlow);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          return ruleResult;\n\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			FlowNodeToStep ebgToNormalStepDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"eventBasedGateway.gatewayDirection\", true, csp);\r\nvar_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.id\", csp);\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", csp);\r\nVariable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"intermediateCatchEvent.name\", csp);\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", csp);\r\n\r\n// Create constraints\r\nEq_modelgenGatewayDirection eq_modelgenGatewayDirection = new Eq_modelgenGatewayDirection();Eq_modelgen eq_modelgen = new Eq_modelgen();Eq_modelgen eq_modelgen_0 = new Eq_modelgen();\r\n\r\ncsp.getConstraints().add(eq_modelgenGatewayDirection);\r\ncsp.getConstraints().add(eq_modelgen);\r\ncsp.getConstraints().add(eq_modelgen_0);\r\n\r\n// Solve CSP\r\neq_modelgenGatewayDirection.setRuleName(\"\");\r\neq_modelgenGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);\r\neq_modelgen.setRuleName(\"\");\r\neq_modelgen.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);\r\neq_modelgen_0.setRuleName(\"\");\r\neq_modelgen_0.solve(var_intermediateCatchEvent_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"eventBasedGateway\",eventBasedGateway);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"ebgToNormalStep\",ebgToNormalStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			EventBasedGateway eventBasedGateway, SequenceFlow outFlow,
			IntermediateCatchEvent intermediateCatchEvent, UseCase useCase,
			ProcessToUseCase processToUseCase, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, NormalStep normalStep,
			FlowNodeToStep ebgToNormalStep, AlternativeFlowAlternative alt,
			SequenceFlowToAlternativeFlowAlternative outFlowToAlt,
			AlternativeFlow alternativeFlow,
			SequenceFlowToUCFlow outFlowToAlternativeFlow,
			IntermediateCatchEventToAlternativeFlow iceToAltFlow,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // CatchEventAfterEBGToStepRule
