/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>User Task To Step After SE Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getUserTaskToStepAfterSERule()
 * @model
 * @generated
 */
public interface UserTaskToStepAfterSERule extends AbstractRule,
		FirstUserTaskToStepRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_task = null;\n      EMoflonEdge __inFlow_sourceRef_flowNode = null;\n      EMoflonEdge __flowNode_outgoing_inFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __process_flowElements_flowNode = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flowNode is really bound\n         JavaSDM.ensure ( flowNode != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flowNode is really bound\n            JavaSDM.ensure ( flowNode != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object task is really bound\n            JavaSDM.ensure ( task != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __task_incoming_inFlow\n            __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_task\n            __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_task\n            __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __task_outgoing_outFlow\n            __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_task\n            __process_flowElements_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __inFlow_targetRef_task\n            __inFlow_targetRef_task.setName (\"targetRef\");\n            // assign attribute __task_incoming_inFlow\n            __task_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __process_flowElements_task\n            __process_flowElements_task.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __outFlow_sourceRef_task\n            __outFlow_sourceRef_task.setName (\"sourceRef\");\n            // assign attribute __task_outgoing_outFlow\n            __task_outgoing_outFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__task_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,task,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__task_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_task,\"toBeTranslatedEdges\");\n\n            // create link\n            __task_outgoing_outFlow.setSrc( task);\n\n\n            // create link\n            __task_incoming_inFlow.setSrc( task);\n\n\n            // create link\n            __process_flowElements_task.setTrg( task);\n\n\n            // create link\n            __inFlow_targetRef_task.setTrg( task);\n\n\n            // create link\n            __outFlow_sourceRef_task.setTrg( task);\n\n\n            // create link\n            __task_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_task.setSrc( inFlow);\n\n\n            // create link\n            __process_flowElements_task.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __task_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flowNode is really bound\n            JavaSDM.ensure ( flowNode != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object task is really bound\n            JavaSDM.ensure ( task != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __inFlow_sourceRef_flowNode\n            __inFlow_sourceRef_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flowNode_outgoing_inFlow\n            __flowNode_outgoing_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_flowNode\n            __process_flowElements_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_flowNode\n            __process_flowElements_flowNode.setName (\"flowElements\");\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n            // assign attribute __inFlow_sourceRef_flowNode\n            __inFlow_sourceRef_flowNode.setName (\"sourceRef\");\n            // assign attribute __flowNode_outgoing_inFlow\n            __flowNode_outgoing_inFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_sourceRef_flowNode,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flowNode_outgoing_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flowNode,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_flowNode,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            __flowNode_outgoing_inFlow.setSrc( flowNode);\n\n\n            // create link\n            __process_flowElements_flowNode.setTrg( flowNode);\n\n\n            // create link\n            __inFlow_sourceRef_flowNode.setTrg( flowNode);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n\n            // create link\n            __flowNode_outgoing_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_sourceRef_flowNode.setSrc( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __process_flowElements_flowNode.setSrc( process);\n\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, StartEvent flowNode, Lane lane,
			UserTask task, SequenceFlow inFlow, bpmn2.Process process,
			SequenceFlow outFlow, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      StartEvent flowNode = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      LaneToActor laneToActor = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      UserTask task = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      FlowNodeToStep taskToNormalStep = null;\n      NormalStep normalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge normalStep__actor__actor = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge flow__steps__normalStep = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge taskToNormalStep__source__task = null;\n      EMoflonEdge __process_flowElements_task = null;\n      EMoflonEdge taskToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowNode\"));\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         flowNode = (StartEvent) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneToActor\"));\n\n         // ensure correct type and really bound of object laneToActor\n         JavaSDM.ensure ( _TmpObject instanceof LaneToActor );\n         laneToActor = (LaneToActor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"task\"));\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object taskToNormalStep\n         taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object normalStep\n         normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // assign attribute normalStep\n         normalStep.setName ((java.lang.String)csp.getValue(\"normalStep\",\"name\"));\n         // assign attribute normalStep\n         normalStep.setLabel ((java.lang.String)csp.getValue(\"normalStep\",\"label\"));\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         taskToNormalStep.setSource( task);\n\n\n         // create link\n         normalStep.setActor( actor);\n\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         flow.getSteps().add(normalStep);\n\n\n         // create link\n         taskToNormalStep.setTarget( normalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowNode is really bound\n         JavaSDM.ensure ( flowNode != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and actor \n         JavaSDM.ensure ( !flowNode.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects laneToActor and actor \n         JavaSDM.ensure ( !laneToActor.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects task and actor \n         JavaSDM.ensure ( !task.equals (actor) );\n\n         // check isomorphic binding between objects taskToNormalStep and actor \n         JavaSDM.ensure ( !taskToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and flow \n         JavaSDM.ensure ( !flowNode.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects laneToActor and flow \n         JavaSDM.ensure ( !laneToActor.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects task and flow \n         JavaSDM.ensure ( !task.equals (flow) );\n\n         // check isomorphic binding between objects taskToNormalStep and flow \n         JavaSDM.ensure ( !taskToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flowNode \n         JavaSDM.ensure ( !inFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and flowNode \n         JavaSDM.ensure ( !inFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects lane and flowNode \n         JavaSDM.ensure ( !lane.equals (flowNode) );\n\n         // check isomorphic binding between objects laneSet and flowNode \n         JavaSDM.ensure ( !laneSet.equals (flowNode) );\n\n         // check isomorphic binding between objects laneToActor and flowNode \n         JavaSDM.ensure ( !laneToActor.equals (flowNode) );\n\n         // check isomorphic binding between objects normalStep and flowNode \n         JavaSDM.ensure ( !normalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlow and flowNode \n         JavaSDM.ensure ( !outFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToFlow and flowNode \n         JavaSDM.ensure ( !outFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flowNode \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects process and flowNode \n         JavaSDM.ensure ( !process.equals (flowNode) );\n\n         // check isomorphic binding between objects task and flowNode \n         JavaSDM.ensure ( !task.equals (flowNode) );\n\n         // check isomorphic binding between objects taskToNormalStep and flowNode \n         JavaSDM.ensure ( !taskToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects task and inFlow \n         JavaSDM.ensure ( !task.equals (inFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlowToFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects task and inFlowToFlow \n         JavaSDM.ensure ( !task.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and lane \n         JavaSDM.ensure ( !laneToActor.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects task and lane \n         JavaSDM.ensure ( !task.equals (lane) );\n\n         // check isomorphic binding between objects taskToNormalStep and lane \n         JavaSDM.ensure ( !taskToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and laneSet \n         JavaSDM.ensure ( !laneToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneSet \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneSet \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects task and laneSet \n         JavaSDM.ensure ( !task.equals (laneSet) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneSet \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects normalStep and laneToActor \n         JavaSDM.ensure ( !normalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and laneToActor \n         JavaSDM.ensure ( !outFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneToActor \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneToActor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and laneToActor \n         JavaSDM.ensure ( !process.equals (laneToActor) );\n\n         // check isomorphic binding between objects task and laneToActor \n         JavaSDM.ensure ( !task.equals (laneToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneToActor \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects task and normalStep \n         JavaSDM.ensure ( !task.equals (normalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and normalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects task and outFlow \n         JavaSDM.ensure ( !task.equals (outFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects task and outFlowToFlow \n         JavaSDM.ensure ( !task.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and outFlowToNormalStep \n         JavaSDM.ensure ( !task.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToNormalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and process \n         JavaSDM.ensure ( !task.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and process \n         JavaSDM.ensure ( !taskToNormalStep.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and task \n         JavaSDM.ensure ( !taskToNormalStep.equals (task) );\n\n         // create object __inFlow_targetRef_task\n         __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_task\n         __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __task_incoming_inFlow\n         __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__actor__actor\n         normalStep__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __task_outgoing_outFlow\n         __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__normalStep\n         flow__steps__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__source__task\n         taskToNormalStep__source__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_task\n         __process_flowElements_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UserTaskToStepAfterSERule\");\n         // assign attribute __inFlow_targetRef_task\n         __inFlow_targetRef_task.setName (\"targetRef\");\n         // assign attribute __task_incoming_inFlow\n         __task_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __process_flowElements_task\n         __process_flowElements_task.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __outFlow_sourceRef_task\n         __outFlow_sourceRef_task.setName (\"sourceRef\");\n         // assign attribute __task_outgoing_outFlow\n         __task_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute normalStep__actor__actor\n         normalStep__actor__actor.setName (\"actor\");\n         // assign attribute taskToNormalStep__source__task\n         taskToNormalStep__source__task.setName (\"source\");\n         // assign attribute taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute flow__steps__normalStep\n         flow__steps__normalStep.setName (\"steps\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__task_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__task_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__source__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         __inFlow_targetRef_task.setTrg( task);\n\n\n         // create link\n         __task_outgoing_outFlow.setSrc( task);\n\n\n         // create link\n         __process_flowElements_task.setTrg( task);\n\n\n         // create link\n         __outFlow_sourceRef_task.setTrg( task);\n\n\n         // create link\n         __task_incoming_inFlow.setSrc( task);\n\n\n         // create link\n         taskToNormalStep__source__task.setTrg( task);\n\n\n         // create link\n         normalStep__actor__actor.setTrg( actor);\n\n\n         // create link\n         __task_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_task.setSrc( inFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_task.setSrc( process);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __task_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         normalStep__actor__actor.setSrc( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         flow__steps__normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setSrc( taskToNormalStep);\n\n\n         // create link\n         taskToNormalStep__source__task.setSrc( taskToNormalStep);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         flow__steps__normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,flowNode,lane,task,actor,laneToActor,inFlow,process,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow,laneSet);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      StartEvent flowNode = null;\n      SequenceFlow inFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      UserTask task = null;\n      EMoflonEdge __process_flowElements_flowNode = null;\n      EMoflonEdge __inFlow_sourceRef_flowNode = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __flowNode_outgoing_inFlow = null;\n      EMoflonEdge __laneToActor_source_lane = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __process_flowElements_task = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __laneToActor_target_actor = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      CSP csp = null;\n      Actor actor = null;\n      Iterator fujaba__IterLaneToLaneToActor = null;\n      LaneToActor laneToActor = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UserTaskToStepAfterSERule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"flowNode\"));\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         flowNode = (StartEvent) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (match.getObject(\"task\"));\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from lane to laneToActor\n               fujaba__Success = false;\n\n               fujaba__IterLaneToLaneToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(lane,LaneToActor.class,\"source\")).iterator ();\n\n               while ( fujaba__IterLaneToLaneToActor.hasNext () )\n               {\n                  try\n                  {\n                     laneToActor = (LaneToActor) fujaba__IterLaneToLaneToActor.next ();\n\n                     // check object laneToActor is really bound\n                     JavaSDM.ensure ( laneToActor != null );\n                     // bind object\n                     actor = laneToActor.getTarget ();\n\n                     // check object actor is really bound\n                     JavaSDM.ensure ( actor != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object flowNode is really bound\n                        JavaSDM.ensure ( flowNode != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object laneToActor is really bound\n                        JavaSDM.ensure ( laneToActor != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from flowNode to process\n                        JavaSDM.ensure (process.equals (flowNode.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from task to process\n                        JavaSDM.ensure (process.equals (task.eContainer()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from laneToActor to lane\n                        JavaSDM.ensure (lane.equals (laneToActor.getSource ()\n                        ));\n\n                        // check link sourceRef from inFlow to flowNode\n                        JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                        ));\n\n                        // check link sourceRef from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from laneToActor to actor\n                        JavaSDM.ensure (actor.equals (laneToActor.getTarget ()\n                        ));\n\n                        // check link targetRef from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // create object __process_flowElements_flowNode\n                        __process_flowElements_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_sourceRef_flowNode\n                        __inFlow_sourceRef_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __flowNode_outgoing_inFlow\n                        __flowNode_outgoing_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneToActor_source_lane\n                        __laneToActor_source_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __outFlow_sourceRef_task\n                        __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_task\n                        __process_flowElements_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __task_incoming_inFlow\n                        __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_targetRef_task\n                        __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __task_outgoing_outFlow\n                        __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneToActor_target_actor\n                        __laneToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_outFlow\n                        __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __laneToActor_source_lane\n                        __laneToActor_source_lane.setName (\"source\");\n                        // assign attribute __laneToActor_target_actor\n                        __laneToActor_target_actor.setName (\"target\");\n                        // assign attribute __inFlow_targetRef_task\n                        __inFlow_targetRef_task.setName (\"targetRef\");\n                        // assign attribute __task_incoming_inFlow\n                        __task_incoming_inFlow.setName (\"incoming\");\n                        // assign attribute __process_flowElements_flowNode\n                        __process_flowElements_flowNode.setName (\"flowElements\");\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_task\n                        __process_flowElements_task.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_outFlow\n                        __process_flowElements_outFlow.setName (\"flowElements\");\n                        // assign attribute __outFlow_sourceRef_task\n                        __outFlow_sourceRef_task.setName (\"sourceRef\");\n                        // assign attribute __task_outgoing_outFlow\n                        __task_outgoing_outFlow.setName (\"outgoing\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n                        // assign attribute __inFlow_sourceRef_flowNode\n                        __inFlow_sourceRef_flowNode.setName (\"sourceRef\");\n                        // assign attribute __flowNode_outgoing_inFlow\n                        __flowNode_outgoing_inFlow.setName (\"outgoing\");\n\n                        // create link\n                        __process_flowElements_flowNode.setTrg( flowNode);\n\n\n                        // create link\n                        __inFlow_sourceRef_flowNode.setTrg( flowNode);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flowNode);\n\n\n                        // create link\n                        __flowNode_outgoing_inFlow.setSrc( flowNode);\n\n\n                        // create link\n                        __laneToActor_source_lane.setTrg( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        __outFlow_sourceRef_task.setTrg( task);\n\n\n                        // create link\n                        __process_flowElements_task.setTrg( task);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(task);\n\n\n                        // create link\n                        __task_incoming_inFlow.setSrc( task);\n\n\n                        // create link\n                        __inFlow_targetRef_task.setTrg( task);\n\n\n                        // create link\n                        __task_outgoing_outFlow.setSrc( task);\n\n\n                        // create link\n                        __laneToActor_target_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneToActor);\n\n\n                        // create link\n                        __laneToActor_source_lane.setSrc( laneToActor);\n\n\n                        // create link\n                        __laneToActor_target_actor.setSrc( laneToActor);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __flowNode_outgoing_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlow_targetRef_task.setSrc( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __inFlow_sourceRef_flowNode.setSrc( inFlow);\n\n\n                        // create link\n                        __task_incoming_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __process_flowElements_task.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_flowElements_flowNode.setSrc( process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        __task_outgoing_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_target_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__task_outgoing_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_flowNode,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_source_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__task_incoming_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowNode_outgoing_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_sourceRef_flowNode,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,flowNode,lane,task,actor,laneToActor,inFlow,process,outFlow,inFlowToFlow,flow,laneSet));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"UserTaskToStepAfterSERule\");\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n\n                              // create link\n                              ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"flowNode\", flowNode);\nmatch.registerObject(\"lane\", lane);\nmatch.registerObject(\"task\", task);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"outFlow\", outFlow);\nmatch.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, StartEvent flowNode,
			Lane lane, UserTask task, SequenceFlow inFlow,
			bpmn2.Process process, SequenceFlow outFlow, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, StartEvent flowNode, Lane lane,
			UserTask task, SequenceFlow inFlow, bpmn2.Process process,
			SequenceFlow outFlow, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", true, csp);\r\nvar_task_id.setValue(task.getId());\r\nvar_task_id.setType(\"\");\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", true, csp);\r\nvar_task_name.setValue(task.getName());\r\nvar_task_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"flowNode\",flowNode);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"task\",task);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"laneToActor\",laneToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			StartEvent flowNode, Lane lane, UserTask task, Actor actor,
			LaneToActor laneToActor, SequenceFlow inFlow,
			bpmn2.Process process, SequenceFlow outFlow,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"flowNode\", flowNode);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"task\", task);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"laneToActor\", laneToActor);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"taskToNormalStep\", taskToNormalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject flowNode,
			EObject lane, EObject task, EObject actor, EObject laneToActor,
			EObject inFlow, EObject process, EObject outFlow,
			EObject normalStep, EObject taskToNormalStep,
			EObject outFlowToFlow, EObject outFlowToNormalStep,
			EObject inFlowToFlow, EObject flow, EObject laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"task\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,actor,normalStep,flow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // create object __normalStep_actor_actor\n            __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __normalStep_actor_actor\n            __normalStep_actor_actor.setName (\"actor\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            __normalStep_actor_actor.setTrg( actor);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __normalStep_actor_actor.setSrc( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,actor,normalStep,flow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Actor actor, NormalStep normalStep,
			Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      StartEvent flowNode = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      LaneToActor laneToActor = null;\n      NormalStep normalStep = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      UserTask task = null;\n      SequenceFlow outFlow = null;\n      FlowNodeToStep taskToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge task__incoming__inFlow = null;\n      EMoflonEdge taskToNormalStep__target__normalStep = null;\n      EMoflonEdge task__outgoing__outFlow = null;\n      EMoflonEdge inFlow__targetRef__task = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge outFlow__sourceRef__task = null;\n      EMoflonEdge process__flowElements__task = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge taskToNormalStep__source__task = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowNode\"));\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         flowNode = (StartEvent) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneToActor\"));\n\n         // ensure correct type and really bound of object laneToActor\n         JavaSDM.ensure ( _TmpObject instanceof LaneToActor );\n         laneToActor = (LaneToActor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object task\n         task = Bpmn2Factory.eINSTANCE.createUserTask();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object taskToNormalStep\n         taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute task\n         task.setId ((java.lang.String)csp.getValue(\"task\",\"id\"));\n         // assign attribute task\n         task.setName ((java.lang.String)csp.getValue(\"task\",\"name\"));\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         taskToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         process.getFlowElements().add(task);\n\n\n         // create link\n         outFlow.setSourceRef( task);\n\n\n         // create link\n         taskToNormalStep.setSource( task);\n\n\n         // create link\n         inFlow.setTargetRef( task);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowNode is really bound\n         JavaSDM.ensure ( flowNode != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and actor \n         JavaSDM.ensure ( !flowNode.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneSet and actor \n         JavaSDM.ensure ( !laneSet.equals (actor) );\n\n         // check isomorphic binding between objects laneToActor and actor \n         JavaSDM.ensure ( !laneToActor.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects task and actor \n         JavaSDM.ensure ( !task.equals (actor) );\n\n         // check isomorphic binding between objects taskToNormalStep and actor \n         JavaSDM.ensure ( !taskToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flowNode and flow \n         JavaSDM.ensure ( !flowNode.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects laneToActor and flow \n         JavaSDM.ensure ( !laneToActor.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects task and flow \n         JavaSDM.ensure ( !task.equals (flow) );\n\n         // check isomorphic binding between objects taskToNormalStep and flow \n         JavaSDM.ensure ( !taskToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects inFlow and flowNode \n         JavaSDM.ensure ( !inFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and flowNode \n         JavaSDM.ensure ( !inFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects lane and flowNode \n         JavaSDM.ensure ( !lane.equals (flowNode) );\n\n         // check isomorphic binding between objects laneSet and flowNode \n         JavaSDM.ensure ( !laneSet.equals (flowNode) );\n\n         // check isomorphic binding between objects laneToActor and flowNode \n         JavaSDM.ensure ( !laneToActor.equals (flowNode) );\n\n         // check isomorphic binding between objects normalStep and flowNode \n         JavaSDM.ensure ( !normalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlow and flowNode \n         JavaSDM.ensure ( !outFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToFlow and flowNode \n         JavaSDM.ensure ( !outFlowToFlow.equals (flowNode) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flowNode \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects process and flowNode \n         JavaSDM.ensure ( !process.equals (flowNode) );\n\n         // check isomorphic binding between objects task and flowNode \n         JavaSDM.ensure ( !task.equals (flowNode) );\n\n         // check isomorphic binding between objects taskToNormalStep and flowNode \n         JavaSDM.ensure ( !taskToNormalStep.equals (flowNode) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects task and inFlow \n         JavaSDM.ensure ( !task.equals (inFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlowToFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects task and inFlowToFlow \n         JavaSDM.ensure ( !task.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and lane \n         JavaSDM.ensure ( !laneToActor.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects task and lane \n         JavaSDM.ensure ( !task.equals (lane) );\n\n         // check isomorphic binding between objects taskToNormalStep and lane \n         JavaSDM.ensure ( !taskToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects laneToActor and laneSet \n         JavaSDM.ensure ( !laneToActor.equals (laneSet) );\n\n         // check isomorphic binding between objects normalStep and laneSet \n         JavaSDM.ensure ( !normalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlow and laneSet \n         JavaSDM.ensure ( !outFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneSet \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneSet) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneSet \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects task and laneSet \n         JavaSDM.ensure ( !task.equals (laneSet) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneSet \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneSet) );\n\n         // check isomorphic binding between objects normalStep and laneToActor \n         JavaSDM.ensure ( !normalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and laneToActor \n         JavaSDM.ensure ( !outFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneToActor \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneToActor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and laneToActor \n         JavaSDM.ensure ( !process.equals (laneToActor) );\n\n         // check isomorphic binding between objects task and laneToActor \n         JavaSDM.ensure ( !task.equals (laneToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneToActor \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects task and normalStep \n         JavaSDM.ensure ( !task.equals (normalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and normalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects task and outFlow \n         JavaSDM.ensure ( !task.equals (outFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects task and outFlowToFlow \n         JavaSDM.ensure ( !task.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and outFlowToNormalStep \n         JavaSDM.ensure ( !task.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToNormalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and process \n         JavaSDM.ensure ( !task.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and process \n         JavaSDM.ensure ( !taskToNormalStep.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and task \n         JavaSDM.ensure ( !taskToNormalStep.equals (task) );\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object task__incoming__inFlow\n         task__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object task__outgoing__outFlow\n         task__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object inFlow__targetRef__task\n         inFlow__targetRef__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_actor_actor\n         __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_normalStep\n         __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__task\n         outFlow__sourceRef__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__task\n         process__flowElements__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__source__task\n         taskToNormalStep__source__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UserTaskToStepAfterSERule\");\n         // assign attribute inFlow__targetRef__task\n         inFlow__targetRef__task.setName (\"targetRef\");\n         // assign attribute task__incoming__inFlow\n         task__incoming__inFlow.setName (\"incoming\");\n         // assign attribute process__flowElements__task\n         process__flowElements__task.setName (\"flowElements\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute outFlow__sourceRef__task\n         outFlow__sourceRef__task.setName (\"sourceRef\");\n         // assign attribute task__outgoing__outFlow\n         task__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute __normalStep_actor_actor\n         __normalStep_actor_actor.setName (\"actor\");\n         // assign attribute taskToNormalStep__source__task\n         taskToNormalStep__source__task.setName (\"source\");\n         // assign attribute taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute __flow_steps_normalStep\n         __flow_steps_normalStep.setName (\"steps\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__source__task,\"createdEdges\");\n\n         // create link\n         task__outgoing__outFlow.setSrc( task);\n\n\n         // create link\n         process__flowElements__task.setTrg( task);\n\n\n         // create link\n         taskToNormalStep__source__task.setTrg( task);\n\n\n         // create link\n         inFlow__targetRef__task.setTrg( task);\n\n\n         // create link\n         outFlow__sourceRef__task.setTrg( task);\n\n\n         // create link\n         task__incoming__inFlow.setSrc( task);\n\n\n         // create link\n         __normalStep_actor_actor.setTrg( actor);\n\n\n         // create link\n         inFlow__targetRef__task.setSrc( inFlow);\n\n\n         // create link\n         task__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         process__flowElements__task.setSrc( process);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__task.setSrc( outFlow);\n\n\n         // create link\n         task__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __normalStep_actor_actor.setSrc( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setSrc( taskToNormalStep);\n\n\n         // create link\n         taskToNormalStep__source__task.setSrc( taskToNormalStep);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,flowNode,lane,task,actor,laneToActor,inFlow,process,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow,laneSet);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      EMoflonEdge __inFlow_sourceRef_flowNode = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __flowNode_outgoing_inFlow = null;\n      EMoflonEdge __process_flowElements_flowNode = null;\n      EMoflonEdge __laneToActor_source_lane = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __laneToActor_target_actor = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      CSP csp = null;\n      StartEvent flowNode = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      Lane lane = null;\n      Iterator fujaba__IterActorToLaneToActor = null;\n      LaneToActor laneToActor = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UserTaskToStepAfterSERule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               inFlow = inFlowToFlow.getSource ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n\n               // iterate to-many link target from actor to laneToActor\n               fujaba__Success = false;\n\n               fujaba__IterActorToLaneToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,LaneToActor.class,\"target\")).iterator ();\n\n               while ( fujaba__IterActorToLaneToActor.hasNext () )\n               {\n                  try\n                  {\n                     laneToActor = (LaneToActor) fujaba__IterActorToLaneToActor.next ();\n\n                     // check object laneToActor is really bound\n                     JavaSDM.ensure ( laneToActor != null );\n                     // bind object\n                     lane = laneToActor.getSource ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneToActor is really bound\n                        JavaSDM.ensure ( laneToActor != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check link actor from normalStep to actor\n                        JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                        ));\n\n                        // bind object\n                        _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n                        // ensure correct type and really bound of object process\n                        JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n                        process = (bpmn2.Process) _TmpObject;\n\n                        // check if contained via correct reference\n                        JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                        // bind object\n                        laneSet = lane.eContainer() instanceof LaneSet ? (LaneSet) lane.eContainer() : null;\n\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n\n                        // check if contained via correct reference\n                        JavaSDM.ensure(laneSet.getLanes().contains(lane));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from laneToActor to lane\n                        JavaSDM.ensure (lane.equals (laneToActor.getSource ()\n                        ));\n\n                        // bind object\n                        _TmpObject = inFlow.getSourceRef ();\n\n                        // ensure correct type and really bound of object flowNode\n                        JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n                        flowNode = (StartEvent) _TmpObject;\n\n                        // check link flowElements from flowNode to process\n                        JavaSDM.ensure (process.equals (flowNode.eContainer()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from laneToActor to actor\n                        JavaSDM.ensure (actor.equals (laneToActor.getTarget ()\n                        ));\n\n                        // create object __inFlow_sourceRef_flowNode\n                        __inFlow_sourceRef_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __flowNode_outgoing_inFlow\n                        __flowNode_outgoing_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_flowNode\n                        __process_flowElements_flowNode = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneToActor_source_lane\n                        __laneToActor_source_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneToActor_target_actor\n                        __laneToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __normalStep_actor_actor\n                        __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __flow_steps_normalStep\n                        __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __laneToActor_source_lane\n                        __laneToActor_source_lane.setName (\"source\");\n                        // assign attribute __laneToActor_target_actor\n                        __laneToActor_target_actor.setName (\"target\");\n                        // assign attribute __process_flowElements_flowNode\n                        __process_flowElements_flowNode.setName (\"flowElements\");\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __normalStep_actor_actor\n                        __normalStep_actor_actor.setName (\"actor\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __flow_steps_normalStep\n                        __flow_steps_normalStep.setName (\"steps\");\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n                        // assign attribute __inFlow_sourceRef_flowNode\n                        __inFlow_sourceRef_flowNode.setName (\"sourceRef\");\n                        // assign attribute __flowNode_outgoing_inFlow\n                        __flowNode_outgoing_inFlow.setName (\"outgoing\");\n\n                        // create link\n                        __inFlow_sourceRef_flowNode.setTrg( flowNode);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flowNode);\n\n\n                        // create link\n                        __flowNode_outgoing_inFlow.setSrc( flowNode);\n\n\n                        // create link\n                        __process_flowElements_flowNode.setTrg( flowNode);\n\n\n                        // create link\n                        __laneToActor_source_lane.setTrg( lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneToActor_target_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        __normalStep_actor_actor.setTrg( actor);\n\n\n                        // create link\n                        __laneToActor_source_lane.setSrc( laneToActor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneToActor);\n\n\n                        // create link\n                        __laneToActor_target_actor.setSrc( laneToActor);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __flowNode_outgoing_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlow_sourceRef_flowNode.setSrc( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_flowNode.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                        // create link\n                        __flow_steps_normalStep.setTrg( normalStep);\n\n\n                        // create link\n                        __normalStep_actor_actor.setSrc( normalStep);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        __flow_steps_normalStep.setSrc( flow);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowNode_outgoing_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_source_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_sourceRef_flowNode,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_flowNode,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_target_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_actor_actor,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,flowNode,lane,actor,laneToActor,inFlow,process,normalStep,inFlowToFlow,flow,laneSet));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"UserTaskToStepAfterSERule\");\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n\n                              // create link\n                              ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n\n\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"actor\", actor);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Actor actor,
			NormalStep normalStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Actor actor,
			NormalStep normalStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", true, csp);\r\nvar_normalStep_name.setValue(normalStep.getName());\r\nvar_normalStep_name.setType(\"\");\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", true, csp);\r\nvar_normalStep_label.setValue(normalStep.getLabel());\r\nvar_normalStep_label.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", csp);\r\nvar_task_id.setType(\"\");\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", csp);\r\nvar_task_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"flowNode\",flowNode);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"laneToActor\",laneToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			StartEvent flowNode, Lane lane, Actor actor,
			LaneToActor laneToActor, SequenceFlow inFlow,
			bpmn2.Process process, NormalStep normalStep,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"flowNode\", flowNode);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"task\", task);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"laneToActor\", laneToActor);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"taskToNormalStep\", taskToNormalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject flowNode,
			EObject lane, EObject task, EObject actor, EObject laneToActor,
			EObject inFlow, EObject process, EObject outFlow,
			EObject normalStep, EObject taskToNormalStep,
			EObject outFlowToFlow, EObject outFlowToNormalStep,
			EObject inFlowToFlow, EObject flow, EObject laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"normalStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_264234 = null;\n      FlowElementsContainer __DEC_task_flowElements_431252 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_188321 = null;\n      SequenceFlow __DEC_task_targetRef_188321 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      UserTask task = null;\n      StartEvent flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // bind object\n         _TmpObject = inFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         flowNode = (StartEvent) _TmpObject;\n\n         // check link flowElements from flowNode to process\n         JavaSDM.ensure (process.equals (flowNode.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // check link flowElements from task to process\n         JavaSDM.ensure (process.equals (task.eContainer()\n         ));\n\n         // check link targetRef from inFlow to task\n         JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToOutFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link sourceRef from outFlow to task\n               JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_264234 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_264234 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_264234 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_264234.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_264234 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_264234.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_task_flowElements_431252 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                 // check object __DEC_task_flowElements_431252 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowElements_431252 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_task_flowElements_431252.getFlowElements().contains(task));\n\n                                 // check isomorphic binding between objects __DEC_task_flowElements_431252 and process \n                                 JavaSDM.ensure ( !__DEC_task_flowElements_431252.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link default from outFlow\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link targetRef from task to __DEC_task_targetRef_188321\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_targetRef_188321 = new ArrayList(task.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_188321.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_targetRef_188321 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_188321.next ();\n\n                                       // check object __DEC_task_targetRef_188321 is really bound\n                                       JavaSDM.ensure ( __DEC_task_targetRef_188321 != null );\n                                       // check isomorphic binding between objects __DEC_task_targetRef_188321 and inFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_188321.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_task_targetRef_188321 and outFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_188321.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object flowNode is really bound\n                              JavaSDM.ensure ( flowNode != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object task is really bound\n                              JavaSDM.ensure ( task != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from flowNode to process\n                              JavaSDM.ensure (process.equals (flowNode.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flowElements from task to process\n                              JavaSDM.ensure (process.equals (task.eContainer()\n                              ));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link sourceRef from inFlow to flowNode\n                              JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                              ));\n\n                              // check link sourceRef from outFlow to task\n                              JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link targetRef from inFlow to task\n                              JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link targetRef from outFlow to task\n                              JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link trg from _edge_targetRef to task\n                              JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_205(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_909301 = null;\n      FlowElementsContainer __DEC_task_flowElements_87138 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_325891 = null;\n      SequenceFlow __DEC_task_targetRef_325891 = null;\n      Match match = null;\n      Iterator fujaba__IterInFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      StartEvent flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      UserTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // check link flowElements from task to process\n         JavaSDM.ensure (process.equals (task.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = inFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object flowNode\n         JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n         flowNode = (StartEvent) _TmpObject;\n\n         // check link flowElements from flowNode to process\n         JavaSDM.ensure (process.equals (flowNode.eContainer()\n         ));\n\n         // check link targetRef from inFlow to task\n         JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToOutFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link sourceRef from outFlow to task\n               JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // iterate to-many link lanes from laneSet to lane\n                     fujaba__Success = false;\n\n                     fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                     while ( fujaba__IterLaneSetToLane.hasNext () )\n                     {\n                        try\n                        {\n                           lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                           // check object lane is really bound\n                           JavaSDM.ensure ( lane != null );\n                           // iterate to-many link src from inFlow to _edge_targetRef\n                           fujaba__Success = false;\n\n                           fujaba__IterInFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterInFlowTo_edge_targetRef.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_targetRef = (EMoflonEdge) fujaba__IterInFlowTo_edge_targetRef.next ();\n\n                                 // check object _edge_targetRef is really bound\n                                 JavaSDM.ensure ( _edge_targetRef != null );\n                                 // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                                 JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                                 // check link trg from _edge_targetRef to task\n                                 JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_909301 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_909301 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_909301 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_909301.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_909301 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_909301.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_87138 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_87138 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_87138 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_87138.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_87138 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_87138.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from task to __DEC_task_targetRef_325891\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_325891 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_325891.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_325891 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_325891.next ();\n\n                                             // check object __DEC_task_targetRef_325891 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_325891 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_325891 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_325891.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_325891 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_325891.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_incoming is really bound\n                                    JavaSDM.ensure ( _edge_incoming != null );\n                                    // check object _edge_targetRef is really bound\n                                    JavaSDM.ensure ( _edge_targetRef != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                                    JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (process.equals (task.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_incoming to task\n                                    JavaSDM.ensure (task.equals (_edge_incoming.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_targetRef to inFlow\n                                    JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_incoming to inFlow\n                                    JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_targetRef to task\n                                    JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                                    ));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_206(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_470018 = null;\n      FlowElementsContainer __DEC_task_flowElements_816917 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_692147 = null;\n      SequenceFlow __DEC_task_targetRef_692147 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToFlowNode = null;\n      StartEvent flowNode = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      UserTask task = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // check link flowElements from task to process\n         JavaSDM.ensure (process.equals (task.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToOutFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n               // check link sourceRef from outFlow to task\n               JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link flowElements from process to flowNode\n               fujaba__Success = false;\n\n               fujaba__IterProcessToFlowNode = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToFlowNode.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToFlowNode.next ();\n\n                     // ensure correct type and really bound of object flowNode\n                     JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n                     flowNode = (StartEvent) _TmpObject;\n                     // iterate to-many link flowElements from process to inFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToInFlow.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                           // ensure correct type and really bound of object inFlow\n                           JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                           inFlow = (SequenceFlow) _TmpObject;\n                           // check isomorphic binding between objects outFlow and inFlow \n                           JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                           // check link sourceRef from inFlow to flowNode\n                           JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                           ));\n\n                           // check link targetRef from inFlow to task\n                           JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                           ));\n\n                           // iterate to-many link laneSets from process to laneSet\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                           while ( fujaba__IterProcessToLaneSet.hasNext () )\n                           {\n                              try\n                              {\n                                 laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                                 // check object laneSet is really bound\n                                 JavaSDM.ensure ( laneSet != null );\n                                 // iterate to-many link lanes from laneSet to lane\n                                 fujaba__Success = false;\n\n                                 fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                                 while ( fujaba__IterLaneSetToLane.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                       // check object lane is really bound\n                                       JavaSDM.ensure ( lane != null );\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_outFlow_flowElements_470018 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                             // check object __DEC_outFlow_flowElements_470018 is really bound\n                                             JavaSDM.ensure ( __DEC_outFlow_flowElements_470018 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_outFlow_flowElements_470018.getFlowElements().contains(outFlow));\n\n                                             // check isomorphic binding between objects __DEC_outFlow_flowElements_470018 and process \n                                             JavaSDM.ensure ( !__DEC_outFlow_flowElements_470018.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_task_flowElements_816917 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                             // check object __DEC_task_flowElements_816917 is really bound\n                                             JavaSDM.ensure ( __DEC_task_flowElements_816917 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_task_flowElements_816917.getFlowElements().contains(task));\n\n                                             // check isomorphic binding between objects __DEC_task_flowElements_816917 and process \n                                             JavaSDM.ensure ( !__DEC_task_flowElements_816917.equals (process) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link default from outFlow\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // iterate to-many link targetRef from task to __DEC_task_targetRef_692147\n                                             fujaba__Success = false;\n\n                                             fujaba__IterTaskTo__DEC_task_targetRef_692147 = new ArrayList(task.getIncoming()).iterator ();\n\n                                             while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_692147.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   __DEC_task_targetRef_692147 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_692147.next ();\n\n                                                   // check object __DEC_task_targetRef_692147 is really bound\n                                                   JavaSDM.ensure ( __DEC_task_targetRef_692147 != null );\n                                                   // check isomorphic binding between objects __DEC_task_targetRef_692147 and inFlow \n                                                   JavaSDM.ensure ( !__DEC_task_targetRef_692147.equals (inFlow) );\n\n                                                   // check isomorphic binding between objects __DEC_task_targetRef_692147 and outFlow \n                                                   JavaSDM.ensure ( !__DEC_task_targetRef_692147.equals (outFlow) );\n\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check object _edge_flowElements is really bound\n                                          JavaSDM.ensure ( _edge_flowElements != null );\n                                          // check object flowNode is really bound\n                                          JavaSDM.ensure ( flowNode != null );\n                                          // check object inFlow is really bound\n                                          JavaSDM.ensure ( inFlow != null );\n                                          // check object lane is really bound\n                                          JavaSDM.ensure ( lane != null );\n                                          // check object laneSet is really bound\n                                          JavaSDM.ensure ( laneSet != null );\n                                          // check object outFlow is really bound\n                                          JavaSDM.ensure ( outFlow != null );\n                                          // check object process is really bound\n                                          JavaSDM.ensure ( process != null );\n                                          // check object task is really bound\n                                          JavaSDM.ensure ( task != null );\n                                          // check isomorphic binding between objects outFlow and inFlow \n                                          JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                          // check link flowElements from flowNode to process\n                                          JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                          ));\n\n                                          // check link flowElements from inFlow to process\n                                          JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from outFlow to process\n                                          JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                          ));\n\n                                          // check link flowElements from task to process\n                                          JavaSDM.ensure (process.equals (task.eContainer()\n                                          ));\n\n                                          // check link laneSets from laneSet to process\n                                          JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                          ));\n\n                                          // check link lanes from lane to laneSet\n                                          JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                          ));\n\n                                          // check link sourceRef from inFlow to flowNode\n                                          JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                          ));\n\n                                          // check link sourceRef from outFlow to task\n                                          JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                          ));\n\n                                          // check link src from _edge_flowElements to process\n                                          JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                          ));\n\n                                          // check link targetRef from inFlow to task\n                                          JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                          ));\n\n                                          // check link targetRef from outFlow to task\n                                          JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                          )));\n\n                                          // check link trg from _edge_flowElements to task\n                                          JavaSDM.ensure (task.equals (_edge_flowElements.getTrg ()\n                                          ));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_FWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_207(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_914752 = null;\n      FlowElementsContainer __DEC_task_flowElements_20205 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_97517 = null;\n      SequenceFlow __DEC_task_targetRef_97517 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      UserTask task = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToFlowNode = null;\n      StartEvent flowNode = null;\n      bpmn2.Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to flowNode\n         fujaba__Success = false;\n\n         fujaba__IterProcessToFlowNode = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToFlowNode.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToFlowNode.next ();\n\n               // ensure correct type and really bound of object flowNode\n               JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n               flowNode = (StartEvent) _TmpObject;\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link sourceRef from inFlow to flowNode\n                     JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                     ));\n\n                     // bind object\n                     _TmpObject = inFlow.getTargetRef ();\n\n                     // ensure correct type and really bound of object task\n                     JavaSDM.ensure ( _TmpObject instanceof UserTask );\n                     task = (UserTask) _TmpObject;\n\n                     // check link flowElements from task to process\n                     JavaSDM.ensure (process.equals (task.eContainer()\n                     ));\n\n                     // check link sourceRef from outFlow to task\n                     JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_914752 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_914752 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_914752 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_914752.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_914752 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_914752.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_20205 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_20205 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_20205 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_20205.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_20205 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_20205.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from task to __DEC_task_targetRef_97517\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_97517 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_97517.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_97517 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_97517.next ();\n\n                                             // check object __DEC_task_targetRef_97517 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_97517 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_97517 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_97517.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_97517 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_97517.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_flowElements is really bound\n                                    JavaSDM.ensure ( _edge_flowElements != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (process.equals (task.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_flowElements to process\n                                    JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_flowElements to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                                    ));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_208(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_184908 = null;\n      FlowElementsContainer __DEC_task_flowElements_920672 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_724342 = null;\n      SequenceFlow __DEC_task_targetRef_724342 = null;\n      Match match = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterProcessToFlowNode = null;\n      StartEvent flowNode = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      UserTask task = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // check link sourceRef from outFlow to task\n         JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link targetRef from task to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n         while ( fujaba__IterTaskToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // bind object\n               _TmpObject = task.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) task.eContainer() : null;\n\n               // ensure correct type and really bound of object process\n               JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n               process = (bpmn2.Process) _TmpObject;\n\n               // check if contained via correct reference\n               JavaSDM.ensure(process.getFlowElements().contains(task));\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // iterate to-many link flowElements from process to flowNode\n               fujaba__Success = false;\n\n               fujaba__IterProcessToFlowNode = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToFlowNode.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToFlowNode.next ();\n\n                     // ensure correct type and really bound of object flowNode\n                     JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n                     flowNode = (StartEvent) _TmpObject;\n                     // check link sourceRef from inFlow to flowNode\n                     JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_184908 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_184908 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_184908 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_184908.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_184908 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_184908.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_920672 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_920672 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_920672 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_920672.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_920672 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_920672.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from task to __DEC_task_targetRef_724342\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_724342 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_724342.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_724342 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_724342.next ();\n\n                                             // check object __DEC_task_targetRef_724342 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_724342 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_724342 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_724342.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_724342 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_724342.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_sourceRef is really bound\n                                    JavaSDM.ensure ( _edge_sourceRef != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (process.equals (task.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_sourceRef to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_sourceRef to task\n                                    JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                                    ));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_209(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_249762 = null;\n      FlowElementsContainer __DEC_task_flowElements_40154 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_564441 = null;\n      SequenceFlow __DEC_task_targetRef_564441 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      StartEvent flowNode = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      SequenceFlow outFlow = null;\n      bpmn2.Process process = null;\n      UserTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = task.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) task.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(task));\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to task\n         JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link laneSets from process to laneSet\n         fujaba__Success = false;\n\n         fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n         while ( fujaba__IterProcessToLaneSet.hasNext () )\n         {\n            try\n            {\n               laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n               // check object laneSet is really bound\n               JavaSDM.ensure ( laneSet != null );\n               // iterate to-many link lanes from laneSet to lane\n               fujaba__Success = false;\n\n               fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n               while ( fujaba__IterLaneSetToLane.hasNext () )\n               {\n                  try\n                  {\n                     lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n                     // iterate to-many link targetRef from task to inFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n                     while ( fujaba__IterTaskToInFlow.hasNext () )\n                     {\n                        try\n                        {\n                           inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n                           // check object inFlow is really bound\n                           JavaSDM.ensure ( inFlow != null );\n                           // check isomorphic binding between objects outFlow and inFlow \n                           JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                           // check link flowElements from inFlow to process\n                           JavaSDM.ensure (process.equals (inFlow.eContainer()\n                           ));\n\n                           // bind object\n                           _TmpObject = inFlow.getSourceRef ();\n\n                           // ensure correct type and really bound of object flowNode\n                           JavaSDM.ensure ( _TmpObject instanceof StartEvent );\n                           flowNode = (StartEvent) _TmpObject;\n\n                           // check link flowElements from flowNode to process\n                           JavaSDM.ensure (process.equals (flowNode.eContainer()\n                           ));\n\n                           // iterate to-many link trg from task to _edge_sourceRef\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,EMoflonEdge.class,\"trg\")).iterator ();\n\n                           while ( fujaba__IterTaskTo_edge_sourceRef.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_sourceRef = (EMoflonEdge) fujaba__IterTaskTo_edge_sourceRef.next ();\n\n                                 // check object _edge_sourceRef is really bound\n                                 JavaSDM.ensure ( _edge_sourceRef != null );\n                                 // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                 JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                 // check link src from _edge_sourceRef to outFlow\n                                 JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_outFlow_flowElements_249762 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                       // check object __DEC_outFlow_flowElements_249762 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_flowElements_249762 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_outFlow_flowElements_249762.getFlowElements().contains(outFlow));\n\n                                       // check isomorphic binding between objects __DEC_outFlow_flowElements_249762 and process \n                                       JavaSDM.ensure ( !__DEC_outFlow_flowElements_249762.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_task_flowElements_40154 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                       // check object __DEC_task_flowElements_40154 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowElements_40154 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_task_flowElements_40154.getFlowElements().contains(task));\n\n                                       // check isomorphic binding between objects __DEC_task_flowElements_40154 and process \n                                       JavaSDM.ensure ( !__DEC_task_flowElements_40154.equals (process) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link default from outFlow\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // iterate to-many link targetRef from task to __DEC_task_targetRef_564441\n                                       fujaba__Success = false;\n\n                                       fujaba__IterTaskTo__DEC_task_targetRef_564441 = new ArrayList(task.getIncoming()).iterator ();\n\n                                       while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_564441.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             __DEC_task_targetRef_564441 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_564441.next ();\n\n                                             // check object __DEC_task_targetRef_564441 is really bound\n                                             JavaSDM.ensure ( __DEC_task_targetRef_564441 != null );\n                                             // check isomorphic binding between objects __DEC_task_targetRef_564441 and inFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_564441.equals (inFlow) );\n\n                                             // check isomorphic binding between objects __DEC_task_targetRef_564441 and outFlow \n                                             JavaSDM.ensure ( !__DEC_task_targetRef_564441.equals (outFlow) );\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check object _edge_outgoing is really bound\n                                    JavaSDM.ensure ( _edge_outgoing != null );\n                                    // check object _edge_sourceRef is really bound\n                                    JavaSDM.ensure ( _edge_sourceRef != null );\n                                    // check object flowNode is really bound\n                                    JavaSDM.ensure ( flowNode != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // check object laneSet is really bound\n                                    JavaSDM.ensure ( laneSet != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object task is really bound\n                                    JavaSDM.ensure ( task != null );\n                                    // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                                    JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check link flowElements from flowNode to process\n                                    JavaSDM.ensure (process.equals (flowNode.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from task to process\n                                    JavaSDM.ensure (process.equals (task.eContainer()\n                                    ));\n\n                                    // check link laneSets from laneSet to process\n                                    JavaSDM.ensure (process.equals (laneSet.eContainer()\n                                    ));\n\n                                    // check link lanes from lane to laneSet\n                                    JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                                    ));\n\n                                    // check link sourceRef from inFlow to flowNode\n                                    JavaSDM.ensure (flowNode.equals (inFlow.getSourceRef ()\n                                    ));\n\n                                    // check link sourceRef from outFlow to task\n                                    JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link src from _edge_outgoing to task\n                                    JavaSDM.ensure (task.equals (_edge_outgoing.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_sourceRef to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                                    ));\n\n                                    // check link targetRef from inFlow to task\n                                    JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link targetRef from outFlow to task\n                                    JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                                    )));\n\n                                    // check link trg from _edge_outgoing to outFlow\n                                    JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_sourceRef to task\n                                    JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                                    ));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_FWD(match,flowNode,lane,task,inFlow,process,outFlow,laneSet);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_FWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_210(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_769497 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_663094 = null;\n      Step __DEC_normalStep_next_663094 = null;\n      Match match = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // bind object\n         _TmpObject = _edge_actor.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actor from normalStep to actor\n         JavaSDM.ensure (actor.equals (normalStep.getActor ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_769497 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_769497 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_769497 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_769497.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_769497 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_769497.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_663094\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_663094 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_663094.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_663094 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_663094.next ();\n\n                     // check object __DEC_normalStep_next_663094 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_663094 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_663094 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_663094.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_actor is really bound\n            JavaSDM.ensure ( _edge_actor != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_actor to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_actor.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_actor to actor\n            JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,actor,normalStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_64(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_83990 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_298585 = null;\n      Step __DEC_normalStep_next_298585 = null;\n      Match match = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link steps from normalStep to flow\n         JavaSDM.ensure (flow.equals (normalStep.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_83990 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_83990 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_83990 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_83990.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_83990 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_83990.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_298585\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_298585 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_298585.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_298585 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_298585.next ();\n\n                     // check object __DEC_normalStep_next_298585 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_298585 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_298585 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_298585.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_steps is really bound\n            JavaSDM.ensure ( _edge_steps != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_steps to flow\n            JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_steps to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_steps.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,actor,normalStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_65(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // UserTaskToStepAfterSERule
