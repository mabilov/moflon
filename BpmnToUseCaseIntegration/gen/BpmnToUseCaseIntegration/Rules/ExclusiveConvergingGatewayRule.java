/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Exclusive Converging Gateway Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getExclusiveConvergingGatewayRule()
 * @model
 * @generated
 */
public interface ExclusiveConvergingGatewayRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,exclusiveGateway,outFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __inFlow_targetRef_exclusiveGateway\n            __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_incoming_inFlow\n            __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_exclusiveGateway\n            __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n            // assign attribute __exclusiveGateway_incoming_inFlow\n            __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n            // assign attribute __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,exclusiveGateway,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n            // create link\n            __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      AlternativeFlowAlternative alt = null;\n      ExclusiveGateway exclusiveGateway = null;\n      AlternativeFlow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Flow initFlow = null;\n      NormalStep normalStep = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      Step step = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToInitFlow = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__target__normalStep = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge outFlowToInitFlow__source__outFlow = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__source__exclusiveGateway = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge outFlowToInitFlow__target__initFlow = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         flow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToStep\"));\n\n         // ensure correct type and really bound of object inFlowToStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"initFlow\"));\n\n         // ensure correct type and really bound of object initFlow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         initFlow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects initFlow and flow \n         JavaSDM.ensure ( !initFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects step and normalStep \n         JavaSDM.ensure ( !step.equals (normalStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object exclusiveGatewayToNormalStep\n         exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToInitFlow\n         outFlowToInitFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n         // create link\n         outFlowToInitFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         outFlowToInitFlow.setTarget( initFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToInitFlow is really bound\n         JavaSDM.ensure ( outFlowToInitFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToStep is really bound\n         JavaSDM.ensure ( inFlowToStep != null );\n         // check object initFlow is really bound\n         JavaSDM.ensure ( initFlow != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToInitFlow is really bound\n         JavaSDM.ensure ( outFlowToInitFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects exclusiveGateway and alt \n         JavaSDM.ensure ( !exclusiveGateway.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and alt \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToStep and alt \n         JavaSDM.ensure ( !inFlowToStep.equals (alt) );\n\n         // check isomorphic binding between objects initFlow and alt \n         JavaSDM.ensure ( !initFlow.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and alt \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and alt \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects step and alt \n         JavaSDM.ensure ( !step.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToStep and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects initFlow and exclusiveGateway \n         JavaSDM.ensure ( !initFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects step and exclusiveGateway \n         JavaSDM.ensure ( !step.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects initFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !initFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects step and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !step.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToStep and flow \n         JavaSDM.ensure ( !inFlowToStep.equals (flow) );\n\n         // check isomorphic binding between objects initFlow and flow \n         JavaSDM.ensure ( !initFlow.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and flow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlow \n         JavaSDM.ensure ( !initFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects step and inFlow \n         JavaSDM.ensure ( !step.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlowToFlow \n         JavaSDM.ensure ( !initFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects step and inFlowToFlow \n         JavaSDM.ensure ( !step.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlowToStep \n         JavaSDM.ensure ( !initFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects normalStep and inFlowToStep \n         JavaSDM.ensure ( !normalStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlowToStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects process and inFlowToStep \n         JavaSDM.ensure ( !process.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects step and inFlowToStep \n         JavaSDM.ensure ( !step.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects normalStep and initFlow \n         JavaSDM.ensure ( !normalStep.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlow and initFlow \n         JavaSDM.ensure ( !outFlow.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and initFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and initFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (initFlow) );\n\n         // check isomorphic binding between objects process and initFlow \n         JavaSDM.ensure ( !process.equals (initFlow) );\n\n         // check isomorphic binding between objects step and initFlow \n         JavaSDM.ensure ( !step.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and normalStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects step and normalStep \n         JavaSDM.ensure ( !step.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and outFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects step and outFlow \n         JavaSDM.ensure ( !step.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToInitFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects process and outFlowToInitFlow \n         JavaSDM.ensure ( !process.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects step and outFlowToInitFlow \n         JavaSDM.ensure ( !step.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects step and outFlowToNormalStep \n         JavaSDM.ensure ( !step.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects step and process \n         JavaSDM.ensure ( !step.equals (process) );\n\n         // create object exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_exclusiveGateway\n         __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToInitFlow__source__outFlow\n         outFlowToInitFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_exclusiveGateway\n         __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToInitFlow__target__initFlow\n         outFlowToInitFlow__target__initFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_incoming_inFlow\n         __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ExclusiveConvergingGatewayRule\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __process_flowElements_exclusiveGateway\n         __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_exclusiveGateway\n         __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n         // assign attribute __exclusiveGateway_incoming_inFlow\n         __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setName (\"source\");\n         // assign attribute exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToInitFlow__source__outFlow\n         outFlowToInitFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToInitFlow__target__initFlow\n         outFlowToInitFlow__target__initFlow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__source__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow__target__initFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n         // create link\n         __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         outFlowToInitFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         outFlowToInitFlow__target__initFlow.setTrg( initFlow);\n\n\n         // create link\n         outFlowToInitFlow__target__initFlow.setSrc( outFlowToInitFlow);\n\n\n         // create link\n         outFlowToInitFlow__source__outFlow.setSrc( outFlowToInitFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,inFlow,exclusiveGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,normalStep,exclusiveGatewayToNormalStep,alt,initFlow,outFlowToInitFlow,outFlowToNormalStep);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToStep_source_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __alt_ref_flow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __inFlowToStep_target_step = null;\n      EMoflonEdge __initFlow_steps_normalStep = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      CSP csp = null;\n      Flow initFlow = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterFlowToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      Step step = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      AlternativeFlow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ExclusiveConvergingGatewayRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               _TmpObject = inFlowToFlow.getTarget ();\n\n               // ensure correct type and really bound of object flow\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n               flow = (AlternativeFlow) _TmpObject;\n\n               // iterate to-many link source from inFlow to inFlowToStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                     // check object inFlowToStep is really bound\n                     JavaSDM.ensure ( inFlowToStep != null );\n                     // bind object\n                     step = inFlowToStep.getTarget ();\n\n                     // check object step is really bound\n                     JavaSDM.ensure ( step != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object inFlowToStep is really bound\n                        JavaSDM.ensure ( inFlowToStep != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from inFlowToStep to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToStep.getSource ()\n                        ));\n\n                        // check link sourceRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link steps from step to flow\n                        JavaSDM.ensure (flow.equals (step.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from inFlowToStep to step\n                        JavaSDM.ensure (step.equals (inFlowToStep.getTarget ()\n                        ));\n\n                        // check link targetRef from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // iterate to-many link ref from flow to alt\n                        fujaba__Success = false;\n\n                        fujaba__IterFlowToAlt = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                        while ( fujaba__IterFlowToAlt.hasNext () )\n                        {\n                           try\n                           {\n                              alt = (AlternativeFlowAlternative) fujaba__IterFlowToAlt.next ();\n\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // bind object\n                              normalStep = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n\n                              // check if contained via correct reference\n                              JavaSDM.ensure(normalStep.getStepAlternative().contains(alt));\n\n                              // check isomorphic binding between objects step and normalStep \n                              JavaSDM.ensure ( !step.equals (normalStep) );\n\n                              // bind object\n                              initFlow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                              // check object initFlow is really bound\n                              JavaSDM.ensure ( initFlow != null );\n\n                              // check if contained via correct reference\n                              JavaSDM.ensure(initFlow.getSteps().contains(normalStep));\n\n                              // check isomorphic binding between objects initFlow and flow \n                              JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __inFlow_targetRef_exclusiveGateway\n                              __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_incoming_inFlow\n                              __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToStep_source_inFlow\n                              __inFlowToStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_outgoing_outFlow\n                              __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_sourceRef_exclusiveGateway\n                              __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __alt_ref_flow\n                              __alt_ref_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_step\n                              __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToStep_target_step\n                              __inFlowToStep_target_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __initFlow_steps_normalStep\n                              __initFlow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __normalStep_stepAlternative_alt\n                              __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_exclusiveGateway\n                              __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n                              // assign attribute __exclusiveGateway_incoming_inFlow\n                              __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __outFlow_sourceRef_exclusiveGateway\n                              __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n                              // assign attribute __exclusiveGateway_outgoing_outFlow\n                              __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __flow_steps_step\n                              __flow_steps_step.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __inFlowToStep_source_inFlow\n                              __inFlowToStep_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToStep_target_step\n                              __inFlowToStep_target_step.setName (\"target\");\n                              // assign attribute __normalStep_stepAlternative_alt\n                              __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n                              // assign attribute __alt_ref_flow\n                              __alt_ref_flow.setName (\"ref\");\n                              // assign attribute __initFlow_steps_normalStep\n                              __initFlow_steps_normalStep.setName (\"steps\");\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n                              // create link\n                              __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToStep_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(exclusiveGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __alt_ref_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_step.setSrc( flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __flow_steps_step.setTrg( step);\n\n\n                              // create link\n                              __inFlowToStep_target_step.setTrg( step);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(step);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToStep);\n\n\n                              // create link\n                              __inFlowToStep_source_inFlow.setSrc( inFlowToStep);\n\n\n                              // create link\n                              __inFlowToStep_target_step.setSrc( inFlowToStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __initFlow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n                              // create link\n                              __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n                              // create link\n                              __alt_ref_flow.setSrc( alt);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(alt);\n\n\n                              // create link\n                              __initFlow_steps_normalStep.setSrc( initFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(initFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_target_step,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_stepAlternative_alt,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__initFlow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_source_inFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,inFlow,exclusiveGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,normalStep,alt,initFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"ExclusiveConvergingGatewayRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n\n\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"exclusiveGateway\", exclusiveGateway);\nmatch.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\n\r\n// Create attribute variables\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", true, csp);\r\nvar_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"initFlow\",initFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			ExclusiveGateway exclusiveGateway, SequenceFlow outFlow,
			AlternativeFlow flow, SequenceFlowToUCFlow inFlowToFlow, Step step,
			SequenceFlowToStep inFlowToStep, NormalStep normalStep,
			AlternativeFlowAlternative alt, Flow initFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"inFlowToStep\", inFlowToStep);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"initFlow\", initFlow);\nruleresult.registerObject(\"outFlowToInitFlow\", outFlowToInitFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject exclusiveGateway, EObject outFlow,
			EObject flow, EObject inFlowToFlow, EObject step,
			EObject inFlowToStep, EObject normalStep,
			EObject exclusiveGatewayToNormalStep, EObject alt,
			EObject initFlow, EObject outFlowToInitFlow,
			EObject outFlowToNormalStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"exclusiveGateway\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exclusiveGateway_default_143116 = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_184911 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_655309 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_975432 = null;\n      ExclusiveGateway __DEC_outFlow_default_975432 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_321722 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_321722 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to exclusiveGateway\n         fujaba__Success = false;\n\n         fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n               // check link sourceRef from outFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n               ));\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link targetRef from inFlow to exclusiveGateway\n                     JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_default_143116 = exclusiveGateway.getDefault ();\n\n                           // check object __DEC_exclusiveGateway_default_143116 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_default_143116 != null );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_143116 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_143116.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_143116 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_143116.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_184911 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_184911 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_184911 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_184911.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_184911 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_184911.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_655309 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_655309 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_655309 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_655309.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_655309 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_655309.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exclusiveGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_975432\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_975432 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_975432.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_975432 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_975432.next ();\n\n                                 // check object __DEC_outFlow_default_975432 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_975432 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_975432 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_975432.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from exclusiveGateway to __DEC_exclusiveGateway_targetRef_321722\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_321722 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_321722.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_321722 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_321722.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_321722 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_321722 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_321722 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_321722.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_321722 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_321722.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_flowElements to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_508(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exclusiveGateway_default_377980 = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_652015 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_218500 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_683102 = null;\n      ExclusiveGateway __DEC_outFlow_default_683102 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_460803 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_460803 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check link targetRef from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link sourceRef from outFlow to exclusiveGateway\n                     JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_default_377980 = exclusiveGateway.getDefault ();\n\n                           // check object __DEC_exclusiveGateway_default_377980 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_default_377980 != null );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_377980 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_377980.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_377980 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_377980.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_652015 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_652015 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_652015 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_652015.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_652015 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_652015.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_218500 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_218500 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_218500 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_218500.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_218500 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_218500.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exclusiveGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_683102\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_683102 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_683102.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_683102 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_683102.next ();\n\n                                 // check object __DEC_outFlow_default_683102 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_683102 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_683102 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_683102.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from exclusiveGateway to __DEC_exclusiveGateway_targetRef_460803\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_460803 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_460803.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_460803 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_460803.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_460803 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_460803 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_460803 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_460803.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_460803 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_460803.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_flowElements to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_509(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exclusiveGateway_default_185408 = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_601127 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_366547 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_819597 = null;\n      ExclusiveGateway __DEC_outFlow_default_819597 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_677193 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_677193 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link targetRef from inFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToOutFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link sourceRef from outFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_default_185408 = exclusiveGateway.getDefault ();\n\n                     // check object __DEC_exclusiveGateway_default_185408 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_default_185408 != null );\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_default_185408 and inFlow \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_default_185408.equals (inFlow) );\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_default_185408 and outFlow \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_default_185408.equals (outFlow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_601127 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_601127 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_601127 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_601127.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_601127 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_601127.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_366547 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_366547 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_366547 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_366547.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_366547 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_366547.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_819597\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_819597 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_819597.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_819597 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_819597.next ();\n\n                           // check object __DEC_outFlow_default_819597 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_819597 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_819597 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_819597.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from exclusiveGateway to __DEC_exclusiveGateway_targetRef_677193\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_677193 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_677193.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_677193 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_677193.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_677193 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_677193 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_677193 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_677193.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_677193 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_677193.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_targetRef is really bound\n                  JavaSDM.ensure ( _edge_targetRef != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to inFlow\n                  JavaSDM.ensure (!(inFlow.equals (exclusiveGateway.getDefault ()\n                  )));\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                  )));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_targetRef to inFlow\n                  JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_targetRef to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_510(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exclusiveGateway_default_107852 = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_51413 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_518876 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_536060 = null;\n      ExclusiveGateway __DEC_outFlow_default_536060 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_33028 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_33028 = null;\n      Match match = null;\n      Iterator fujaba__IterExclusiveGatewayTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterExclusiveGatewayToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link targetRef from inFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link sourceRef from exclusiveGateway to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToOutFlow = new ArrayList(exclusiveGateway.getOutgoing()).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterExclusiveGatewayToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // iterate to-many link trg from exclusiveGateway to _edge_targetRef\n               fujaba__Success = false;\n\n               fujaba__IterExclusiveGatewayTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n               while ( fujaba__IterExclusiveGatewayTo_edge_targetRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_targetRef = (EMoflonEdge) fujaba__IterExclusiveGatewayTo_edge_targetRef.next ();\n\n                     // check object _edge_targetRef is really bound\n                     JavaSDM.ensure ( _edge_targetRef != null );\n                     // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                     JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                     // check link src from _edge_targetRef to inFlow\n                     JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_default_107852 = exclusiveGateway.getDefault ();\n\n                           // check object __DEC_exclusiveGateway_default_107852 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_default_107852 != null );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_107852 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_107852.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_107852 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_107852.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_51413 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_51413 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_51413 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_51413.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_51413 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_51413.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_518876 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_518876 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_518876 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_518876.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_518876 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_518876.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exclusiveGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_536060\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_536060 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_536060.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_536060 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_536060.next ();\n\n                                 // check object __DEC_outFlow_default_536060 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_536060 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_536060 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_536060.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from exclusiveGateway to __DEC_exclusiveGateway_targetRef_33028\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_33028 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_33028.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_33028 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_33028.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_33028 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_33028 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_33028 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_33028.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_33028 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_33028.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_incoming is really bound\n                        JavaSDM.ensure ( _edge_incoming != null );\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                        JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_incoming to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_incoming.getSrc ()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_incoming to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                        ));\n\n                        // check link trg from _edge_targetRef to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_511(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exclusiveGateway_default_963601 = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_267670 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_358757 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_73587 = null;\n      ExclusiveGateway __DEC_outFlow_default_73587 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_227972 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_227972 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_default_963601 = exclusiveGateway.getDefault ();\n\n                     // check object __DEC_exclusiveGateway_default_963601 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_default_963601 != null );\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_default_963601 and inFlow \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_default_963601.equals (inFlow) );\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_default_963601 and outFlow \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_default_963601.equals (outFlow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_267670 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_267670 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_267670 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_267670.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_267670 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_267670.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_358757 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_358757 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_358757 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_358757.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_358757 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_358757.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_73587\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_73587 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_73587.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_73587 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_73587.next ();\n\n                           // check object __DEC_outFlow_default_73587 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_73587 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_73587 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_73587.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from exclusiveGateway to __DEC_exclusiveGateway_targetRef_227972\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_227972 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_227972.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_227972 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_227972.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_227972 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_227972 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_227972 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_227972.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_227972 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_227972.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to inFlow\n                  JavaSDM.ensure (!(inFlow.equals (exclusiveGateway.getDefault ()\n                  )));\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                  )));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_sourceRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_sourceRef to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_512(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exclusiveGateway_default_998920 = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_263610 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_138068 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_971456 = null;\n      ExclusiveGateway __DEC_outFlow_default_971456 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_793736 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_793736 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link src from outFlow to _edge_sourceRef\n               fujaba__Success = false;\n\n               fujaba__IterOutFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterOutFlowTo_edge_sourceRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_sourceRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_sourceRef.next ();\n\n                     // check object _edge_sourceRef is really bound\n                     JavaSDM.ensure ( _edge_sourceRef != null );\n                     // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                     JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                     // check link trg from _edge_sourceRef to exclusiveGateway\n                     JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_default_998920 = exclusiveGateway.getDefault ();\n\n                           // check object __DEC_exclusiveGateway_default_998920 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_default_998920 != null );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_998920 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_998920.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_default_998920 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_default_998920.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_263610 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_263610 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_263610 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_263610.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_263610 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_263610.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_138068 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_138068 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_138068 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_138068.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_138068 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_138068.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exclusiveGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_971456\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_971456 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_971456.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_971456 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_971456.next ();\n\n                                 // check object __DEC_outFlow_default_971456 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_971456 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_971456 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_971456.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from exclusiveGateway to __DEC_exclusiveGateway_targetRef_793736\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_793736 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_793736.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_793736 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_793736.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_793736 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_793736 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_793736 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_793736.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_793736 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_793736.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_outgoing is really bound\n                        JavaSDM.ensure ( _edge_outgoing != null );\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                        JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_outgoing to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_outgoing.getSrc ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_outgoing to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exclusiveGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_513(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow outFlow = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToInitFlow = null;\n      Step step = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Flow initFlow = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterFlowToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow flow = null;\n      Iterator fujaba__IterInFlowToFlowListToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToFlowList = null;\n      RuleEntryList inFlowToFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToFlowList.hasNext () )\n         {\n            try\n            {\n               inFlowToFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToFlowList.next ();\n\n               // check object inFlowToFlowList is really bound\n               JavaSDM.ensure ( inFlowToFlowList != null );\n               // iterate to-many link entryObjects from inFlowToFlowList to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToFlowListToInFlowToFlow = new ArrayList(inFlowToFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToFlowListToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToFlowListToInFlowToFlow.next ();\n\n                     // ensure correct type and really bound of object inFlowToFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     _TmpObject = inFlowToFlow.getTarget ();\n\n                     // ensure correct type and really bound of object flow\n                     JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n                     flow = (AlternativeFlow) _TmpObject;\n\n                     // iterate to-many link ref from flow to alt\n                     fujaba__Success = false;\n\n                     fujaba__IterFlowToAlt = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                     while ( fujaba__IterFlowToAlt.hasNext () )\n                     {\n                        try\n                        {\n                           alt = (AlternativeFlowAlternative) fujaba__IterFlowToAlt.next ();\n\n                           // check object alt is really bound\n                           JavaSDM.ensure ( alt != null );\n                           // bind object\n                           normalStep = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                           // check object normalStep is really bound\n                           JavaSDM.ensure ( normalStep != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(normalStep.getStepAlternative().contains(alt));\n\n                           // bind object\n                           inFlow = inFlowToFlow.getSource ();\n\n                           // check object inFlow is really bound\n                           JavaSDM.ensure ( inFlow != null );\n\n                           // bind object\n                           _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                           // ensure correct type and really bound of object process\n                           JavaSDM.ensure ( _TmpObject instanceof Process );\n                           process = (Process) _TmpObject;\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                           // bind object\n                           initFlow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                           // check object initFlow is really bound\n                           JavaSDM.ensure ( initFlow != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(initFlow.getSteps().contains(normalStep));\n\n                           // check isomorphic binding between objects initFlow and flow \n                           JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                           // iterate to-many link source from inFlow to inFlowToStep\n                           fujaba__Success = false;\n\n                           fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n                           {\n                              try\n                              {\n                                 inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                                 // check object inFlowToStep is really bound\n                                 JavaSDM.ensure ( inFlowToStep != null );\n                                 // bind object\n                                 step = inFlowToStep.getTarget ();\n\n                                 // check object step is really bound\n                                 JavaSDM.ensure ( step != null );\n\n                                 // check isomorphic binding between objects step and normalStep \n                                 JavaSDM.ensure ( !step.equals (normalStep) );\n\n                                 // check link steps from step to flow\n                                 JavaSDM.ensure (flow.equals (step.eContainer()\n                                 ));\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,process,inFlow,exclusiveGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,normalStep,exclusiveGatewayToNormalStep,alt,initFlow,outFlowToInitFlow,outFlowToNormalStep,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object alt is really bound\n                                       JavaSDM.ensure ( alt != null );\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object inFlow is really bound\n                                       JavaSDM.ensure ( inFlow != null );\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // check object inFlowToStep is really bound\n                                       JavaSDM.ensure ( inFlowToStep != null );\n                                       // check object initFlow is really bound\n                                       JavaSDM.ensure ( initFlow != null );\n                                       // check object normalStep is really bound\n                                       JavaSDM.ensure ( normalStep != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // check object step is really bound\n                                       JavaSDM.ensure ( step != null );\n                                       // check isomorphic binding between objects initFlow and flow \n                                       JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                                       // check isomorphic binding between objects step and normalStep \n                                       JavaSDM.ensure ( !step.equals (normalStep) );\n\n                                       // create object exclusiveGateway\n                                       exclusiveGateway = Bpmn2Factory.eINSTANCE.createExclusiveGateway();\n\n                                       // create object outFlow\n                                       outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // create object exclusiveGatewayToNormalStep\n                                       exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                       // create object outFlowToNormalStep\n                                       outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                       // create object outFlowToInitFlow\n                                       outFlowToInitFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // assign attribute exclusiveGateway\n                                       exclusiveGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"exclusiveGateway\",\"gatewayDirection\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(exclusiveGateway); // add link\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                       // create link\n                                       exclusiveGateway.getIncoming().add(inFlow);\n\n\n                                       // create link\n                                       exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(exclusiveGateway);\n\n\n                                       // create link\n                                       outFlow.setSourceRef( exclusiveGateway);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setSource( outFlow);\n\n\n                                       // create link\n                                       outFlowToInitFlow.setSource( outFlow);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(outFlow);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(exclusiveGatewayToNormalStep);\n\n\n                                       // create link\n                                       outFlowToInitFlow.setTarget( initFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToInitFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToUCFlow inFlowToFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", csp);\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"initFlow\",initFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			ExclusiveGateway exclusiveGateway, SequenceFlow outFlow,
			AlternativeFlow flow, SequenceFlowToUCFlow inFlowToFlow, Step step,
			SequenceFlowToStep inFlowToStep, NormalStep normalStep,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			AlternativeFlowAlternative alt, Flow initFlow,
			SequenceFlowToUCFlow outFlowToInitFlow,
			SequenceFlowToStep outFlowToNormalStep,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ExclusiveConvergingGatewayRule
