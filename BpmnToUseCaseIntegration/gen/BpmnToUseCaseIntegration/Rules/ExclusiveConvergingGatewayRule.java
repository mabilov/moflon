/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Exclusive Converging Gateway Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getExclusiveConvergingGatewayRule()
 * @model
 * @generated
 */
public interface ExclusiveConvergingGatewayRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __inFlow_targetRef_exConvGateway = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_exConvGateway = null;\n      EMoflonEdge __outFlow_sourceRef_exConvGateway = null;\n      EMoflonEdge __exConvGateway_outgoing_outFlow = null;\n      EMoflonEdge __exConvGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_defaultFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n         // check object exConvGateway is really bound\n         JavaSDM.ensure ( exConvGateway != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects inFlow and defaultFlow \n         JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and exConvGateway \n         JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object defaultFlow is really bound\n            JavaSDM.ensure ( defaultFlow != null );\n            // check object exConvGateway is really bound\n            JavaSDM.ensure ( exConvGateway != null );\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects inFlow and defaultFlow \n            JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n            // check isomorphic binding between objects outFlow and defaultFlow \n            JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n            // check isomorphic binding between objects exclusiveGateway and exConvGateway \n            JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __inFlow_targetRef_exConvGateway\n            __inFlow_targetRef_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_exConvGateway\n            __process_flowElements_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_exConvGateway\n            __outFlow_sourceRef_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exConvGateway_outgoing_outFlow\n            __exConvGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exConvGateway_incoming_inFlow\n            __exConvGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_exConvGateway\n            __process_flowElements_exConvGateway.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_exConvGateway\n            __inFlow_targetRef_exConvGateway.setName (\"targetRef\");\n            // assign attribute __exConvGateway_incoming_inFlow\n            __exConvGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __outFlow_sourceRef_exConvGateway\n            __outFlow_sourceRef_exConvGateway.setName (\"sourceRef\");\n            // assign attribute __exConvGateway_outgoing_outFlow\n            __exConvGateway_outgoing_outFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_exConvGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_exConvGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_exConvGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exConvGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exConvGateway_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,exConvGateway,\"toBeTranslatedNodes\");\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_exConvGateway.setSrc( process);\n\n\n            // create link\n            __inFlow_targetRef_exConvGateway.setSrc( inFlow);\n\n\n            // create link\n            __exConvGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_exConvGateway.setTrg( exConvGateway);\n\n\n            // create link\n            __exConvGateway_incoming_inFlow.setSrc( exConvGateway);\n\n\n            // create link\n            __outFlow_sourceRef_exConvGateway.setTrg( exConvGateway);\n\n\n            // create link\n            __process_flowElements_exConvGateway.setTrg( exConvGateway);\n\n\n            // create link\n            __exConvGateway_outgoing_outFlow.setSrc( exConvGateway);\n\n\n            // create link\n            __exConvGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_exConvGateway.setSrc( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object defaultFlow is really bound\n            JavaSDM.ensure ( defaultFlow != null );\n            // check object exConvGateway is really bound\n            JavaSDM.ensure ( exConvGateway != null );\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects inFlow and defaultFlow \n            JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n            // check isomorphic binding between objects outFlow and defaultFlow \n            JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n            // check isomorphic binding between objects exclusiveGateway and exConvGateway \n            JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_default_defaultFlow\n            __exclusiveGateway_default_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __exclusiveGateway_default_defaultFlow\n            __exclusiveGateway_default_defaultFlow.setName (\"default\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,defaultFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_exclusiveGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,exclusiveGateway,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_default_defaultFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_default_defaultFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_default_defaultFlow.setTrg( defaultFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exConvGateway,
			SequenceFlow outFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow defaultFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      AlternativeFlowAlternative alt = null;\n      SequenceFlow defaultFlow = null;\n      SequenceFlowToUCFlow defaultFlowToInitFlow = null;\n      ExclusiveGateway exConvGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      AlternativeFlow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Flow initFlow = null;\n      NormalStep normalStep = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      Step step = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      FlowNodeToStep exConvGatewayToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToInitFlow = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge exConvGatewayToNormalStep__target__normalStep = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __exConvGateway_incoming_inFlow = null;\n      EMoflonEdge outFlowToInitFlow__source__outFlow = null;\n      EMoflonEdge __process_flowElements_exConvGateway = null;\n      EMoflonEdge __inFlow_targetRef_exConvGateway = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToInitFlow__target__initFlow = null;\n      EMoflonEdge __exConvGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exConvGateway = null;\n      EMoflonEdge exConvGatewayToNormalStep__source__exConvGateway = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"defaultFlow\"));\n\n         // ensure correct type and really bound of object defaultFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         defaultFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"defaultFlowToInitFlow\"));\n\n         // ensure correct type and really bound of object defaultFlowToInitFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         defaultFlowToInitFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exConvGateway\"));\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGatewayToNormalStep\"));\n\n         // ensure correct type and really bound of object exclusiveGatewayToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         exclusiveGatewayToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         flow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToStep\"));\n\n         // ensure correct type and really bound of object inFlowToStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"initFlow\"));\n\n         // ensure correct type and really bound of object initFlow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         initFlow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects inFlow and defaultFlow \n         JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and exConvGateway \n         JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n         // check isomorphic binding between objects initFlow and flow \n         JavaSDM.ensure ( !initFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects step and normalStep \n         JavaSDM.ensure ( !step.equals (normalStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object exConvGatewayToNormalStep\n         exConvGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToInitFlow\n         outFlowToInitFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n\n         // create link\n         exConvGatewayToNormalStep.setSource( exConvGateway);\n\n\n         // create link\n         outFlowToInitFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         exConvGatewayToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         outFlowToInitFlow.setTarget( initFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exConvGateway is really bound\n         JavaSDM.ensure ( exConvGateway != null );\n         // check object exConvGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exConvGatewayToNormalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToInitFlow is really bound\n         JavaSDM.ensure ( outFlowToInitFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exConvGatewayToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exConvGateway,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n         // check object defaultFlowToInitFlow is really bound\n         JavaSDM.ensure ( defaultFlowToInitFlow != null );\n         // check object exConvGateway is really bound\n         JavaSDM.ensure ( exConvGateway != null );\n         // check object exConvGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exConvGatewayToNormalStep != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToStep is really bound\n         JavaSDM.ensure ( inFlowToStep != null );\n         // check object initFlow is really bound\n         JavaSDM.ensure ( initFlow != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToInitFlow is really bound\n         JavaSDM.ensure ( outFlowToInitFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects defaultFlow and alt \n         JavaSDM.ensure ( !defaultFlow.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlowToInitFlow and alt \n         JavaSDM.ensure ( !defaultFlowToInitFlow.equals (alt) );\n\n         // check isomorphic binding between objects exConvGateway and alt \n         JavaSDM.ensure ( !exConvGateway.equals (alt) );\n\n         // check isomorphic binding between objects exConvGatewayToNormalStep and alt \n         JavaSDM.ensure ( !exConvGatewayToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGateway and alt \n         JavaSDM.ensure ( !exclusiveGateway.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and alt \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects inFlow and alt \n         JavaSDM.ensure ( !inFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToFlow and alt \n         JavaSDM.ensure ( !inFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects inFlowToStep and alt \n         JavaSDM.ensure ( !inFlowToStep.equals (alt) );\n\n         // check isomorphic binding between objects initFlow and alt \n         JavaSDM.ensure ( !initFlow.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and alt \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and alt \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects step and alt \n         JavaSDM.ensure ( !step.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlowToInitFlow and defaultFlow \n         JavaSDM.ensure ( !defaultFlowToInitFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exConvGateway and defaultFlow \n         JavaSDM.ensure ( !exConvGateway.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exConvGatewayToNormalStep and defaultFlow \n         JavaSDM.ensure ( !exConvGatewayToNormalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and defaultFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and defaultFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects flow and defaultFlow \n         JavaSDM.ensure ( !flow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects inFlow and defaultFlow \n         JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and defaultFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and defaultFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects initFlow and defaultFlow \n         JavaSDM.ensure ( !initFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects normalStep and defaultFlow \n         JavaSDM.ensure ( !normalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and defaultFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and defaultFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects process and defaultFlow \n         JavaSDM.ensure ( !process.equals (defaultFlow) );\n\n         // check isomorphic binding between objects step and defaultFlow \n         JavaSDM.ensure ( !step.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exConvGateway and defaultFlowToInitFlow \n         JavaSDM.ensure ( !exConvGateway.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects exConvGatewayToNormalStep and defaultFlowToInitFlow \n         JavaSDM.ensure ( !exConvGatewayToNormalStep.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and defaultFlowToInitFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and defaultFlowToInitFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects flow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !flow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects inFlow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !inFlow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and defaultFlowToInitFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects initFlow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !initFlow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects normalStep and defaultFlowToInitFlow \n         JavaSDM.ensure ( !normalStep.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and defaultFlowToInitFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and defaultFlowToInitFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects process and defaultFlowToInitFlow \n         JavaSDM.ensure ( !process.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects step and defaultFlowToInitFlow \n         JavaSDM.ensure ( !step.equals (defaultFlowToInitFlow) );\n\n         // check isomorphic binding between objects exConvGatewayToNormalStep and exConvGateway \n         JavaSDM.ensure ( !exConvGatewayToNormalStep.equals (exConvGateway) );\n\n         // check isomorphic binding between objects exclusiveGateway and exConvGateway \n         JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exConvGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exConvGateway) );\n\n         // check isomorphic binding between objects flow and exConvGateway \n         JavaSDM.ensure ( !flow.equals (exConvGateway) );\n\n         // check isomorphic binding between objects inFlow and exConvGateway \n         JavaSDM.ensure ( !inFlow.equals (exConvGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exConvGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exConvGateway) );\n\n         // check isomorphic binding between objects inFlowToStep and exConvGateway \n         JavaSDM.ensure ( !inFlowToStep.equals (exConvGateway) );\n\n         // check isomorphic binding between objects initFlow and exConvGateway \n         JavaSDM.ensure ( !initFlow.equals (exConvGateway) );\n\n         // check isomorphic binding between objects normalStep and exConvGateway \n         JavaSDM.ensure ( !normalStep.equals (exConvGateway) );\n\n         // check isomorphic binding between objects outFlow and exConvGateway \n         JavaSDM.ensure ( !outFlow.equals (exConvGateway) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and exConvGateway \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (exConvGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exConvGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exConvGateway) );\n\n         // check isomorphic binding between objects process and exConvGateway \n         JavaSDM.ensure ( !process.equals (exConvGateway) );\n\n         // check isomorphic binding between objects step and exConvGateway \n         JavaSDM.ensure ( !step.equals (exConvGateway) );\n\n         // check isomorphic binding between objects exclusiveGateway and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !exclusiveGateway.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects flow and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToStep and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToStep.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects initFlow and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !initFlow.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects step and exConvGatewayToNormalStep \n         JavaSDM.ensure ( !step.equals (exConvGatewayToNormalStep) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToStep and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects initFlow and exclusiveGateway \n         JavaSDM.ensure ( !initFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects step and exclusiveGateway \n         JavaSDM.ensure ( !step.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects initFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !initFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects step and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !step.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToStep and flow \n         JavaSDM.ensure ( !inFlowToStep.equals (flow) );\n\n         // check isomorphic binding between objects initFlow and flow \n         JavaSDM.ensure ( !initFlow.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and flow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlow \n         JavaSDM.ensure ( !initFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects step and inFlow \n         JavaSDM.ensure ( !step.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlowToFlow \n         JavaSDM.ensure ( !initFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects step and inFlowToFlow \n         JavaSDM.ensure ( !step.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlowToStep \n         JavaSDM.ensure ( !initFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects normalStep and inFlowToStep \n         JavaSDM.ensure ( !normalStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlowToStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects process and inFlowToStep \n         JavaSDM.ensure ( !process.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects step and inFlowToStep \n         JavaSDM.ensure ( !step.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects normalStep and initFlow \n         JavaSDM.ensure ( !normalStep.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlow and initFlow \n         JavaSDM.ensure ( !outFlow.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and initFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and initFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (initFlow) );\n\n         // check isomorphic binding between objects process and initFlow \n         JavaSDM.ensure ( !process.equals (initFlow) );\n\n         // check isomorphic binding between objects step and initFlow \n         JavaSDM.ensure ( !step.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and normalStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects step and normalStep \n         JavaSDM.ensure ( !step.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and outFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects step and outFlow \n         JavaSDM.ensure ( !step.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToInitFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects process and outFlowToInitFlow \n         JavaSDM.ensure ( !process.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects step and outFlowToInitFlow \n         JavaSDM.ensure ( !step.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects step and outFlowToNormalStep \n         JavaSDM.ensure ( !step.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects step and process \n         JavaSDM.ensure ( !step.equals (process) );\n\n         // create object exConvGatewayToNormalStep__target__normalStep\n         exConvGatewayToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exConvGateway_incoming_inFlow\n         __exConvGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToInitFlow__source__outFlow\n         outFlowToInitFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_exConvGateway\n         __process_flowElements_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_exConvGateway\n         __inFlow_targetRef_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToInitFlow__target__initFlow\n         outFlowToInitFlow__target__initFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exConvGateway_outgoing_outFlow\n         __exConvGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_exConvGateway\n         __outFlow_sourceRef_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exConvGatewayToNormalStep__source__exConvGateway\n         exConvGatewayToNormalStep__source__exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ExclusiveConvergingGatewayRule\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __process_flowElements_exConvGateway\n         __process_flowElements_exConvGateway.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_exConvGateway\n         __inFlow_targetRef_exConvGateway.setName (\"targetRef\");\n         // assign attribute __exConvGateway_incoming_inFlow\n         __exConvGateway_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __outFlow_sourceRef_exConvGateway\n         __outFlow_sourceRef_exConvGateway.setName (\"sourceRef\");\n         // assign attribute __exConvGateway_outgoing_outFlow\n         __exConvGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute exConvGatewayToNormalStep__source__exConvGateway\n         exConvGatewayToNormalStep__source__exConvGateway.setName (\"source\");\n         // assign attribute exConvGatewayToNormalStep__target__normalStep\n         exConvGatewayToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToInitFlow__source__outFlow\n         outFlowToInitFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToInitFlow__target__initFlow\n         outFlowToInitFlow__target__initFlow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exConvGatewayToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exConvGateway_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_exConvGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_exConvGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow__target__initFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exConvGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_exConvGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exConvGatewayToNormalStep__source__exConvGateway,\"createdEdges\");\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_exConvGateway.setSrc( process);\n\n\n         // create link\n         __inFlow_targetRef_exConvGateway.setSrc( inFlow);\n\n\n         // create link\n         __exConvGateway_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __exConvGateway_incoming_inFlow.setSrc( exConvGateway);\n\n\n         // create link\n         __process_flowElements_exConvGateway.setTrg( exConvGateway);\n\n\n         // create link\n         __inFlow_targetRef_exConvGateway.setTrg( exConvGateway);\n\n\n         // create link\n         __exConvGateway_outgoing_outFlow.setSrc( exConvGateway);\n\n\n         // create link\n         __outFlow_sourceRef_exConvGateway.setTrg( exConvGateway);\n\n\n         // create link\n         exConvGatewayToNormalStep__source__exConvGateway.setTrg( exConvGateway);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToInitFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_exConvGateway.setSrc( outFlow);\n\n\n         // create link\n         __exConvGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         exConvGatewayToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         exConvGatewayToNormalStep__source__exConvGateway.setSrc( exConvGatewayToNormalStep);\n\n\n         // create link\n         exConvGatewayToNormalStep__target__normalStep.setSrc( exConvGatewayToNormalStep);\n\n\n         // create link\n         outFlowToInitFlow__target__initFlow.setTrg( initFlow);\n\n\n         // create link\n         outFlowToInitFlow__target__initFlow.setSrc( outFlowToInitFlow);\n\n\n         // create link\n         outFlowToInitFlow__source__outFlow.setSrc( outFlowToInitFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,inFlow,exConvGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,normalStep,exConvGatewayToNormalStep,alt,initFlow,outFlowToInitFlow,outFlowToNormalStep,exclusiveGateway,exclusiveGatewayToNormalStep,defaultFlow,defaultFlowToInitFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow defaultFlow = null;\n      ExclusiveGateway exConvGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_exConvGateway = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __exConvGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_exConvGateway = null;\n      EMoflonEdge __inFlowToStep_source_inFlow = null;\n      EMoflonEdge __exConvGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exConvGateway = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __alt_ref_flow = null;\n      EMoflonEdge __inFlowToStep_target_step = null;\n      EMoflonEdge __exclusiveGatewayToNormalStep_target_normalStep = null;\n      EMoflonEdge __initFlow_steps_normalStep = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __defaultFlowToInitFlow_target_initFlow = null;\n      EMoflonEdge __exclusiveGatewayToNormalStep_source_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_defaultFlow = null;\n      EMoflonEdge __defaultFlowToInitFlow_source_defaultFlow = null;\n      CSP csp = null;\n      Iterator fujaba__IterFlowToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      Step step = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      AlternativeFlow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Flow initFlow = null;\n      Iterator fujaba__IterDefaultFlowToDefaultFlowToInitFlow = null;\n      SequenceFlowToUCFlow defaultFlowToInitFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ExclusiveConvergingGatewayRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"defaultFlow\"));\n\n         // ensure correct type and really bound of object defaultFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         defaultFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"exConvGateway\"));\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects inFlow and defaultFlow \n         JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and exConvGateway \n         JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from defaultFlow to defaultFlowToInitFlow\n         fujaba__Success = false;\n\n         fujaba__IterDefaultFlowToDefaultFlowToInitFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(defaultFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterDefaultFlowToDefaultFlowToInitFlow.hasNext () )\n         {\n            try\n            {\n               defaultFlowToInitFlow = (SequenceFlowToUCFlow) fujaba__IterDefaultFlowToDefaultFlowToInitFlow.next ();\n\n               // check object defaultFlowToInitFlow is really bound\n               JavaSDM.ensure ( defaultFlowToInitFlow != null );\n               // bind object\n               initFlow = defaultFlowToInitFlow.getTarget ();\n\n               // check object initFlow is really bound\n               JavaSDM.ensure ( initFlow != null );\n\n               // iterate to-many link source from inFlow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // check isomorphic binding between objects inFlowToFlow and defaultFlowToInitFlow \n                     JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlowToInitFlow) );\n\n                     // bind object\n                     _TmpObject = inFlowToFlow.getTarget ();\n\n                     // ensure correct type and really bound of object flow\n                     JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n                     flow = (AlternativeFlow) _TmpObject;\n\n                     // check isomorphic binding between objects initFlow and flow \n                     JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                     // iterate to-many link source from inFlow to inFlowToStep\n                     fujaba__Success = false;\n\n                     fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n                     {\n                        try\n                        {\n                           inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                           // check object inFlowToStep is really bound\n                           JavaSDM.ensure ( inFlowToStep != null );\n                           // bind object\n                           step = inFlowToStep.getTarget ();\n\n                           // check object step is really bound\n                           JavaSDM.ensure ( step != null );\n\n                           // iterate to-many link source from exclusiveGateway to exclusiveGatewayToNormalStep\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep.hasNext () )\n                           {\n                              try\n                              {\n                                 exclusiveGatewayToNormalStep = (FlowNodeToStep) fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep.next ();\n\n                                 // check object exclusiveGatewayToNormalStep is really bound\n                                 JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                                 // bind object\n                                 _TmpObject = exclusiveGatewayToNormalStep.getTarget ();\n\n                                 // ensure correct type and really bound of object normalStep\n                                 JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                                 normalStep = (NormalStep) _TmpObject;\n\n                                 // check isomorphic binding between objects step and normalStep \n                                 JavaSDM.ensure ( !step.equals (normalStep) );\n\n                                 // story node \'find context\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object defaultFlow is really bound\n                                    JavaSDM.ensure ( defaultFlow != null );\n                                    // check object defaultFlowToInitFlow is really bound\n                                    JavaSDM.ensure ( defaultFlowToInitFlow != null );\n                                    // check object exConvGateway is really bound\n                                    JavaSDM.ensure ( exConvGateway != null );\n                                    // check object exclusiveGateway is really bound\n                                    JavaSDM.ensure ( exclusiveGateway != null );\n                                    // check object exclusiveGatewayToNormalStep is really bound\n                                    JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                                    // check object flow is really bound\n                                    JavaSDM.ensure ( flow != null );\n                                    // check object inFlow is really bound\n                                    JavaSDM.ensure ( inFlow != null );\n                                    // check object inFlowToFlow is really bound\n                                    JavaSDM.ensure ( inFlowToFlow != null );\n                                    // check object inFlowToStep is really bound\n                                    JavaSDM.ensure ( inFlowToStep != null );\n                                    // check object initFlow is really bound\n                                    JavaSDM.ensure ( initFlow != null );\n                                    // check object normalStep is really bound\n                                    JavaSDM.ensure ( normalStep != null );\n                                    // check object outFlow is really bound\n                                    JavaSDM.ensure ( outFlow != null );\n                                    // check object process is really bound\n                                    JavaSDM.ensure ( process != null );\n                                    // check object step is really bound\n                                    JavaSDM.ensure ( step != null );\n                                    // check isomorphic binding between objects inFlow and defaultFlow \n                                    JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                                    // check isomorphic binding between objects outFlow and defaultFlow \n                                    JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                                    // check isomorphic binding between objects inFlowToFlow and defaultFlowToInitFlow \n                                    JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlowToInitFlow) );\n\n                                    // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                                    JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                                    // check isomorphic binding between objects initFlow and flow \n                                    JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                                    // check isomorphic binding between objects outFlow and inFlow \n                                    JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                                    // check isomorphic binding between objects step and normalStep \n                                    JavaSDM.ensure ( !step.equals (normalStep) );\n\n                                    // check link default from exclusiveGateway to defaultFlow\n                                    JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                                    ));\n\n                                    // check link flowElements from exConvGateway to process\n                                    JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from exclusiveGateway to process\n                                    JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                                    ));\n\n                                    // check link flowElements from inFlow to process\n                                    JavaSDM.ensure (process.equals (inFlow.eContainer()\n                                    ));\n\n                                    // check link flowElements from outFlow to process\n                                    JavaSDM.ensure (process.equals (outFlow.eContainer()\n                                    ));\n\n                                    // check link incoming from inFlow to exConvGateway\n                                    JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                                    ));\n\n                                    // check link outgoing from outFlow to exConvGateway\n                                    JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                                    ));\n\n                                    // check link source from defaultFlowToInitFlow to defaultFlow\n                                    JavaSDM.ensure (defaultFlow.equals (defaultFlowToInitFlow.getSource ()\n                                    ));\n\n                                    // check link source from exclusiveGatewayToNormalStep to exclusiveGateway\n                                    JavaSDM.ensure (exclusiveGateway.equals (exclusiveGatewayToNormalStep.getSource ()\n                                    ));\n\n                                    // check link source from inFlowToFlow to inFlow\n                                    JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                                    ));\n\n                                    // check link source from inFlowToStep to inFlow\n                                    JavaSDM.ensure (inFlow.equals (inFlowToStep.getSource ()\n                                    ));\n\n                                    // check link steps from step to flow\n                                    JavaSDM.ensure (flow.equals (step.eContainer()\n                                    ));\n\n                                    // check link steps from normalStep to initFlow\n                                    JavaSDM.ensure (initFlow.equals (normalStep.eContainer()\n                                    ));\n\n                                    // check link target from defaultFlowToInitFlow to initFlow\n                                    JavaSDM.ensure (initFlow.equals (defaultFlowToInitFlow.getTarget ()\n                                    ));\n\n                                    // check link target from exclusiveGatewayToNormalStep to normalStep\n                                    JavaSDM.ensure (normalStep.equals (exclusiveGatewayToNormalStep.getTarget ()\n                                    ));\n\n                                    // check link target from inFlowToFlow to flow\n                                    JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                                    ));\n\n                                    // check link target from inFlowToStep to step\n                                    JavaSDM.ensure (step.equals (inFlowToStep.getTarget ()\n                                    ));\n\n                                    // iterate to-many link ref from flow to alt\n                                    fujaba__Success = false;\n\n                                    fujaba__IterFlowToAlt = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                                    while ( fujaba__IterFlowToAlt.hasNext () )\n                                    {\n                                       try\n                                       {\n                                          alt = (AlternativeFlowAlternative) fujaba__IterFlowToAlt.next ();\n\n                                          // check object alt is really bound\n                                          JavaSDM.ensure ( alt != null );\n                                          // check link stepAlternative from alt to normalStep\n                                          JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                                          ));\n\n                                          // create object __process_flowElements_inFlow\n                                          __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __process_flowElements_outFlow\n                                          __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __process_flowElements_exclusiveGateway\n                                          __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __process_flowElements_exConvGateway\n                                          __process_flowElements_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object isApplicableMatch\n                                          isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                          // create object __exConvGateway_incoming_inFlow\n                                          __exConvGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlowToFlow_source_inFlow\n                                          __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlow_targetRef_exConvGateway\n                                          __inFlow_targetRef_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlowToStep_source_inFlow\n                                          __inFlowToStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __exConvGateway_outgoing_outFlow\n                                          __exConvGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __outFlow_sourceRef_exConvGateway\n                                          __outFlow_sourceRef_exConvGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlowToFlow_target_flow\n                                          __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __flow_steps_step\n                                          __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __alt_ref_flow\n                                          __alt_ref_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __inFlowToStep_target_step\n                                          __inFlowToStep_target_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __exclusiveGatewayToNormalStep_target_normalStep\n                                          __exclusiveGatewayToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __initFlow_steps_normalStep\n                                          __initFlow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __normalStep_stepAlternative_alt\n                                          __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __defaultFlowToInitFlow_target_initFlow\n                                          __defaultFlowToInitFlow_target_initFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __exclusiveGatewayToNormalStep_source_exclusiveGateway\n                                          __exclusiveGatewayToNormalStep_source_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __exclusiveGateway_default_defaultFlow\n                                          __exclusiveGateway_default_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // create object __defaultFlowToInitFlow_source_defaultFlow\n                                          __defaultFlowToInitFlow_source_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                          // assign attribute __process_flowElements_outFlow\n                                          __process_flowElements_outFlow.setName (\"flowElements\");\n                                          // assign attribute __process_flowElements_exclusiveGateway\n                                          __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n                                          // assign attribute __process_flowElements_inFlow\n                                          __process_flowElements_inFlow.setName (\"flowElements\");\n                                          // assign attribute __process_flowElements_exConvGateway\n                                          __process_flowElements_exConvGateway.setName (\"flowElements\");\n                                          // assign attribute __inFlow_targetRef_exConvGateway\n                                          __inFlow_targetRef_exConvGateway.setName (\"targetRef\");\n                                          // assign attribute __exConvGateway_incoming_inFlow\n                                          __exConvGateway_incoming_inFlow.setName (\"incoming\");\n                                          // assign attribute __outFlow_sourceRef_exConvGateway\n                                          __outFlow_sourceRef_exConvGateway.setName (\"sourceRef\");\n                                          // assign attribute __exConvGateway_outgoing_outFlow\n                                          __exConvGateway_outgoing_outFlow.setName (\"outgoing\");\n                                          // assign attribute __flow_steps_step\n                                          __flow_steps_step.setName (\"steps\");\n                                          // assign attribute __inFlowToFlow_source_inFlow\n                                          __inFlowToFlow_source_inFlow.setName (\"source\");\n                                          // assign attribute __inFlowToFlow_target_flow\n                                          __inFlowToFlow_target_flow.setName (\"target\");\n                                          // assign attribute __inFlowToStep_source_inFlow\n                                          __inFlowToStep_source_inFlow.setName (\"source\");\n                                          // assign attribute __inFlowToStep_target_step\n                                          __inFlowToStep_target_step.setName (\"target\");\n                                          // assign attribute __normalStep_stepAlternative_alt\n                                          __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n                                          // assign attribute __alt_ref_flow\n                                          __alt_ref_flow.setName (\"ref\");\n                                          // assign attribute __initFlow_steps_normalStep\n                                          __initFlow_steps_normalStep.setName (\"steps\");\n                                          // assign attribute __exclusiveGateway_default_defaultFlow\n                                          __exclusiveGateway_default_defaultFlow.setName (\"default\");\n                                          // assign attribute __exclusiveGatewayToNormalStep_source_exclusiveGateway\n                                          __exclusiveGatewayToNormalStep_source_exclusiveGateway.setName (\"source\");\n                                          // assign attribute __exclusiveGatewayToNormalStep_target_normalStep\n                                          __exclusiveGatewayToNormalStep_target_normalStep.setName (\"target\");\n                                          // assign attribute __defaultFlowToInitFlow_source_defaultFlow\n                                          __defaultFlowToInitFlow_source_defaultFlow.setName (\"source\");\n                                          // assign attribute __defaultFlowToInitFlow_target_initFlow\n                                          __defaultFlowToInitFlow_target_initFlow.setName (\"target\");\n\n                                          // create link\n                                          __process_flowElements_inFlow.setSrc( process);\n\n\n                                          // create link\n                                          __process_flowElements_outFlow.setSrc( process);\n\n\n                                          // create link\n                                          __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n                                          // create link\n                                          __process_flowElements_exConvGateway.setSrc( process);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(process);\n\n\n                                          // create link\n                                          __exConvGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                                          // create link\n                                          __inFlow_targetRef_exConvGateway.setSrc( inFlow);\n\n\n                                          // create link\n                                          __inFlowToStep_source_inFlow.setTrg( inFlow);\n\n\n                                          // create link\n                                          __exConvGateway_outgoing_outFlow.setSrc( exConvGateway);\n\n\n                                          // create link\n                                          __exConvGateway_incoming_inFlow.setSrc( exConvGateway);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(exConvGateway);\n\n\n                                          // create link\n                                          __outFlow_sourceRef_exConvGateway.setTrg( exConvGateway);\n\n\n                                          // create link\n                                          __inFlow_targetRef_exConvGateway.setTrg( exConvGateway);\n\n\n                                          // create link\n                                          __process_flowElements_exConvGateway.setTrg( exConvGateway);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                                          // create link\n                                          __exConvGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                                          // create link\n                                          __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                                          // create link\n                                          __outFlow_sourceRef_exConvGateway.setSrc( outFlow);\n\n\n                                          // create link\n                                          __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                                          // create link\n                                          __flow_steps_step.setSrc( flow);\n\n\n                                          // create link\n                                          __alt_ref_flow.setTrg( flow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                          // create link\n                                          __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                                          // create link\n                                          __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(step);\n\n\n                                          // create link\n                                          __inFlowToStep_target_step.setTrg( step);\n\n\n                                          // create link\n                                          __flow_steps_step.setTrg( step);\n\n\n                                          // create link\n                                          __inFlowToStep_source_inFlow.setSrc( inFlowToStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(inFlowToStep);\n\n\n                                          // create link\n                                          __inFlowToStep_target_step.setSrc( inFlowToStep);\n\n\n                                          // create link\n                                          __exclusiveGatewayToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                                          // create link\n                                          __initFlow_steps_normalStep.setTrg( normalStep);\n\n\n                                          // create link\n                                          __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(alt);\n\n\n                                          // create link\n                                          __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n                                          // create link\n                                          __alt_ref_flow.setSrc( alt);\n\n\n                                          // create link\n                                          __defaultFlowToInitFlow_target_initFlow.setTrg( initFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(initFlow);\n\n\n                                          // create link\n                                          __initFlow_steps_normalStep.setSrc( initFlow);\n\n\n                                          // create link\n                                          __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                                          // create link\n                                          __exclusiveGatewayToNormalStep_source_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                                          // create link\n                                          __exclusiveGateway_default_defaultFlow.setSrc( exclusiveGateway);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(exclusiveGateway);\n\n\n                                          // create link\n                                          __exclusiveGatewayToNormalStep_target_normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n                                          // create link\n                                          __exclusiveGatewayToNormalStep_source_exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(exclusiveGatewayToNormalStep);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(defaultFlow);\n\n\n                                          // create link\n                                          __exclusiveGateway_default_defaultFlow.setTrg( defaultFlow);\n\n\n                                          // create link\n                                          __defaultFlowToInitFlow_source_defaultFlow.setTrg( defaultFlow);\n\n\n                                          // create link\n                                          __defaultFlowToInitFlow_target_initFlow.setSrc( defaultFlowToInitFlow);\n\n\n                                          // create link\n                                          isApplicableMatch.getAllContextElements().add(defaultFlowToInitFlow);\n\n\n                                          // create link\n                                          __defaultFlowToInitFlow_source_defaultFlow.setSrc( defaultFlowToInitFlow);\n\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_target_step,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exConvGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_stepAlternative_alt,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_source_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_flow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exclusiveGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlowToInitFlow_source_defaultFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGatewayToNormalStep_source_exclusiveGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlowToInitFlow_target_initFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGatewayToNormalStep_target_normalStep,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__initFlow_steps_normalStep,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_default_defaultFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exConvGateway_outgoing_outFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_exConvGateway,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exConvGateway_incoming_inFlow,\"allContextElements\");\n\n                                          // create link\n                                          org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_exConvGateway,\"allContextElements\");\n                                          // story node \'solve CSP\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,inFlow,exConvGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,normalStep,alt,initFlow,exclusiveGateway,exclusiveGatewayToNormalStep,defaultFlow,defaultFlowToInitFlow));\n\n                                             // ensure correct type and really bound of object csp\n                                             JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                             csp = (CSP) _TmpObject;\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          // statement node \'check CSP\'\n                                          fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                                          if (fujaba__Success)\n                                          {\n                                             // story node \'add match to rule result\'\n                                             try \n                                             {\n                                                fujaba__Success = false; \n\n                                                // check object isApplicableMatch is really bound\n                                                JavaSDM.ensure ( isApplicableMatch != null );\n                                                // check object ruleresult is really bound\n                                                JavaSDM.ensure ( ruleresult != null );\n                                                // assign attribute ruleresult\n                                                ruleresult.setSuccess (true);\n                                                // assign attribute isApplicableMatch\n                                                isApplicableMatch.setRuleName (\"ExclusiveConvergingGatewayRule\");\n\n                                                // create link\n                                                isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                                fujaba__Success = true;\n                                             }\n                                             catch ( JavaSDMException fujaba__InternalException )\n                                             {\n                                                fujaba__Success = false;\n                                             }\n\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n                                    }\n                                    JavaSDM.ensure (fujaba__Success);\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"exConvGateway\", exConvGateway);\nmatch.registerObject(\"outFlow\", outFlow);\nmatch.registerObject(\"exclusiveGateway\", exclusiveGateway);\nmatch.registerObject(\"defaultFlow\", defaultFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exConvGateway,
			SequenceFlow outFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow defaultFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_exConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exConvGateway.gatewayDirection\", true, csp);\r\nvar_exConvGateway_gatewayDirection.setValue(exConvGateway.getGatewayDirection());\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", true, csp);\r\nvar_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();EqGatewayDirection eqGatewayDirection_0 = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eqGatewayDirection_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exConvGateway_gatewayDirection,literal0);\r\neqGatewayDirection_0.setRuleName(\"\");\r\neqGatewayDirection_0.solve(var_exclusiveGateway_gatewayDirection,literal1);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ExclusiveGateway exConvGateway,
			SequenceFlow outFlow, ExclusiveGateway exclusiveGateway,
			SequenceFlow defaultFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"exConvGateway\",exConvGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"initFlow\",initFlow);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"exclusiveGatewayToNormalStep\",exclusiveGatewayToNormalStep);\r\nisApplicableMatch.registerObject(\"defaultFlow\",defaultFlow);\r\nisApplicableMatch.registerObject(\"defaultFlowToInitFlow\",defaultFlowToInitFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			ExclusiveGateway exConvGateway, SequenceFlow outFlow,
			AlternativeFlow flow, SequenceFlowToUCFlow inFlowToFlow, Step step,
			SequenceFlowToStep inFlowToStep, NormalStep normalStep,
			AlternativeFlowAlternative alt, Flow initFlow,
			ExclusiveGateway exclusiveGateway,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			SequenceFlow defaultFlow, SequenceFlowToUCFlow defaultFlowToInitFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"exConvGateway\", exConvGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"inFlowToStep\", inFlowToStep);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"exConvGatewayToNormalStep\", exConvGatewayToNormalStep);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"initFlow\", initFlow);\nruleresult.registerObject(\"outFlowToInitFlow\", outFlowToInitFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"defaultFlow\", defaultFlow);\nruleresult.registerObject(\"defaultFlowToInitFlow\", defaultFlowToInitFlow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject exConvGateway, EObject outFlow,
			EObject flow, EObject inFlowToFlow, EObject step,
			EObject inFlowToStep, EObject normalStep,
			EObject exConvGatewayToNormalStep, EObject alt, EObject initFlow,
			EObject outFlowToInitFlow, EObject outFlowToNormalStep,
			EObject exclusiveGateway, EObject exclusiveGatewayToNormalStep,
			EObject defaultFlow, EObject defaultFlowToInitFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"exConvGateway\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exConvGateway_default_502492 = null;\n      FlowElementsContainer __DEC_exConvGateway_flowElements_500789 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_59079 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_207790 = null;\n      ExclusiveGateway __DEC_outFlow_default_207790 = null;\n      Iterator fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_736200 = null;\n      SequenceFlow __DEC_exConvGateway_targetRef_736200 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exConvGateway = null;\n      SequenceFlow outFlow = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // iterate to-many link flowElements from process to exclusiveGateway\n         fujaba__Success = false;\n\n         fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n               // bind object\n               defaultFlow = exclusiveGateway.getDefault ();\n\n               // check object defaultFlow is really bound\n               JavaSDM.ensure ( defaultFlow != null );\n\n               // bind object\n               _TmpObject = _edge_flowElements.getTrg ();\n\n               // ensure correct type and really bound of object outFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               outFlow = (SequenceFlow) _TmpObject;\n\n               // check isomorphic binding between objects outFlow and defaultFlow \n               JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // bind object\n               _TmpObject = outFlow.getSourceRef ();\n\n               // ensure correct type and really bound of object exConvGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exConvGateway = (ExclusiveGateway) _TmpObject;\n\n               // check isomorphic binding between objects exclusiveGateway and exConvGateway \n               JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n               // check link flowElements from exConvGateway to process\n               JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n               ));\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and defaultFlow \n                     JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link incoming from inFlow to exConvGateway\n                     JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exConvGateway_default_502492 = exConvGateway.getDefault ();\n\n                           // check object __DEC_exConvGateway_default_502492 is really bound\n                           JavaSDM.ensure ( __DEC_exConvGateway_default_502492 != null );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_502492 and defaultFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_502492.equals (defaultFlow) );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_502492 and inFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_502492.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_502492 and outFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_502492.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exConvGateway_flowElements_500789 = exConvGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exConvGateway.eContainer() : null;\n\n                           // check object __DEC_exConvGateway_flowElements_500789 is really bound\n                           JavaSDM.ensure ( __DEC_exConvGateway_flowElements_500789 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exConvGateway_flowElements_500789.getFlowElements().contains(exConvGateway));\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_flowElements_500789 and process \n                           JavaSDM.ensure ( !__DEC_exConvGateway_flowElements_500789.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_59079 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_59079 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_59079 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_59079.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_59079 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_59079.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exConvGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_207790\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_207790 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_207790.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_207790 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_207790.next ();\n\n                                 // check object __DEC_outFlow_default_207790 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_207790 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_207790 and exConvGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_207790.equals (exConvGateway) );\n\n                                 // check isomorphic binding between objects __DEC_outFlow_default_207790 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_207790.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from exConvGateway to __DEC_exConvGateway_targetRef_736200\n                           fujaba__Success = false;\n\n                           fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_736200 = new ArrayList(exConvGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_736200.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exConvGateway_targetRef_736200 = (SequenceFlow) fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_736200.next ();\n\n                                 // check object __DEC_exConvGateway_targetRef_736200 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_targetRef_736200 != null );\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_736200 and defaultFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_736200.equals (defaultFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_736200 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_736200.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_736200 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_736200.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object defaultFlow is really bound\n                        JavaSDM.ensure ( defaultFlow != null );\n                        // check object exConvGateway is really bound\n                        JavaSDM.ensure ( exConvGateway != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects inFlow and defaultFlow \n                        JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                        // check isomorphic binding between objects outFlow and defaultFlow \n                        JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                        // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                        JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to defaultFlow\n                        JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link default from exConvGateway to defaultFlow\n                        JavaSDM.ensure (!(defaultFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exConvGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exConvGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exConvGateway to process\n                        JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from defaultFlow to exConvGateway\n                        JavaSDM.ensure (!(exConvGateway.equals (defaultFlow.getTargetRef ()\n                        )));\n\n                        // check link incoming from outFlow to exConvGateway\n                        JavaSDM.ensure (!(exConvGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link trg from _edge_flowElements to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_181(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exConvGateway_default_156446 = null;\n      FlowElementsContainer __DEC_exConvGateway_flowElements_808189 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_206071 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_282256 = null;\n      ExclusiveGateway __DEC_outFlow_default_282256 = null;\n      Iterator fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_589490 = null;\n      SequenceFlow __DEC_exConvGateway_targetRef_589490 = null;\n      Match match = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exConvGateway = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link flowElements from exConvGateway to process\n         JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check link incoming from inFlow to exConvGateway\n               JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link outgoing from outFlow to exConvGateway\n                     JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link flowElements from process to exclusiveGateway\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n                     while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n                           // ensure correct type and really bound of object exclusiveGateway\n                           JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n                           exclusiveGateway = (ExclusiveGateway) _TmpObject;\n                           // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                           JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                           // bind object\n                           defaultFlow = exclusiveGateway.getDefault ();\n\n                           // check object defaultFlow is really bound\n                           JavaSDM.ensure ( defaultFlow != null );\n\n                           // check isomorphic binding between objects inFlow and defaultFlow \n                           JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                           // check isomorphic binding between objects outFlow and defaultFlow \n                           JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exConvGateway_default_156446 = exConvGateway.getDefault ();\n\n                                 // check object __DEC_exConvGateway_default_156446 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_default_156446 != null );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_156446 and defaultFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_156446.equals (defaultFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_156446 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_156446.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_156446 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_156446.equals (outFlow) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exConvGateway_flowElements_808189 = exConvGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exConvGateway.eContainer() : null;\n\n                                 // check object __DEC_exConvGateway_flowElements_808189 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_flowElements_808189 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exConvGateway_flowElements_808189.getFlowElements().contains(exConvGateway));\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_flowElements_808189 and process \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_flowElements_808189.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_206071 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_206071 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_206071 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_206071.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_206071 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_206071.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link flowNodeRefs from exConvGateway\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_282256\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_282256 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_282256.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_282256 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_282256.next ();\n\n                                       // check object __DEC_outFlow_default_282256 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_282256 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_282256 and exConvGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_282256.equals (exConvGateway) );\n\n                                       // check isomorphic binding between objects __DEC_outFlow_default_282256 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_282256.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exConvGateway to __DEC_exConvGateway_targetRef_589490\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_589490 = new ArrayList(exConvGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_589490.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exConvGateway_targetRef_589490 = (SequenceFlow) fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_589490.next ();\n\n                                       // check object __DEC_exConvGateway_targetRef_589490 is really bound\n                                       JavaSDM.ensure ( __DEC_exConvGateway_targetRef_589490 != null );\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_589490 and defaultFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_589490.equals (defaultFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_589490 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_589490.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_589490 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_589490.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flowElements is really bound\n                              JavaSDM.ensure ( _edge_flowElements != null );\n                              // check object defaultFlow is really bound\n                              JavaSDM.ensure ( defaultFlow != null );\n                              // check object exConvGateway is really bound\n                              JavaSDM.ensure ( exConvGateway != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects inFlow and defaultFlow \n                              JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                              // check isomorphic binding between objects outFlow and defaultFlow \n                              JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                              // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                              JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link default from exConvGateway to defaultFlow\n                              JavaSDM.ensure (!(defaultFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exConvGateway to inFlow\n                              JavaSDM.ensure (!(inFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exConvGateway to outFlow\n                              JavaSDM.ensure (!(outFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                              )));\n\n                              // check link flowElements from exConvGateway to process\n                              JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from defaultFlow to exConvGateway\n                              JavaSDM.ensure (!(exConvGateway.equals (defaultFlow.getTargetRef ()\n                              )));\n\n                              // check link incoming from outFlow to exConvGateway\n                              JavaSDM.ensure (!(exConvGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link outgoing from outFlow to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_flowElements to process\n                              JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                              ));\n\n                              // check link trg from _edge_flowElements to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (_edge_flowElements.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_182(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exConvGateway_default_456647 = null;\n      FlowElementsContainer __DEC_exConvGateway_flowElements_380859 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_816963 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_861378 = null;\n      ExclusiveGateway __DEC_outFlow_default_861378 = null;\n      Iterator fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_244359 = null;\n      SequenceFlow __DEC_exConvGateway_targetRef_244359 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      ExclusiveGateway exConvGateway = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link flowElements from exConvGateway to process\n         JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n         ));\n\n         // check link incoming from inFlow to exConvGateway\n         JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to exclusiveGateway\n         fujaba__Success = false;\n\n         fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n               // check isomorphic binding between objects exclusiveGateway and exConvGateway \n               JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n               // bind object\n               defaultFlow = exclusiveGateway.getDefault ();\n\n               // check object defaultFlow is really bound\n               JavaSDM.ensure ( defaultFlow != null );\n\n               // check isomorphic binding between objects inFlow and defaultFlow \n               JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and defaultFlow \n                     JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link outgoing from outFlow to exConvGateway\n                     JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exConvGateway_default_456647 = exConvGateway.getDefault ();\n\n                           // check object __DEC_exConvGateway_default_456647 is really bound\n                           JavaSDM.ensure ( __DEC_exConvGateway_default_456647 != null );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_456647 and defaultFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_456647.equals (defaultFlow) );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_456647 and inFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_456647.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_456647 and outFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_456647.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exConvGateway_flowElements_380859 = exConvGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exConvGateway.eContainer() : null;\n\n                           // check object __DEC_exConvGateway_flowElements_380859 is really bound\n                           JavaSDM.ensure ( __DEC_exConvGateway_flowElements_380859 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exConvGateway_flowElements_380859.getFlowElements().contains(exConvGateway));\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_flowElements_380859 and process \n                           JavaSDM.ensure ( !__DEC_exConvGateway_flowElements_380859.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_816963 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_816963 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_816963 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_816963.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_816963 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_816963.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exConvGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_861378\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_861378 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_861378.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_861378 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_861378.next ();\n\n                                 // check object __DEC_outFlow_default_861378 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_861378 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_861378 and exConvGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_861378.equals (exConvGateway) );\n\n                                 // check isomorphic binding between objects __DEC_outFlow_default_861378 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_861378.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from exConvGateway to __DEC_exConvGateway_targetRef_244359\n                           fujaba__Success = false;\n\n                           fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_244359 = new ArrayList(exConvGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_244359.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exConvGateway_targetRef_244359 = (SequenceFlow) fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_244359.next ();\n\n                                 // check object __DEC_exConvGateway_targetRef_244359 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_targetRef_244359 != null );\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_244359 and defaultFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_244359.equals (defaultFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_244359 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_244359.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_244359 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_244359.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object defaultFlow is really bound\n                        JavaSDM.ensure ( defaultFlow != null );\n                        // check object exConvGateway is really bound\n                        JavaSDM.ensure ( exConvGateway != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects inFlow and defaultFlow \n                        JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                        // check isomorphic binding between objects outFlow and defaultFlow \n                        JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                        // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                        JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to defaultFlow\n                        JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link default from exConvGateway to defaultFlow\n                        JavaSDM.ensure (!(defaultFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exConvGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exConvGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exConvGateway to process\n                        JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from defaultFlow to exConvGateway\n                        JavaSDM.ensure (!(exConvGateway.equals (defaultFlow.getTargetRef ()\n                        )));\n\n                        // check link incoming from outFlow to exConvGateway\n                        JavaSDM.ensure (!(exConvGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_targetRef to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_183(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exConvGateway_default_885553 = null;\n      FlowElementsContainer __DEC_exConvGateway_flowElements_314078 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_171428 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_722477 = null;\n      ExclusiveGateway __DEC_outFlow_default_722477 = null;\n      Iterator fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_936726 = null;\n      SequenceFlow __DEC_exConvGateway_targetRef_936726 = null;\n      Match match = null;\n      Iterator fujaba__IterExConvGatewayTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterExConvGatewayToOutFlow = null;\n      SequenceFlow outFlow = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      ExclusiveGateway exConvGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = exConvGateway.eContainer() instanceof Process ? (Process) exConvGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exConvGateway));\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link incoming from inFlow to exConvGateway\n         JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowElements from process to exclusiveGateway\n         fujaba__Success = false;\n\n         fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n               // check isomorphic binding between objects exclusiveGateway and exConvGateway \n               JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n               // bind object\n               defaultFlow = exclusiveGateway.getDefault ();\n\n               // check object defaultFlow is really bound\n               JavaSDM.ensure ( defaultFlow != null );\n\n               // check isomorphic binding between objects inFlow and defaultFlow \n               JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n               // iterate to-many link outgoing from exConvGateway to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterExConvGatewayToOutFlow = new ArrayList(exConvGateway.getOutgoing()).iterator ();\n\n               while ( fujaba__IterExConvGatewayToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     outFlow = (SequenceFlow) fujaba__IterExConvGatewayToOutFlow.next ();\n\n                     // check object outFlow is really bound\n                     JavaSDM.ensure ( outFlow != null );\n                     // check isomorphic binding between objects outFlow and defaultFlow \n                     JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // iterate to-many link trg from exConvGateway to _edge_targetRef\n                     fujaba__Success = false;\n\n                     fujaba__IterExConvGatewayTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterExConvGatewayTo_edge_targetRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_targetRef = (EMoflonEdge) fujaba__IterExConvGatewayTo_edge_targetRef.next ();\n\n                           // check object _edge_targetRef is really bound\n                           JavaSDM.ensure ( _edge_targetRef != null );\n                           // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                           JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                           // check link src from _edge_targetRef to inFlow\n                           JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exConvGateway_default_885553 = exConvGateway.getDefault ();\n\n                                 // check object __DEC_exConvGateway_default_885553 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_default_885553 != null );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_885553 and defaultFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_885553.equals (defaultFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_885553 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_885553.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_885553 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_885553.equals (outFlow) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exConvGateway_flowElements_314078 = exConvGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exConvGateway.eContainer() : null;\n\n                                 // check object __DEC_exConvGateway_flowElements_314078 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_flowElements_314078 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exConvGateway_flowElements_314078.getFlowElements().contains(exConvGateway));\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_flowElements_314078 and process \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_flowElements_314078.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_171428 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_171428 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_171428 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_171428.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_171428 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_171428.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link flowNodeRefs from exConvGateway\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_722477\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_722477 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_722477.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_722477 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_722477.next ();\n\n                                       // check object __DEC_outFlow_default_722477 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_722477 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_722477 and exConvGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_722477.equals (exConvGateway) );\n\n                                       // check isomorphic binding between objects __DEC_outFlow_default_722477 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_722477.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exConvGateway to __DEC_exConvGateway_targetRef_936726\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_936726 = new ArrayList(exConvGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_936726.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exConvGateway_targetRef_936726 = (SequenceFlow) fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_936726.next ();\n\n                                       // check object __DEC_exConvGateway_targetRef_936726 is really bound\n                                       JavaSDM.ensure ( __DEC_exConvGateway_targetRef_936726 != null );\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_936726 and defaultFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_936726.equals (defaultFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_936726 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_936726.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_936726 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_936726.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_incoming is really bound\n                              JavaSDM.ensure ( _edge_incoming != null );\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object defaultFlow is really bound\n                              JavaSDM.ensure ( defaultFlow != null );\n                              // check object exConvGateway is really bound\n                              JavaSDM.ensure ( exConvGateway != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                              JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                              // check isomorphic binding between objects inFlow and defaultFlow \n                              JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                              // check isomorphic binding between objects outFlow and defaultFlow \n                              JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                              // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                              JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link default from exConvGateway to defaultFlow\n                              JavaSDM.ensure (!(defaultFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exConvGateway to inFlow\n                              JavaSDM.ensure (!(inFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exConvGateway to outFlow\n                              JavaSDM.ensure (!(outFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                              )));\n\n                              // check link flowElements from exConvGateway to process\n                              JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from defaultFlow to exConvGateway\n                              JavaSDM.ensure (!(exConvGateway.equals (defaultFlow.getTargetRef ()\n                              )));\n\n                              // check link incoming from outFlow to exConvGateway\n                              JavaSDM.ensure (!(exConvGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link outgoing from outFlow to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_incoming to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (_edge_incoming.getSrc ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_incoming to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                              ));\n\n                              // check link trg from _edge_targetRef to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_184(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exConvGateway_default_911118 = null;\n      FlowElementsContainer __DEC_exConvGateway_flowElements_50531 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_43620 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_841214 = null;\n      ExclusiveGateway __DEC_outFlow_default_841214 = null;\n      Iterator fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_721947 = null;\n      SequenceFlow __DEC_exConvGateway_targetRef_721947 = null;\n      Match match = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ExclusiveGateway exConvGateway = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n\n         // check link flowElements from exConvGateway to process\n         JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exConvGateway\n         JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link incoming from inFlow to exConvGateway\n               JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowElements from process to exclusiveGateway\n               fujaba__Success = false;\n\n               fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n                     // ensure correct type and really bound of object exclusiveGateway\n                     JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n                     exclusiveGateway = (ExclusiveGateway) _TmpObject;\n                     // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                     JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                     // bind object\n                     defaultFlow = exclusiveGateway.getDefault ();\n\n                     // check object defaultFlow is really bound\n                     JavaSDM.ensure ( defaultFlow != null );\n\n                     // check isomorphic binding between objects inFlow and defaultFlow \n                     JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                     // check isomorphic binding between objects outFlow and defaultFlow \n                     JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exConvGateway_default_911118 = exConvGateway.getDefault ();\n\n                           // check object __DEC_exConvGateway_default_911118 is really bound\n                           JavaSDM.ensure ( __DEC_exConvGateway_default_911118 != null );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_911118 and defaultFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_911118.equals (defaultFlow) );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_911118 and inFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_911118.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_default_911118 and outFlow \n                           JavaSDM.ensure ( !__DEC_exConvGateway_default_911118.equals (outFlow) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exConvGateway_flowElements_50531 = exConvGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exConvGateway.eContainer() : null;\n\n                           // check object __DEC_exConvGateway_flowElements_50531 is really bound\n                           JavaSDM.ensure ( __DEC_exConvGateway_flowElements_50531 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exConvGateway_flowElements_50531.getFlowElements().contains(exConvGateway));\n\n                           // check isomorphic binding between objects __DEC_exConvGateway_flowElements_50531 and process \n                           JavaSDM.ensure ( !__DEC_exConvGateway_flowElements_50531.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_43620 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_43620 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_43620 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_43620.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_43620 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_43620.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exConvGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_841214\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_841214 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_841214.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_841214 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_841214.next ();\n\n                                 // check object __DEC_outFlow_default_841214 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_841214 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_841214 and exConvGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_841214.equals (exConvGateway) );\n\n                                 // check isomorphic binding between objects __DEC_outFlow_default_841214 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_841214.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from exConvGateway to __DEC_exConvGateway_targetRef_721947\n                           fujaba__Success = false;\n\n                           fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_721947 = new ArrayList(exConvGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_721947.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exConvGateway_targetRef_721947 = (SequenceFlow) fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_721947.next ();\n\n                                 // check object __DEC_exConvGateway_targetRef_721947 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_targetRef_721947 != null );\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_721947 and defaultFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_721947.equals (defaultFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_721947 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_721947.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_targetRef_721947 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_721947.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object defaultFlow is really bound\n                        JavaSDM.ensure ( defaultFlow != null );\n                        // check object exConvGateway is really bound\n                        JavaSDM.ensure ( exConvGateway != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects inFlow and defaultFlow \n                        JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                        // check isomorphic binding between objects outFlow and defaultFlow \n                        JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                        // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                        JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to defaultFlow\n                        JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link default from exConvGateway to defaultFlow\n                        JavaSDM.ensure (!(defaultFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exConvGateway to inFlow\n                        JavaSDM.ensure (!(inFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exConvGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exConvGateway.getDefault ()\n                        )));\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                        )));\n\n                        // check link flowElements from exConvGateway to process\n                        JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from defaultFlow to exConvGateway\n                        JavaSDM.ensure (!(exConvGateway.equals (defaultFlow.getTargetRef ()\n                        )));\n\n                        // check link incoming from outFlow to exConvGateway\n                        JavaSDM.ensure (!(exConvGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to exConvGateway\n                        JavaSDM.ensure (exConvGateway.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_185(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      SequenceFlow __DEC_exConvGateway_default_156763 = null;\n      FlowElementsContainer __DEC_exConvGateway_flowElements_874001 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_288176 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_713169 = null;\n      ExclusiveGateway __DEC_outFlow_default_713169 = null;\n      Iterator fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_496526 = null;\n      SequenceFlow __DEC_exConvGateway_targetRef_496526 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterProcessToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exConvGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object exConvGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exConvGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from exConvGateway to process\n         JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exConvGateway\n         JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to exclusiveGateway\n         fujaba__Success = false;\n\n         fujaba__IterProcessToExclusiveGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToExclusiveGateway.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToExclusiveGateway.next ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n               // check isomorphic binding between objects exclusiveGateway and exConvGateway \n               JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n               // bind object\n               defaultFlow = exclusiveGateway.getDefault ();\n\n               // check object defaultFlow is really bound\n               JavaSDM.ensure ( defaultFlow != null );\n\n               // check isomorphic binding between objects outFlow and defaultFlow \n               JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n               // iterate to-many link flowElements from process to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                     // ensure correct type and really bound of object inFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     inFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects inFlow and defaultFlow \n                     JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link incoming from inFlow to exConvGateway\n                     JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // iterate to-many link src from outFlow to _edge_sourceRef\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                     while ( fujaba__IterOutFlowTo_edge_sourceRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_sourceRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_sourceRef.next ();\n\n                           // check object _edge_sourceRef is really bound\n                           JavaSDM.ensure ( _edge_sourceRef != null );\n                           // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                           JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                           // check link trg from _edge_sourceRef to exConvGateway\n                           JavaSDM.ensure (exConvGateway.equals (_edge_sourceRef.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exConvGateway_default_156763 = exConvGateway.getDefault ();\n\n                                 // check object __DEC_exConvGateway_default_156763 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_default_156763 != null );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_156763 and defaultFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_156763.equals (defaultFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_156763 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_156763.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_default_156763 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_default_156763.equals (outFlow) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_exConvGateway_flowElements_874001 = exConvGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exConvGateway.eContainer() : null;\n\n                                 // check object __DEC_exConvGateway_flowElements_874001 is really bound\n                                 JavaSDM.ensure ( __DEC_exConvGateway_flowElements_874001 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_exConvGateway_flowElements_874001.getFlowElements().contains(exConvGateway));\n\n                                 // check isomorphic binding between objects __DEC_exConvGateway_flowElements_874001 and process \n                                 JavaSDM.ensure ( !__DEC_exConvGateway_flowElements_874001.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_288176 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_288176 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_288176 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_288176.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_288176 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_288176.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link flowNodeRefs from exConvGateway\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exConvGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link default from outFlow to __DEC_outFlow_default_713169\n                                 fujaba__Success = false;\n\n                                 fujaba__IterOutFlowTo__DEC_outFlow_default_713169 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_713169.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_outFlow_default_713169 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_713169.next ();\n\n                                       // check object __DEC_outFlow_default_713169 is really bound\n                                       JavaSDM.ensure ( __DEC_outFlow_default_713169 != null );\n                                       // check isomorphic binding between objects __DEC_outFlow_default_713169 and exConvGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_713169.equals (exConvGateway) );\n\n                                       // check isomorphic binding between objects __DEC_outFlow_default_713169 and exclusiveGateway \n                                       JavaSDM.ensure ( !__DEC_outFlow_default_713169.equals (exclusiveGateway) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from exConvGateway to __DEC_exConvGateway_targetRef_496526\n                                 fujaba__Success = false;\n\n                                 fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_496526 = new ArrayList(exConvGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_496526.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_exConvGateway_targetRef_496526 = (SequenceFlow) fujaba__IterExConvGatewayTo__DEC_exConvGateway_targetRef_496526.next ();\n\n                                       // check object __DEC_exConvGateway_targetRef_496526 is really bound\n                                       JavaSDM.ensure ( __DEC_exConvGateway_targetRef_496526 != null );\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_496526 and defaultFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_496526.equals (defaultFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_496526 and inFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_496526.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_exConvGateway_targetRef_496526 and outFlow \n                                       JavaSDM.ensure ( !__DEC_exConvGateway_targetRef_496526.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_outgoing is really bound\n                              JavaSDM.ensure ( _edge_outgoing != null );\n                              // check object _edge_sourceRef is really bound\n                              JavaSDM.ensure ( _edge_sourceRef != null );\n                              // check object defaultFlow is really bound\n                              JavaSDM.ensure ( defaultFlow != null );\n                              // check object exConvGateway is really bound\n                              JavaSDM.ensure ( exConvGateway != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                              JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                              // check isomorphic binding between objects inFlow and defaultFlow \n                              JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                              // check isomorphic binding between objects outFlow and defaultFlow \n                              JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                              // check isomorphic binding between objects exclusiveGateway and exConvGateway \n                              JavaSDM.ensure ( !exclusiveGateway.equals (exConvGateway) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link default from exConvGateway to defaultFlow\n                              JavaSDM.ensure (!(defaultFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exConvGateway to inFlow\n                              JavaSDM.ensure (!(inFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exConvGateway to outFlow\n                              JavaSDM.ensure (!(outFlow.equals (exConvGateway.getDefault ()\n                              )));\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                              )));\n\n                              // check link flowElements from exConvGateway to process\n                              JavaSDM.ensure (process.equals (exConvGateway.eContainer()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from defaultFlow to exConvGateway\n                              JavaSDM.ensure (!(exConvGateway.equals (defaultFlow.getTargetRef ()\n                              )));\n\n                              // check link incoming from outFlow to exConvGateway\n                              JavaSDM.ensure (!(exConvGateway.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link outgoing from outFlow to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_outgoing to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (_edge_outgoing.getSrc ()\n                              ));\n\n                              // check link src from _edge_sourceRef to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_outgoing to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                              ));\n\n                              // check link trg from _edge_sourceRef to exConvGateway\n                              JavaSDM.ensure (exConvGateway.equals (_edge_sourceRef.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,exConvGateway,outFlow,exclusiveGateway,defaultFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_186(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exConvGateway = null;\n      FlowNodeToStep exConvGatewayToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToInitFlow = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      Iterator fujaba__IterNormalStepToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      Iterator fujaba__IterFlowToStep = null;\n      Step step = null;\n      AlternativeFlow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      Iterator fujaba__IterDefaultFlowToExclusiveGateway = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow defaultFlow = null;\n      Flow initFlow = null;\n      Iterator fujaba__IterDefaultFlowToInitFlowListToDefaultFlowToInitFlow = null;\n      SequenceFlowToUCFlow defaultFlowToInitFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToDefaultFlowToInitFlowList = null;\n      RuleEntryList defaultFlowToInitFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to defaultFlowToInitFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToDefaultFlowToInitFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToDefaultFlowToInitFlowList.hasNext () )\n         {\n            try\n            {\n               defaultFlowToInitFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToDefaultFlowToInitFlowList.next ();\n\n               // check object defaultFlowToInitFlowList is really bound\n               JavaSDM.ensure ( defaultFlowToInitFlowList != null );\n               // iterate to-many link entryObjects from defaultFlowToInitFlowList to defaultFlowToInitFlow\n               fujaba__Success = false;\n\n               fujaba__IterDefaultFlowToInitFlowListToDefaultFlowToInitFlow = new ArrayList(defaultFlowToInitFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterDefaultFlowToInitFlowListToDefaultFlowToInitFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterDefaultFlowToInitFlowListToDefaultFlowToInitFlow.next ();\n\n                     // ensure correct type and really bound of object defaultFlowToInitFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     defaultFlowToInitFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     initFlow = defaultFlowToInitFlow.getTarget ();\n\n                     // check object initFlow is really bound\n                     JavaSDM.ensure ( initFlow != null );\n\n                     // bind object\n                     defaultFlow = defaultFlowToInitFlow.getSource ();\n\n                     // check object defaultFlow is really bound\n                     JavaSDM.ensure ( defaultFlow != null );\n\n                     // iterate to-many link default from defaultFlow to exclusiveGateway\n                     fujaba__Success = false;\n\n                     fujaba__IterDefaultFlowToExclusiveGateway = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(defaultFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( fujaba__IterDefaultFlowToExclusiveGateway.hasNext () )\n                     {\n                        try\n                        {\n                           exclusiveGateway = (ExclusiveGateway) fujaba__IterDefaultFlowToExclusiveGateway.next ();\n\n                           // check object exclusiveGateway is really bound\n                           JavaSDM.ensure ( exclusiveGateway != null );\n                           // bind object\n                           _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n                           // ensure correct type and really bound of object process\n                           JavaSDM.ensure ( _TmpObject instanceof Process );\n                           process = (Process) _TmpObject;\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n                           // iterate to-many link flowElements from process to inFlow\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n                           while ( fujaba__IterProcessToInFlow.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n                                 // ensure correct type and really bound of object inFlow\n                                 JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                                 inFlow = (SequenceFlow) _TmpObject;\n                                 // check isomorphic binding between objects inFlow and defaultFlow \n                                 JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                                 // iterate to-many link source from inFlow to inFlowToStep\n                                 fujaba__Success = false;\n\n                                 fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n                                 while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                                       // check object inFlowToStep is really bound\n                                       JavaSDM.ensure ( inFlowToStep != null );\n                                       // iterate to-many link source from inFlow to inFlowToFlow\n                                       fujaba__Success = false;\n\n                                       fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n                                       while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n                                       {\n                                          try\n                                          {\n                                             inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                                             // check object inFlowToFlow is really bound\n                                             JavaSDM.ensure ( inFlowToFlow != null );\n                                             // check isomorphic binding between objects inFlowToFlow and defaultFlowToInitFlow \n                                             JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlowToInitFlow) );\n\n                                             // bind object\n                                             _TmpObject = inFlowToFlow.getTarget ();\n\n                                             // ensure correct type and really bound of object flow\n                                             JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n                                             flow = (AlternativeFlow) _TmpObject;\n\n                                             // check isomorphic binding between objects initFlow and flow \n                                             JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                                             // iterate to-many link steps from flow to step\n                                             fujaba__Success = false;\n\n                                             fujaba__IterFlowToStep = new ArrayList(flow.getSteps()).iterator ();\n\n                                             while ( fujaba__IterFlowToStep.hasNext () )\n                                             {\n                                                try\n                                                {\n                                                   step = (Step) fujaba__IterFlowToStep.next ();\n\n                                                   // check object step is really bound\n                                                   JavaSDM.ensure ( step != null );\n                                                   // check link target from inFlowToStep to step\n                                                   JavaSDM.ensure (step.equals (inFlowToStep.getTarget ()\n                                                   ));\n\n                                                   // iterate to-many link source from exclusiveGateway to exclusiveGatewayToNormalStep\n                                                   fujaba__Success = false;\n\n                                                   fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n                                                   while ( fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep.hasNext () )\n                                                   {\n                                                      try\n                                                      {\n                                                         exclusiveGatewayToNormalStep = (FlowNodeToStep) fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep.next ();\n\n                                                         // check object exclusiveGatewayToNormalStep is really bound\n                                                         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                                                         // bind object\n                                                         _TmpObject = exclusiveGatewayToNormalStep.getTarget ();\n\n                                                         // ensure correct type and really bound of object normalStep\n                                                         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                                                         normalStep = (NormalStep) _TmpObject;\n\n                                                         // check isomorphic binding between objects step and normalStep \n                                                         JavaSDM.ensure ( !step.equals (normalStep) );\n\n                                                         // check link steps from normalStep to initFlow\n                                                         JavaSDM.ensure (initFlow.equals (normalStep.eContainer()\n                                                         ));\n\n                                                         // iterate to-many link stepAlternative from normalStep to alt\n                                                         fujaba__Success = false;\n\n                                                         fujaba__IterNormalStepToAlt = new ArrayList(normalStep.getStepAlternative()).iterator ();\n\n                                                         while ( fujaba__IterNormalStepToAlt.hasNext () )\n                                                         {\n                                                            try\n                                                            {\n                                                               _TmpObject =  fujaba__IterNormalStepToAlt.next ();\n\n                                                               // ensure correct type and really bound of object alt\n                                                               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n                                                               alt = (AlternativeFlowAlternative) _TmpObject;\n                                                               // check link ref from alt to flow\n                                                               JavaSDM.ensure (flow.equals (alt.getRef ()\n                                                               ));\n\n                                                               // story node \'solve CSP\'\n                                                               try \n                                                               {\n                                                                  fujaba__Success = false; \n\n                                                                  _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,process,inFlow,exConvGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,normalStep,exConvGatewayToNormalStep,alt,initFlow,outFlowToInitFlow,outFlowToNormalStep,exclusiveGateway,exclusiveGatewayToNormalStep,defaultFlow,defaultFlowToInitFlow,ruleResult));\n\n                                                                  // ensure correct type and really bound of object csp\n                                                                  JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                                                  csp = (CSP) _TmpObject;\n                                                                  fujaba__Success = true;\n                                                               }\n                                                               catch ( JavaSDMException fujaba__InternalException )\n                                                               {\n                                                                  fujaba__Success = false;\n                                                               }\n\n                                                               // statement node \'check CSP\'\n                                                               fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                                               if (fujaba__Success)\n                                                               {\n                                                                  // story node \'perform\'\n                                                                  try \n                                                                  {\n                                                                     fujaba__Success = false; \n\n                                                                     // check object alt is really bound\n                                                                     JavaSDM.ensure ( alt != null );\n                                                                     // check object defaultFlow is really bound\n                                                                     JavaSDM.ensure ( defaultFlow != null );\n                                                                     // check object defaultFlowToInitFlow is really bound\n                                                                     JavaSDM.ensure ( defaultFlowToInitFlow != null );\n                                                                     // check object exclusiveGateway is really bound\n                                                                     JavaSDM.ensure ( exclusiveGateway != null );\n                                                                     // check object exclusiveGatewayToNormalStep is really bound\n                                                                     JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                                                                     // check object flow is really bound\n                                                                     JavaSDM.ensure ( flow != null );\n                                                                     // check object inFlow is really bound\n                                                                     JavaSDM.ensure ( inFlow != null );\n                                                                     // check object inFlowToFlow is really bound\n                                                                     JavaSDM.ensure ( inFlowToFlow != null );\n                                                                     // check object inFlowToStep is really bound\n                                                                     JavaSDM.ensure ( inFlowToStep != null );\n                                                                     // check object initFlow is really bound\n                                                                     JavaSDM.ensure ( initFlow != null );\n                                                                     // check object normalStep is really bound\n                                                                     JavaSDM.ensure ( normalStep != null );\n                                                                     // check object process is really bound\n                                                                     JavaSDM.ensure ( process != null );\n                                                                     // check object ruleResult is really bound\n                                                                     JavaSDM.ensure ( ruleResult != null );\n                                                                     // check object step is really bound\n                                                                     JavaSDM.ensure ( step != null );\n                                                                     // check isomorphic binding between objects inFlow and defaultFlow \n                                                                     JavaSDM.ensure ( !inFlow.equals (defaultFlow) );\n\n                                                                     // check isomorphic binding between objects inFlowToFlow and defaultFlowToInitFlow \n                                                                     JavaSDM.ensure ( !inFlowToFlow.equals (defaultFlowToInitFlow) );\n\n                                                                     // check isomorphic binding between objects initFlow and flow \n                                                                     JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                                                                     // check isomorphic binding between objects step and normalStep \n                                                                     JavaSDM.ensure ( !step.equals (normalStep) );\n\n                                                                     // create object outFlow\n                                                                     outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                                                     // create object exConvGateway\n                                                                     exConvGateway = Bpmn2Factory.eINSTANCE.createExclusiveGateway();\n\n                                                                     // create object exConvGatewayToNormalStep\n                                                                     exConvGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                                                     // create object outFlowToInitFlow\n                                                                     outFlowToInitFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                                                     // create object outFlowToNormalStep\n                                                                     outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                                                     // assign attribute exConvGateway\n                                                                     exConvGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"exConvGateway\",\"gatewayDirection\").getValue());\n                                                                     // assign attribute ruleResult\n                                                                     ruleResult.setSuccess (true);\n\n                                                                     // create link\n                                                                     \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                                                     // create link\n                                                                     \tprocess.getFlowElements().add(exConvGateway); // add link\n\n\n                                                                     // create link\n                                                                     exConvGateway.getIncoming().add(inFlow);\n\n\n                                                                     // create link\n                                                                     outFlow.setSourceRef( exConvGateway);\n\n\n                                                                     // create link\n                                                                     exConvGatewayToNormalStep.setSource( exConvGateway);\n\n\n                                                                     // create link\n                                                                     ruleResult.getSourceObjects().add(exConvGateway);\n\n\n                                                                     // create link\n                                                                     ruleResult.getSourceObjects().add(outFlow);\n\n\n                                                                     // create link\n                                                                     outFlowToInitFlow.setSource( outFlow);\n\n\n                                                                     // create link\n                                                                     outFlowToNormalStep.setSource( outFlow);\n\n\n                                                                     // create link\n                                                                     exConvGatewayToNormalStep.setTarget( normalStep);\n\n\n                                                                     // create link\n                                                                     outFlowToNormalStep.setTarget( normalStep);\n\n\n                                                                     // create link\n                                                                     ruleResult.getCorrObjects().add(exConvGatewayToNormalStep);\n\n\n                                                                     // create link\n                                                                     outFlowToInitFlow.setTarget( initFlow);\n\n\n                                                                     // create link\n                                                                     ruleResult.getCorrObjects().add(outFlowToInitFlow);\n\n\n                                                                     // create link\n                                                                     ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n                                                                     fujaba__Success = true;\n                                                                  }\n                                                                  catch ( JavaSDMException fujaba__InternalException )\n                                                                  {\n                                                                     fujaba__Success = false;\n                                                                  }\n\n                                                                  return ruleResult;\n\n                                                               }\n\n                                                               fujaba__Success = true;\n                                                            }\n                                                            catch ( JavaSDMException fujaba__InternalException )\n                                                            {\n                                                               fujaba__Success = false;\n                                                            }\n                                                         }\n                                                         JavaSDM.ensure (fujaba__Success);\n\n\n                                                         fujaba__Success = true;\n                                                      }\n                                                      catch ( JavaSDMException fujaba__InternalException )\n                                                      {\n                                                         fujaba__Success = false;\n                                                      }\n                                                   }\n                                                   JavaSDM.ensure (fujaba__Success);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n                                             }\n                                             JavaSDM.ensure (fujaba__Success);\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n                                       }\n                                       JavaSDM.ensure (fujaba__Success);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToUCFlow defaultFlowToInitFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\nVariable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal1\", true, csp);\r\nliteral1.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", true, csp);\r\nvar_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_exConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exConvGateway.gatewayDirection\", csp);\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();EqGatewayDirection eqGatewayDirection_0 = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eqGatewayDirection_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal1);\r\neqGatewayDirection_0.setRuleName(\"\");\r\neqGatewayDirection_0.solve(var_exConvGateway_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"initFlow\",initFlow);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"exclusiveGatewayToNormalStep\",exclusiveGatewayToNormalStep);\r\nisApplicableMatch.registerObject(\"defaultFlow\",defaultFlow);\r\nisApplicableMatch.registerObject(\"defaultFlowToInitFlow\",defaultFlowToInitFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			ExclusiveGateway exConvGateway, SequenceFlow outFlow,
			AlternativeFlow flow, SequenceFlowToUCFlow inFlowToFlow, Step step,
			SequenceFlowToStep inFlowToStep, NormalStep normalStep,
			FlowNodeToStep exConvGatewayToNormalStep,
			AlternativeFlowAlternative alt, Flow initFlow,
			SequenceFlowToUCFlow outFlowToInitFlow,
			SequenceFlowToStep outFlowToNormalStep,
			ExclusiveGateway exclusiveGateway,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			SequenceFlow defaultFlow,
			SequenceFlowToUCFlow defaultFlowToInitFlow,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ExclusiveConvergingGatewayRule
