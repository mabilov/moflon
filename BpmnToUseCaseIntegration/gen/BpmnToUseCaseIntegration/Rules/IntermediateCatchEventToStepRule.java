/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Intermediate Catch Event To Step Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getIntermediateCatchEventToStepRule()
 * @model
 * @generated
 */
public interface IntermediateCatchEventToStepRule extends AbstractRule,
		IntermediateEventToStepRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __inFlow_targetRef_event = null;\n      EMoflonEdge __event_incoming_inFlow = null;\n      EMoflonEdge __outFlow_sourceRef_event = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __event_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_event = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object event is really bound\n         JavaSDM.ensure ( event != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,event,inFlow,process,outFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object event is really bound\n            JavaSDM.ensure ( event != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __inFlow_targetRef_event\n            __inFlow_targetRef_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __event_incoming_inFlow\n            __event_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_event\n            __outFlow_sourceRef_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __event_outgoing_outFlow\n            __event_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_event\n            __process_flowElements_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_event\n            __process_flowElements_event.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_event\n            __inFlow_targetRef_event.setName (\"targetRef\");\n            // assign attribute __event_incoming_inFlow\n            __event_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __outFlow_sourceRef_event\n            __outFlow_sourceRef_event.setName (\"sourceRef\");\n            // assign attribute __event_outgoing_outFlow\n            __event_outgoing_outFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,event,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_event,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__event_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_event,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__event_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_event,\"toBeTranslatedEdges\");\n\n            // create link\n            __inFlow_targetRef_event.setTrg( event);\n\n\n            // create link\n            __outFlow_sourceRef_event.setTrg( event);\n\n\n            // create link\n            __event_outgoing_outFlow.setSrc( event);\n\n\n            // create link\n            __event_incoming_inFlow.setSrc( event);\n\n\n            // create link\n            __process_flowElements_event.setTrg( event);\n\n\n            // create link\n            __event_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_event.setSrc( inFlow);\n\n\n            // create link\n            __process_flowElements_event.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __event_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_event.setSrc( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object event is really bound\n            JavaSDM.ensure ( event != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,event,inFlow,process,outFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, IntermediateCatchEvent event,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      IntermediateCatchEvent event = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      SequenceFlow outFlow = null;\n      Step prevStep = null;\n      Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      FlowNodeToStep eventToNormalStep = null;\n      NormalStep normalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge eventToNormalStep__target__normalStep = null;\n      EMoflonEdge prevStep__next__normalStep = null;\n      EMoflonEdge normalStep__actor__actor = null;\n      EMoflonEdge __inFlow_targetRef_event = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_event = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge __event_outgoing_outFlow = null;\n      EMoflonEdge eventToNormalStep__source__event = null;\n      EMoflonEdge flow__steps__normalStep = null;\n      EMoflonEdge __process_flowElements_event = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge __event_incoming_inFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"event\"));\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToPrevStep\"));\n\n         // ensure correct type and really bound of object inFlowToPrevStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToPrevStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"prevStep\"));\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object eventToNormalStep\n         eventToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object normalStep\n         normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute normalStep\n         normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n         // assign attribute normalStep\n         normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToFlow.setTarget( flow);\n\n\n         // create link\n         eventToNormalStep.setSource( event);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(prevStep,normalStep,\"next\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(normalStep,actor,\"actor\");\n\n         // create link\n         flow.getSteps().add(normalStep);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         eventToNormalStep.setTarget( normalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object event is really bound\n         JavaSDM.ensure ( event != null );\n         // check object eventToNormalStep is really bound\n         JavaSDM.ensure ( eventToNormalStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,event,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object event is really bound\n         JavaSDM.ensure ( event != null );\n         // check object eventToNormalStep is really bound\n         JavaSDM.ensure ( eventToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToPrevStep is really bound\n         JavaSDM.ensure ( inFlowToPrevStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object prevStep is really bound\n         JavaSDM.ensure ( prevStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects event and actor \n         JavaSDM.ensure ( !event.equals (actor) );\n\n         // check isomorphic binding between objects eventToNormalStep and actor \n         JavaSDM.ensure ( !eventToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and actor \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects prevStep and actor \n         JavaSDM.ensure ( !prevStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects eventToNormalStep and event \n         JavaSDM.ensure ( !eventToNormalStep.equals (event) );\n\n         // check isomorphic binding between objects flow and event \n         JavaSDM.ensure ( !flow.equals (event) );\n\n         // check isomorphic binding between objects inFlow and event \n         JavaSDM.ensure ( !inFlow.equals (event) );\n\n         // check isomorphic binding between objects inFlowToFlow and event \n         JavaSDM.ensure ( !inFlowToFlow.equals (event) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and event \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (event) );\n\n         // check isomorphic binding between objects normalStep and event \n         JavaSDM.ensure ( !normalStep.equals (event) );\n\n         // check isomorphic binding between objects outFlow and event \n         JavaSDM.ensure ( !outFlow.equals (event) );\n\n         // check isomorphic binding between objects outFlowToFlow and event \n         JavaSDM.ensure ( !outFlowToFlow.equals (event) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and event \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (event) );\n\n         // check isomorphic binding between objects prevStep and event \n         JavaSDM.ensure ( !prevStep.equals (event) );\n\n         // check isomorphic binding between objects process and event \n         JavaSDM.ensure ( !process.equals (event) );\n\n         // check isomorphic binding between objects processToActor and event \n         JavaSDM.ensure ( !processToActor.equals (event) );\n\n         // check isomorphic binding between objects flow and eventToNormalStep \n         JavaSDM.ensure ( !flow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and eventToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and eventToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and eventToNormalStep \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and eventToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and eventToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and eventToNormalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and eventToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects prevStep and eventToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects process and eventToNormalStep \n         JavaSDM.ensure ( !process.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and eventToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and flow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects prevStep and flow \n         JavaSDM.ensure ( !prevStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !normalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects prevStep and inFlowToPrevStep \n         JavaSDM.ensure ( !prevStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects process and inFlowToPrevStep \n         JavaSDM.ensure ( !process.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects processToActor and inFlowToPrevStep \n         JavaSDM.ensure ( !processToActor.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and prevStep \n         JavaSDM.ensure ( !process.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and prevStep \n         JavaSDM.ensure ( !processToActor.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object eventToNormalStep__target__normalStep\n         eventToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object prevStep__next__normalStep\n         prevStep__next__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__actor__actor\n         normalStep__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_event\n         __inFlow_targetRef_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_event\n         __outFlow_sourceRef_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __event_outgoing_outFlow\n         __event_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object eventToNormalStep__source__event\n         eventToNormalStep__source__event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__normalStep\n         flow__steps__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_event\n         __process_flowElements_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __event_incoming_inFlow\n         __event_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"IntermediateCatchEventToStepRule\");\n         // assign attribute prevStep__next__normalStep\n         prevStep__next__normalStep.setName (\"next\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __process_flowElements_event\n         __process_flowElements_event.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_event\n         __inFlow_targetRef_event.setName (\"targetRef\");\n         // assign attribute __event_incoming_inFlow\n         __event_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __outFlow_sourceRef_event\n         __outFlow_sourceRef_event.setName (\"sourceRef\");\n         // assign attribute __event_outgoing_outFlow\n         __event_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute normalStep__actor__actor\n         normalStep__actor__actor.setName (\"actor\");\n         // assign attribute eventToNormalStep__source__event\n         eventToNormalStep__source__event.setName (\"source\");\n         // assign attribute eventToNormalStep__target__normalStep\n         eventToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute flow__steps__normalStep\n         flow__steps__normalStep.setName (\"steps\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,prevStep__next__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_event,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_event,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__event_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventToNormalStep__source__event,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_event,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__event_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         __outFlow_sourceRef_event.setTrg( event);\n\n\n         // create link\n         __inFlow_targetRef_event.setTrg( event);\n\n\n         // create link\n         __event_incoming_inFlow.setSrc( event);\n\n\n         // create link\n         __event_outgoing_outFlow.setSrc( event);\n\n\n         // create link\n         __process_flowElements_event.setTrg( event);\n\n\n         // create link\n         eventToNormalStep__source__event.setTrg( event);\n\n\n         // create link\n         __inFlow_targetRef_event.setSrc( inFlow);\n\n\n         // create link\n         __event_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         prevStep__next__normalStep.setSrc( prevStep);\n\n\n         // create link\n         flow__steps__normalStep.setTrg( normalStep);\n\n\n         // create link\n         eventToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         prevStep__next__normalStep.setTrg( normalStep);\n\n\n         // create link\n         normalStep__actor__actor.setSrc( normalStep);\n\n\n         // create link\n         __process_flowElements_event.setSrc( process);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_event.setSrc( outFlow);\n\n\n         // create link\n         __event_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         normalStep__actor__actor.setTrg( actor);\n\n\n         // create link\n         eventToNormalStep__source__event.setSrc( eventToNormalStep);\n\n\n         // create link\n         eventToNormalStep__target__normalStep.setSrc( eventToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         flow__steps__normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,event,inFlow,prevStep,inFlowToPrevStep,normalStep,process,outFlow,actor,processToActor,eventToNormalStep,outFlowToNormalStep,flow,inFlowToFlow,outFlowToFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      IntermediateCatchEvent event = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      EMoflonEdge __outFlow_sourceRef_event = null;\n      EMoflonEdge __inFlow_targetRef_event = null;\n      EMoflonEdge __event_outgoing_outFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __event_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_event = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToPrevStep_source_inFlow = null;\n      EMoflonEdge __inFlowToPrevStep_target_prevStep = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      CSP csp = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Step prevStep = null;\n      Iterator fujaba__IterInFlowToInFlowToPrevStep = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"IntermediateCatchEventToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"event\"));\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from inFlow to inFlowToPrevStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToPrevStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToPrevStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToPrevStep.next ();\n\n                     // check object inFlowToPrevStep is really bound\n                     JavaSDM.ensure ( inFlowToPrevStep != null );\n                     // bind object\n                     prevStep = inFlowToPrevStep.getTarget ();\n\n                     // check object prevStep is really bound\n                     JavaSDM.ensure ( prevStep != null );\n\n                     // iterate to-many link source from process to processToActor\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterProcessToProcessToActor.hasNext () )\n                     {\n                        try\n                        {\n                           processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                           // check object processToActor is really bound\n                           JavaSDM.ensure ( processToActor != null );\n                           // bind object\n                           actor = processToActor.getTarget ();\n\n                           // check object actor is really bound\n                           JavaSDM.ensure ( actor != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // check object event is really bound\n                              JavaSDM.ensure ( event != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object inFlowToPrevStep is really bound\n                              JavaSDM.ensure ( inFlowToPrevStep != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object prevStep is really bound\n                              JavaSDM.ensure ( prevStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToActor is really bound\n                              JavaSDM.ensure ( processToActor != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from event to process\n                              JavaSDM.ensure (process.equals (event.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from inFlowToPrevStep to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToPrevStep.getSource ()\n                              ));\n\n                              // check link source from processToActor to process\n                              JavaSDM.ensure (process.equals (processToActor.getSource ()\n                              ));\n\n                              // check link sourceRef from outFlow to event\n                              JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from inFlowToPrevStep to prevStep\n                              JavaSDM.ensure (prevStep.equals (inFlowToPrevStep.getTarget ()\n                              ));\n\n                              // check link target from processToActor to actor\n                              JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to event\n                              JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // create object __outFlow_sourceRef_event\n                              __outFlow_sourceRef_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_event\n                              __inFlow_targetRef_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __event_outgoing_outFlow\n                              __event_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __event_incoming_inFlow\n                              __event_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_event\n                              __process_flowElements_event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_source_process\n                              __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_target_actor\n                              __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep.setName (\"target\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_event\n                              __process_flowElements_event.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_event\n                              __inFlow_targetRef_event.setName (\"targetRef\");\n                              // assign attribute __event_incoming_inFlow\n                              __event_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __outFlow_sourceRef_event\n                              __outFlow_sourceRef_event.setName (\"sourceRef\");\n                              // assign attribute __event_outgoing_outFlow\n                              __event_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __processToActor_source_process\n                              __processToActor_source_process.setName (\"source\");\n                              // assign attribute __processToActor_target_actor\n                              __processToActor_target_actor.setName (\"target\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n\n                              // create link\n                              __outFlow_sourceRef_event.setTrg( event);\n\n\n                              // create link\n                              __inFlow_targetRef_event.setTrg( event);\n\n\n                              // create link\n                              __event_outgoing_outFlow.setSrc( event);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(event);\n\n\n                              // create link\n                              __event_incoming_inFlow.setSrc( event);\n\n\n                              // create link\n                              __process_flowElements_event.setTrg( event);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_event.setSrc( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __event_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setTrg( prevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(prevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_event.setSrc( process);\n\n\n                              // create link\n                              __processToActor_source_process.setTrg( process);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __event_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __outFlow_sourceRef_event.setSrc( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __processToActor_target_actor.setTrg( actor);\n\n\n                              // create link\n                              __processToActor_source_process.setSrc( processToActor);\n\n\n                              // create link\n                              __processToActor_target_actor.setSrc( processToActor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__event_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_target_prevStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_event,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_event,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_event,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__event_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,event,inFlow,prevStep,inFlowToPrevStep,process,outFlow,actor,processToActor,flow,inFlowToFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"IntermediateCatchEventToStepRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"event\", event);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, IntermediateCatchEvent event,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, IntermediateCatchEvent event,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(\"event.id\", true, csp);\r\nvar_event_id.setValue(event.getId());\r\nVariable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(\"event.name\", true, csp);\r\nvar_event_name.setValue(event.getName());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_event_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_event_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"event\",event);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"prevStep\",prevStep);\r\nisApplicableMatch.registerObject(\"inFlowToPrevStep\",inFlowToPrevStep);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			IntermediateCatchEvent event, SequenceFlow inFlow, Step prevStep,
			SequenceFlowToStep inFlowToPrevStep, bpmn2.Process process,
			SequenceFlow outFlow, Actor actor, ProcessToActor processToActor,
			Flow flow, SequenceFlowToUCFlow inFlowToFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"event\", event);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"prevStep\", prevStep);\nruleresult.registerObject(\"inFlowToPrevStep\", inFlowToPrevStep);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\nruleresult.registerObject(\"eventToNormalStep\", eventToNormalStep);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject event,
			EObject inFlow, EObject prevStep, EObject inFlowToPrevStep,
			EObject normalStep, EObject process, EObject outFlow,
			EObject actor, EObject processToActor, EObject eventToNormalStep,
			EObject outFlowToNormalStep, EObject flow, EObject inFlowToFlow,
			EObject outFlowToFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"event\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __prevStep_next_normalStep = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object prevStep is really bound\n         JavaSDM.ensure ( prevStep != null );\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,prevStep,normalStep,actor,flow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object prevStep is really bound\n            JavaSDM.ensure ( prevStep != null );\n            // check isomorphic binding between objects prevStep and normalStep \n            JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n            // create object __prevStep_next_normalStep\n            __prevStep_next_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __normalStep_actor_actor\n            __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __prevStep_next_normalStep\n            __prevStep_next_normalStep.setName (\"next\");\n            // assign attribute __normalStep_actor_actor\n            __normalStep_actor_actor.setName (\"actor\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__prevStep_next_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            __prevStep_next_normalStep.setSrc( prevStep);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __normalStep_actor_actor.setSrc( normalStep);\n\n\n            // create link\n            __prevStep_next_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __normalStep_actor_actor.setTrg( actor);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object prevStep is really bound\n            JavaSDM.ensure ( prevStep != null );\n            // check isomorphic binding between objects prevStep and normalStep \n            JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,prevStep,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,prevStep,normalStep,actor,flow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Step prevStep,
			NormalStep normalStep, Actor actor, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      NormalStep normalStep = null;\n      Step prevStep = null;\n      Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      IntermediateCatchEvent event = null;\n      FlowNodeToStep eventToNormalStep = null;\n      SequenceFlow outFlow = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge eventToNormalStep__target__normalStep = null;\n      EMoflonEdge eventToNormalStep__source__event = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge inFlow__targetRef__event = null;\n      EMoflonEdge event__outgoing__outFlow = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge event__incoming__inFlow = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge process__flowElements__event = null;\n      EMoflonEdge outFlow__sourceRef__event = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __prevStep_next_normalStep = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToPrevStep\"));\n\n         // ensure correct type and really bound of object inFlowToPrevStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToPrevStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"prevStep\"));\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object event\n         event = Bpmn2Factory.eINSTANCE.createIntermediateCatchEvent();\n\n         // create object eventToNormalStep\n         eventToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute event\n         event.setId ((java.lang.String)csp.getAttributeVariable(\"event\",\"id\").getValue());\n         // assign attribute event\n         event.setName ((java.lang.String)csp.getAttributeVariable(\"event\",\"name\").getValue());\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         eventToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToFlow.setTarget( flow);\n\n\n         // create link\n         inFlow.setTargetRef( event);\n\n\n         // create link\n         eventToNormalStep.setSource( event);\n\n\n         // create link\n         process.getFlowElements().add(event);\n\n\n         // create link\n         outFlow.setSourceRef( event);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object event is really bound\n         JavaSDM.ensure ( event != null );\n         // check object eventToNormalStep is really bound\n         JavaSDM.ensure ( eventToNormalStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,event,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object event is really bound\n         JavaSDM.ensure ( event != null );\n         // check object eventToNormalStep is really bound\n         JavaSDM.ensure ( eventToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToPrevStep is really bound\n         JavaSDM.ensure ( inFlowToPrevStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object prevStep is really bound\n         JavaSDM.ensure ( prevStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects event and actor \n         JavaSDM.ensure ( !event.equals (actor) );\n\n         // check isomorphic binding between objects eventToNormalStep and actor \n         JavaSDM.ensure ( !eventToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and actor \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects prevStep and actor \n         JavaSDM.ensure ( !prevStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects eventToNormalStep and event \n         JavaSDM.ensure ( !eventToNormalStep.equals (event) );\n\n         // check isomorphic binding between objects flow and event \n         JavaSDM.ensure ( !flow.equals (event) );\n\n         // check isomorphic binding between objects inFlow and event \n         JavaSDM.ensure ( !inFlow.equals (event) );\n\n         // check isomorphic binding between objects inFlowToFlow and event \n         JavaSDM.ensure ( !inFlowToFlow.equals (event) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and event \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (event) );\n\n         // check isomorphic binding between objects normalStep and event \n         JavaSDM.ensure ( !normalStep.equals (event) );\n\n         // check isomorphic binding between objects outFlow and event \n         JavaSDM.ensure ( !outFlow.equals (event) );\n\n         // check isomorphic binding between objects outFlowToFlow and event \n         JavaSDM.ensure ( !outFlowToFlow.equals (event) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and event \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (event) );\n\n         // check isomorphic binding between objects prevStep and event \n         JavaSDM.ensure ( !prevStep.equals (event) );\n\n         // check isomorphic binding between objects process and event \n         JavaSDM.ensure ( !process.equals (event) );\n\n         // check isomorphic binding between objects processToActor and event \n         JavaSDM.ensure ( !processToActor.equals (event) );\n\n         // check isomorphic binding between objects flow and eventToNormalStep \n         JavaSDM.ensure ( !flow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and eventToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and eventToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and eventToNormalStep \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and eventToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and eventToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and eventToNormalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and eventToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects prevStep and eventToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects process and eventToNormalStep \n         JavaSDM.ensure ( !process.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and eventToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (eventToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and flow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects prevStep and flow \n         JavaSDM.ensure ( !prevStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !normalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects prevStep and inFlowToPrevStep \n         JavaSDM.ensure ( !prevStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects process and inFlowToPrevStep \n         JavaSDM.ensure ( !process.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects processToActor and inFlowToPrevStep \n         JavaSDM.ensure ( !processToActor.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and prevStep \n         JavaSDM.ensure ( !process.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and prevStep \n         JavaSDM.ensure ( !processToActor.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object eventToNormalStep__target__normalStep\n         eventToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object eventToNormalStep__source__event\n         eventToNormalStep__source__event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object inFlow__targetRef__event\n         inFlow__targetRef__event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object event__outgoing__outFlow\n         event__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object event__incoming__inFlow\n         event__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_actor_actor\n         __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__event\n         process__flowElements__event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__event\n         outFlow__sourceRef__event = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_normalStep\n         __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __prevStep_next_normalStep\n         __prevStep_next_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"IntermediateCatchEventToStepRule\");\n         // assign attribute __prevStep_next_normalStep\n         __prevStep_next_normalStep.setName (\"next\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute process__flowElements__event\n         process__flowElements__event.setName (\"flowElements\");\n         // assign attribute inFlow__targetRef__event\n         inFlow__targetRef__event.setName (\"targetRef\");\n         // assign attribute event__incoming__inFlow\n         event__incoming__inFlow.setName (\"incoming\");\n         // assign attribute outFlow__sourceRef__event\n         outFlow__sourceRef__event.setName (\"sourceRef\");\n         // assign attribute event__outgoing__outFlow\n         event__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute __normalStep_actor_actor\n         __normalStep_actor_actor.setName (\"actor\");\n         // assign attribute eventToNormalStep__source__event\n         eventToNormalStep__source__event.setName (\"source\");\n         // assign attribute eventToNormalStep__target__normalStep\n         eventToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute __flow_steps_normalStep\n         __flow_steps_normalStep.setName (\"steps\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,eventToNormalStep__source__event,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__event,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,event__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,event__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__event,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__event,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__prevStep_next_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         outFlow__sourceRef__event.setTrg( event);\n\n\n         // create link\n         event__incoming__inFlow.setSrc( event);\n\n\n         // create link\n         process__flowElements__event.setTrg( event);\n\n\n         // create link\n         event__outgoing__outFlow.setSrc( event);\n\n\n         // create link\n         eventToNormalStep__source__event.setTrg( event);\n\n\n         // create link\n         inFlow__targetRef__event.setTrg( event);\n\n\n         // create link\n         inFlow__targetRef__event.setSrc( inFlow);\n\n\n         // create link\n         event__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         __prevStep_next_normalStep.setSrc( prevStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setTrg( normalStep);\n\n\n         // create link\n         __prevStep_next_normalStep.setTrg( normalStep);\n\n\n         // create link\n         eventToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __normalStep_actor_actor.setSrc( normalStep);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         process__flowElements__event.setSrc( process);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__event.setSrc( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         event__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __normalStep_actor_actor.setTrg( actor);\n\n\n         // create link\n         eventToNormalStep__source__event.setSrc( eventToNormalStep);\n\n\n         // create link\n         eventToNormalStep__target__normalStep.setSrc( eventToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         __flow_steps_normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,event,inFlow,prevStep,inFlowToPrevStep,normalStep,process,outFlow,actor,processToActor,eventToNormalStep,outFlowToNormalStep,flow,inFlowToFlow,outFlowToFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      Step prevStep = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlowToPrevStep_source_inFlow = null;\n      EMoflonEdge __inFlowToPrevStep_target_prevStep = null;\n      EMoflonEdge __prevStep_next_normalStep = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      CSP csp = null;\n      Process process = null;\n      Iterator fujaba__IterActorToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterPrevStepToInFlowToPrevStep = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"IntermediateCatchEventToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"prevStep\"));\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // iterate to-many link target from prevStep to inFlowToPrevStep\n               fujaba__Success = false;\n\n               fujaba__IterPrevStepToInFlowToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(prevStep,SequenceFlowToStep.class,\"target\")).iterator ();\n\n               while ( fujaba__IterPrevStepToInFlowToPrevStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToPrevStep = (SequenceFlowToStep) fujaba__IterPrevStepToInFlowToPrevStep.next ();\n\n                     // check object inFlowToPrevStep is really bound\n                     JavaSDM.ensure ( inFlowToPrevStep != null );\n                     // bind object\n                     inFlow = inFlowToPrevStep.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // check link source from inFlowToFlow to inFlow\n                     JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                     ));\n\n                     // iterate to-many link target from actor to processToActor\n                     fujaba__Success = false;\n\n                     fujaba__IterActorToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ProcessToActor.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterActorToProcessToActor.hasNext () )\n                     {\n                        try\n                        {\n                           processToActor = (ProcessToActor) fujaba__IterActorToProcessToActor.next ();\n\n                           // check object processToActor is really bound\n                           JavaSDM.ensure ( processToActor != null );\n                           // bind object\n                           process = processToActor.getSource ();\n\n                           // check object process is really bound\n                           JavaSDM.ensure ( process != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object inFlowToPrevStep is really bound\n                              JavaSDM.ensure ( inFlowToPrevStep != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object prevStep is really bound\n                              JavaSDM.ensure ( prevStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToActor is really bound\n                              JavaSDM.ensure ( processToActor != null );\n                              // check isomorphic binding between objects prevStep and normalStep \n                              JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n                              // check link actor from normalStep to actor\n                              JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                              ));\n\n                              // check link next from prevStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from inFlowToPrevStep to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToPrevStep.getSource ()\n                              ));\n\n                              // check link source from processToActor to process\n                              JavaSDM.ensure (process.equals (processToActor.getSource ()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from inFlowToPrevStep to prevStep\n                              JavaSDM.ensure (prevStep.equals (inFlowToPrevStep.getTarget ()\n                              ));\n\n                              // check link target from processToActor to actor\n                              JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                              ));\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __prevStep_next_normalStep\n                              __prevStep_next_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __normalStep_actor_actor\n                              __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_source_process\n                              __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_target_actor\n                              __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __prevStep_next_normalStep\n                              __prevStep_next_normalStep.setName (\"next\");\n                              // assign attribute __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep.setName (\"target\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __processToActor_source_process\n                              __processToActor_source_process.setName (\"source\");\n                              // assign attribute __processToActor_target_actor\n                              __processToActor_target_actor.setName (\"target\");\n                              // assign attribute __normalStep_actor_actor\n                              __normalStep_actor_actor.setName (\"actor\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setTrg( prevStep);\n\n\n                              // create link\n                              __prevStep_next_normalStep.setSrc( prevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(prevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              __prevStep_next_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __normalStep_actor_actor.setSrc( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __processToActor_source_process.setTrg( process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __processToActor_target_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __normalStep_actor_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                              // create link\n                              __processToActor_source_process.setSrc( processToActor);\n\n\n                              // create link\n                              __processToActor_target_actor.setSrc( processToActor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_target_prevStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__prevStep_next_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_actor_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,inFlow,prevStep,inFlowToPrevStep,normalStep,process,actor,processToActor,flow,inFlowToFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"IntermediateCatchEventToStepRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"prevStep\", prevStep);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"actor\", actor);\nmatch.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Step prevStep,
			NormalStep normalStep, Actor actor, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Step prevStep,
			NormalStep normalStep, Actor actor, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", true, csp);\r\nvar_normalStep_name.setValue(normalStep.getName());\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", true, csp);\r\nvar_normalStep_label.setValue(normalStep.getLabel());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(\"event.id\", csp);\r\nVariable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(\"event.name\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_event_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_event_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"prevStep\",prevStep);\r\nisApplicableMatch.registerObject(\"inFlowToPrevStep\",inFlowToPrevStep);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step prevStep,
			SequenceFlowToStep inFlowToPrevStep, NormalStep normalStep,
			bpmn2.Process process, Actor actor, ProcessToActor processToActor,
			Flow flow, SequenceFlowToUCFlow inFlowToFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"event\", event);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"prevStep\", prevStep);\nruleresult.registerObject(\"inFlowToPrevStep\", inFlowToPrevStep);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\nruleresult.registerObject(\"eventToNormalStep\", eventToNormalStep);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject event,
			EObject inFlow, EObject prevStep, EObject inFlowToPrevStep,
			EObject normalStep, EObject process, EObject outFlow,
			EObject actor, EObject processToActor, EObject eventToNormalStep,
			EObject outFlowToNormalStep, EObject flow, EObject inFlowToFlow,
			EObject outFlowToFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"normalStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_536139 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_34347 = null;\n      Step __DEC_normalStep_next_34347 = null;\n      Match match = null;\n      Flow flow = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Step prevStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_next is really bound\n         JavaSDM.ensure ( _edge_next != null );\n         // bind object\n         _TmpObject = _edge_next.getSrc ();\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n\n         // bind object\n         _TmpObject = prevStep.getNext ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // check link trg from _edge_next to normalStep\n         JavaSDM.ensure (normalStep.equals (_edge_next.getTrg ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_536139 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_536139 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_536139 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_536139.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_536139 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_536139.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_34347\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_34347 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_34347.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_34347 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_34347.next ();\n\n                     // check object __DEC_normalStep_next_34347 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_34347 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_34347 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_34347.equals (normalStep) );\n\n                     // check isomorphic binding between objects __DEC_normalStep_next_34347 and prevStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_34347.equals (prevStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_next is really bound\n            JavaSDM.ensure ( _edge_next != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object prevStep is really bound\n            JavaSDM.ensure ( prevStep != null );\n            // check isomorphic binding between objects prevStep and normalStep \n            JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link next from prevStep to normalStep\n            JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n            ));\n\n            // check link src from _edge_next to prevStep\n            JavaSDM.ensure (prevStep.equals (_edge_next.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_next to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_next.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,prevStep,normalStep,actor,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_202(EMoflonEdge _edge_next);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_event_flowElements_745717 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_633602 = null;\n      Iterator fujaba__IterEventTo__DEC_event_targetRef_224522 = null;\n      SequenceFlow __DEC_event_targetRef_224522 = null;\n      Match match = null;\n      Iterator fujaba__IterEventToInFlow = null;\n      SequenceFlow inFlow = null;\n      IntermediateCatchEvent event = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from event to process\n         JavaSDM.ensure (process.equals (event.eContainer()\n         ));\n\n         // iterate to-many link targetRef from event to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventToInFlow = new ArrayList(event.getIncoming()).iterator ();\n\n         while ( fujaba__IterEventToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterEventToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_event_flowElements_745717 = event.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) event.eContainer() : null;\n\n                     // check object __DEC_event_flowElements_745717 is really bound\n                     JavaSDM.ensure ( __DEC_event_flowElements_745717 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_event_flowElements_745717.getFlowElements().contains(event));\n\n                     // check isomorphic binding between objects __DEC_event_flowElements_745717 and process \n                     JavaSDM.ensure ( !__DEC_event_flowElements_745717.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_633602 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_633602 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_633602 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_633602.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_633602 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_633602.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from event\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from event to __DEC_event_targetRef_224522\n                     fujaba__Success = false;\n\n                     fujaba__IterEventTo__DEC_event_targetRef_224522 = new ArrayList(event.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterEventTo__DEC_event_targetRef_224522.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_event_targetRef_224522 = (SequenceFlow) fujaba__IterEventTo__DEC_event_targetRef_224522.next ();\n\n                           // check object __DEC_event_targetRef_224522 is really bound\n                           JavaSDM.ensure ( __DEC_event_targetRef_224522 != null );\n                           // check isomorphic binding between objects __DEC_event_targetRef_224522 and inFlow \n                           JavaSDM.ensure ( !__DEC_event_targetRef_224522.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_event_targetRef_224522 and outFlow \n                           JavaSDM.ensure ( !__DEC_event_targetRef_224522.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object event is really bound\n                  JavaSDM.ensure ( event != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from event to process\n                  JavaSDM.ensure (process.equals (event.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to event\n                  JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to event\n                  JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to event\n                  JavaSDM.ensure (!(event.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_flowElements to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,event,inFlow,process,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_474(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_event_flowElements_751692 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_432817 = null;\n      Iterator fujaba__IterEventTo__DEC_event_targetRef_328228 = null;\n      SequenceFlow __DEC_event_targetRef_328228 = null;\n      Match match = null;\n      Iterator fujaba__IterEventToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterEventToOutFlow = null;\n      SequenceFlow outFlow = null;\n      IntermediateCatchEvent event = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n\n         // check link flowElements from event to process\n         JavaSDM.ensure (process.equals (event.eContainer()\n         ));\n\n         // iterate to-many link sourceRef from event to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventToOutFlow = new ArrayList(event.getOutgoing()).iterator ();\n\n         while ( fujaba__IterEventToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterEventToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // iterate to-many link targetRef from event to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterEventToInFlow = new ArrayList(event.getIncoming()).iterator ();\n\n               while ( fujaba__IterEventToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterEventToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_event_flowElements_751692 = event.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) event.eContainer() : null;\n\n                           // check object __DEC_event_flowElements_751692 is really bound\n                           JavaSDM.ensure ( __DEC_event_flowElements_751692 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_event_flowElements_751692.getFlowElements().contains(event));\n\n                           // check isomorphic binding between objects __DEC_event_flowElements_751692 and process \n                           JavaSDM.ensure ( !__DEC_event_flowElements_751692.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_432817 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_432817 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_432817 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_432817.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_432817 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_432817.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from event\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from event to __DEC_event_targetRef_328228\n                           fujaba__Success = false;\n\n                           fujaba__IterEventTo__DEC_event_targetRef_328228 = new ArrayList(event.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterEventTo__DEC_event_targetRef_328228.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_event_targetRef_328228 = (SequenceFlow) fujaba__IterEventTo__DEC_event_targetRef_328228.next ();\n\n                                 // check object __DEC_event_targetRef_328228 is really bound\n                                 JavaSDM.ensure ( __DEC_event_targetRef_328228 != null );\n                                 // check isomorphic binding between objects __DEC_event_targetRef_328228 and inFlow \n                                 JavaSDM.ensure ( !__DEC_event_targetRef_328228.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_event_targetRef_328228 and outFlow \n                                 JavaSDM.ensure ( !__DEC_event_targetRef_328228.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object event is really bound\n                        JavaSDM.ensure ( event != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from event to process\n                        JavaSDM.ensure (process.equals (event.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to event\n                        JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to event\n                        JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to event\n                        JavaSDM.ensure (!(event.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_flowElements to event\n                        JavaSDM.ensure (event.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,event,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_475(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_event_flowElements_467112 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_28290 = null;\n      Iterator fujaba__IterEventTo__DEC_event_targetRef_961800 = null;\n      SequenceFlow __DEC_event_targetRef_961800 = null;\n      Match match = null;\n      Iterator fujaba__IterEventToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      IntermediateCatchEvent event = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = event.eContainer() instanceof Process ? (Process) event.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(event));\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link targetRef from inFlow to event\n         JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link sourceRef from event to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventToOutFlow = new ArrayList(event.getOutgoing()).iterator ();\n\n         while ( fujaba__IterEventToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterEventToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_event_flowElements_467112 = event.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) event.eContainer() : null;\n\n                     // check object __DEC_event_flowElements_467112 is really bound\n                     JavaSDM.ensure ( __DEC_event_flowElements_467112 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_event_flowElements_467112.getFlowElements().contains(event));\n\n                     // check isomorphic binding between objects __DEC_event_flowElements_467112 and process \n                     JavaSDM.ensure ( !__DEC_event_flowElements_467112.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_28290 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_28290 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_28290 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_28290.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_28290 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_28290.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from event\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from event to __DEC_event_targetRef_961800\n                     fujaba__Success = false;\n\n                     fujaba__IterEventTo__DEC_event_targetRef_961800 = new ArrayList(event.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterEventTo__DEC_event_targetRef_961800.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_event_targetRef_961800 = (SequenceFlow) fujaba__IterEventTo__DEC_event_targetRef_961800.next ();\n\n                           // check object __DEC_event_targetRef_961800 is really bound\n                           JavaSDM.ensure ( __DEC_event_targetRef_961800 != null );\n                           // check isomorphic binding between objects __DEC_event_targetRef_961800 and inFlow \n                           JavaSDM.ensure ( !__DEC_event_targetRef_961800.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_event_targetRef_961800 and outFlow \n                           JavaSDM.ensure ( !__DEC_event_targetRef_961800.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_targetRef is really bound\n                  JavaSDM.ensure ( _edge_targetRef != null );\n                  // check object event is really bound\n                  JavaSDM.ensure ( event != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from event to process\n                  JavaSDM.ensure (process.equals (event.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to event\n                  JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_targetRef to inFlow\n                  JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to event\n                  JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to event\n                  JavaSDM.ensure (!(event.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_targetRef to event\n                  JavaSDM.ensure (event.equals (_edge_targetRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,event,inFlow,process,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_476(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_event_flowElements_849593 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_37172 = null;\n      Iterator fujaba__IterEventTo__DEC_event_targetRef_66560 = null;\n      SequenceFlow __DEC_event_targetRef_66560 = null;\n      Match match = null;\n      Iterator fujaba__IterEventTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterEventToOutFlow = null;\n      SequenceFlow outFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      IntermediateCatchEvent event = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = event.eContainer() instanceof Process ? (Process) event.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(event));\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link targetRef from inFlow to event\n         JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link sourceRef from event to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventToOutFlow = new ArrayList(event.getOutgoing()).iterator ();\n\n         while ( fujaba__IterEventToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterEventToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // iterate to-many link trg from event to _edge_targetRef\n               fujaba__Success = false;\n\n               fujaba__IterEventTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,EMoflonEdge.class,\"trg\")).iterator ();\n\n               while ( fujaba__IterEventTo_edge_targetRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_targetRef = (EMoflonEdge) fujaba__IterEventTo_edge_targetRef.next ();\n\n                     // check object _edge_targetRef is really bound\n                     JavaSDM.ensure ( _edge_targetRef != null );\n                     // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                     JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                     // check link src from _edge_targetRef to inFlow\n                     JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_event_flowElements_849593 = event.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) event.eContainer() : null;\n\n                           // check object __DEC_event_flowElements_849593 is really bound\n                           JavaSDM.ensure ( __DEC_event_flowElements_849593 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_event_flowElements_849593.getFlowElements().contains(event));\n\n                           // check isomorphic binding between objects __DEC_event_flowElements_849593 and process \n                           JavaSDM.ensure ( !__DEC_event_flowElements_849593.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_37172 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_37172 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_37172 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_37172.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_37172 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_37172.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from event\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from event to __DEC_event_targetRef_66560\n                           fujaba__Success = false;\n\n                           fujaba__IterEventTo__DEC_event_targetRef_66560 = new ArrayList(event.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterEventTo__DEC_event_targetRef_66560.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_event_targetRef_66560 = (SequenceFlow) fujaba__IterEventTo__DEC_event_targetRef_66560.next ();\n\n                                 // check object __DEC_event_targetRef_66560 is really bound\n                                 JavaSDM.ensure ( __DEC_event_targetRef_66560 != null );\n                                 // check isomorphic binding between objects __DEC_event_targetRef_66560 and inFlow \n                                 JavaSDM.ensure ( !__DEC_event_targetRef_66560.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_event_targetRef_66560 and outFlow \n                                 JavaSDM.ensure ( !__DEC_event_targetRef_66560.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_incoming is really bound\n                        JavaSDM.ensure ( _edge_incoming != null );\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object event is really bound\n                        JavaSDM.ensure ( event != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                        JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from event to process\n                        JavaSDM.ensure (process.equals (event.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to event\n                        JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_incoming to event\n                        JavaSDM.ensure (event.equals (_edge_incoming.getSrc ()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to event\n                        JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to event\n                        JavaSDM.ensure (!(event.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_incoming to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                        ));\n\n                        // check link trg from _edge_targetRef to event\n                        JavaSDM.ensure (event.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,event,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_477(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_event_flowElements_387974 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_62456 = null;\n      Iterator fujaba__IterEventTo__DEC_event_targetRef_356491 = null;\n      SequenceFlow __DEC_event_targetRef_356491 = null;\n      Match match = null;\n      Iterator fujaba__IterEventToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      IntermediateCatchEvent event = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = event.eContainer() instanceof Process ? (Process) event.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(event));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to event\n         JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link targetRef from event to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventToInFlow = new ArrayList(event.getIncoming()).iterator ();\n\n         while ( fujaba__IterEventToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterEventToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_event_flowElements_387974 = event.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) event.eContainer() : null;\n\n                     // check object __DEC_event_flowElements_387974 is really bound\n                     JavaSDM.ensure ( __DEC_event_flowElements_387974 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_event_flowElements_387974.getFlowElements().contains(event));\n\n                     // check isomorphic binding between objects __DEC_event_flowElements_387974 and process \n                     JavaSDM.ensure ( !__DEC_event_flowElements_387974.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_62456 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_62456 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_62456 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_62456.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_62456 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_62456.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from event\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from event to __DEC_event_targetRef_356491\n                     fujaba__Success = false;\n\n                     fujaba__IterEventTo__DEC_event_targetRef_356491 = new ArrayList(event.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterEventTo__DEC_event_targetRef_356491.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_event_targetRef_356491 = (SequenceFlow) fujaba__IterEventTo__DEC_event_targetRef_356491.next ();\n\n                           // check object __DEC_event_targetRef_356491 is really bound\n                           JavaSDM.ensure ( __DEC_event_targetRef_356491 != null );\n                           // check isomorphic binding between objects __DEC_event_targetRef_356491 and inFlow \n                           JavaSDM.ensure ( !__DEC_event_targetRef_356491.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_event_targetRef_356491 and outFlow \n                           JavaSDM.ensure ( !__DEC_event_targetRef_356491.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object event is really bound\n                  JavaSDM.ensure ( event != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from event to process\n                  JavaSDM.ensure (process.equals (event.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to event\n                  JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_sourceRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to event\n                  JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to event\n                  JavaSDM.ensure (!(event.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_sourceRef to event\n                  JavaSDM.ensure (event.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,event,inFlow,process,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_478(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_event_flowElements_288218 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_847663 = null;\n      Iterator fujaba__IterEventTo__DEC_event_targetRef_102150 = null;\n      SequenceFlow __DEC_event_targetRef_102150 = null;\n      Match match = null;\n      Iterator fujaba__IterEventTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterEventToInFlow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      IntermediateCatchEvent event = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object event\n         JavaSDM.ensure ( _TmpObject instanceof IntermediateCatchEvent );\n         event = (IntermediateCatchEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = event.eContainer() instanceof Process ? (Process) event.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(event));\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to event\n         JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link targetRef from event to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterEventToInFlow = new ArrayList(event.getIncoming()).iterator ();\n\n         while ( fujaba__IterEventToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterEventToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // iterate to-many link trg from event to _edge_sourceRef\n               fujaba__Success = false;\n\n               fujaba__IterEventTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,EMoflonEdge.class,\"trg\")).iterator ();\n\n               while ( fujaba__IterEventTo_edge_sourceRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_sourceRef = (EMoflonEdge) fujaba__IterEventTo_edge_sourceRef.next ();\n\n                     // check object _edge_sourceRef is really bound\n                     JavaSDM.ensure ( _edge_sourceRef != null );\n                     // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                     JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                     // check link src from _edge_sourceRef to outFlow\n                     JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_event_flowElements_288218 = event.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) event.eContainer() : null;\n\n                           // check object __DEC_event_flowElements_288218 is really bound\n                           JavaSDM.ensure ( __DEC_event_flowElements_288218 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_event_flowElements_288218.getFlowElements().contains(event));\n\n                           // check isomorphic binding between objects __DEC_event_flowElements_288218 and process \n                           JavaSDM.ensure ( !__DEC_event_flowElements_288218.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_847663 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_847663 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_847663 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_847663.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_847663 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_847663.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from event\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(event,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from event to __DEC_event_targetRef_102150\n                           fujaba__Success = false;\n\n                           fujaba__IterEventTo__DEC_event_targetRef_102150 = new ArrayList(event.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterEventTo__DEC_event_targetRef_102150.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_event_targetRef_102150 = (SequenceFlow) fujaba__IterEventTo__DEC_event_targetRef_102150.next ();\n\n                                 // check object __DEC_event_targetRef_102150 is really bound\n                                 JavaSDM.ensure ( __DEC_event_targetRef_102150 != null );\n                                 // check isomorphic binding between objects __DEC_event_targetRef_102150 and inFlow \n                                 JavaSDM.ensure ( !__DEC_event_targetRef_102150.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_event_targetRef_102150 and outFlow \n                                 JavaSDM.ensure ( !__DEC_event_targetRef_102150.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_outgoing is really bound\n                        JavaSDM.ensure ( _edge_outgoing != null );\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object event is really bound\n                        JavaSDM.ensure ( event != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                        JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from event to process\n                        JavaSDM.ensure (process.equals (event.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to event\n                        JavaSDM.ensure (event.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_outgoing to event\n                        JavaSDM.ensure (event.equals (_edge_outgoing.getSrc ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to event\n                        JavaSDM.ensure (event.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to event\n                        JavaSDM.ensure (!(event.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_outgoing to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to event\n                        JavaSDM.ensure (event.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,event,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_479(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_327228 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_27840 = null;\n      Step __DEC_normalStep_next_27840 = null;\n      Match match = null;\n      Iterator fujaba__IterNormalStepToPrevStep = null;\n      Step prevStep = null;\n      Flow flow = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // check link trg from _edge_actor to actor\n         JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n         ));\n\n         // iterate to-many link next from normalStep to prevStep\n         fujaba__Success = false;\n\n         fujaba__IterNormalStepToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n         while ( fujaba__IterNormalStepToPrevStep.hasNext () )\n         {\n            try\n            {\n               prevStep = (Step) fujaba__IterNormalStepToPrevStep.next ();\n\n               // check object prevStep is really bound\n               JavaSDM.ensure ( prevStep != null );\n               // check isomorphic binding between objects prevStep and normalStep \n               JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_normalStep_steps_327228 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                     // check object __DEC_normalStep_steps_327228 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_steps_327228 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_normalStep_steps_327228.getSteps().contains(normalStep));\n\n                     // check isomorphic binding between objects __DEC_normalStep_steps_327228 and flow \n                     JavaSDM.ensure ( !__DEC_normalStep_steps_327228.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link next from normalStep to __DEC_normalStep_next_27840\n                     fujaba__Success = false;\n\n                     fujaba__IterNormalStepTo__DEC_normalStep_next_27840 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_27840.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_normalStep_next_27840 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_27840.next ();\n\n                           // check object __DEC_normalStep_next_27840 is really bound\n                           JavaSDM.ensure ( __DEC_normalStep_next_27840 != null );\n                           // check isomorphic binding between objects __DEC_normalStep_next_27840 and normalStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_27840.equals (normalStep) );\n\n                           // check isomorphic binding between objects __DEC_normalStep_next_27840 and prevStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_27840.equals (prevStep) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check object _edge_actor is really bound\n                  JavaSDM.ensure ( _edge_actor != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object prevStep is really bound\n                  JavaSDM.ensure ( prevStep != null );\n                  // check isomorphic binding between objects prevStep and normalStep \n                  JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n                  // check link actor from normalStep to actor\n                  JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                  ));\n\n                  // check link next from prevStep to normalStep\n                  JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n                  ));\n\n                  // check link src from _edge_actor to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_actor.getSrc ()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_actor to actor\n                  JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,prevStep,normalStep,actor,flow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_203(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_424506 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_263496 = null;\n      Step __DEC_normalStep_next_263496 = null;\n      Match match = null;\n      Iterator fujaba__IterNormalStepToPrevStep = null;\n      Step prevStep = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link steps from normalStep to flow\n         JavaSDM.ensure (flow.equals (normalStep.eContainer()\n         ));\n\n         // iterate to-many link next from normalStep to prevStep\n         fujaba__Success = false;\n\n         fujaba__IterNormalStepToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n         while ( fujaba__IterNormalStepToPrevStep.hasNext () )\n         {\n            try\n            {\n               prevStep = (Step) fujaba__IterNormalStepToPrevStep.next ();\n\n               // check object prevStep is really bound\n               JavaSDM.ensure ( prevStep != null );\n               // check isomorphic binding between objects prevStep and normalStep \n               JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_normalStep_steps_424506 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                     // check object __DEC_normalStep_steps_424506 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_steps_424506 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_normalStep_steps_424506.getSteps().contains(normalStep));\n\n                     // check isomorphic binding between objects __DEC_normalStep_steps_424506 and flow \n                     JavaSDM.ensure ( !__DEC_normalStep_steps_424506.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link next from normalStep to __DEC_normalStep_next_263496\n                     fujaba__Success = false;\n\n                     fujaba__IterNormalStepTo__DEC_normalStep_next_263496 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_263496.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_normalStep_next_263496 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_263496.next ();\n\n                           // check object __DEC_normalStep_next_263496 is really bound\n                           JavaSDM.ensure ( __DEC_normalStep_next_263496 != null );\n                           // check isomorphic binding between objects __DEC_normalStep_next_263496 and normalStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_263496.equals (normalStep) );\n\n                           // check isomorphic binding between objects __DEC_normalStep_next_263496 and prevStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_263496.equals (prevStep) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check object _edge_steps is really bound\n                  JavaSDM.ensure ( _edge_steps != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object prevStep is really bound\n                  JavaSDM.ensure ( prevStep != null );\n                  // check isomorphic binding between objects prevStep and normalStep \n                  JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n                  // check link actor from normalStep to actor\n                  JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                  ));\n\n                  // check link next from prevStep to normalStep\n                  JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n                  ));\n\n                  // check link src from _edge_steps to flow\n                  JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_steps to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_steps.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,prevStep,normalStep,actor,flow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_204(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      IntermediateCatchEvent event = null;\n      SequenceFlow outFlow = null;\n      FlowNodeToStep eventToNormalStep = null;\n      NormalStep normalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Step prevStep = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToPrevStepListToInFlowToPrevStep = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToPrevStepList = null;\n      RuleEntryList inFlowToPrevStepList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToPrevStepList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToPrevStepList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToPrevStepList.hasNext () )\n         {\n            try\n            {\n               inFlowToPrevStepList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToPrevStepList.next ();\n\n               // check object inFlowToPrevStepList is really bound\n               JavaSDM.ensure ( inFlowToPrevStepList != null );\n               // iterate to-many link entryObjects from inFlowToPrevStepList to inFlowToPrevStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToPrevStepListToInFlowToPrevStep = new ArrayList(inFlowToPrevStepList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToPrevStepListToInFlowToPrevStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToPrevStepListToInFlowToPrevStep.next ();\n\n                     // ensure correct type and really bound of object inFlowToPrevStep\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n                     inFlowToPrevStep = (SequenceFlowToStep) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToPrevStep.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof Process );\n                     process = (Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     prevStep = inFlowToPrevStep.getTarget ();\n\n                     // check object prevStep is really bound\n                     JavaSDM.ensure ( prevStep != null );\n\n                     // iterate to-many link source from inFlow to inFlowToFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n                     {\n                        try\n                        {\n                           inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                           // check object inFlowToFlow is really bound\n                           JavaSDM.ensure ( inFlowToFlow != null );\n                           // bind object\n                           flow = inFlowToFlow.getTarget ();\n\n                           // check object flow is really bound\n                           JavaSDM.ensure ( flow != null );\n\n                           // iterate to-many link source from process to processToActor\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterProcessToProcessToActor.hasNext () )\n                           {\n                              try\n                              {\n                                 processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                                 // check object processToActor is really bound\n                                 JavaSDM.ensure ( processToActor != null );\n                                 // bind object\n                                 actor = processToActor.getTarget ();\n\n                                 // check object actor is really bound\n                                 JavaSDM.ensure ( actor != null );\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,event,inFlow,prevStep,inFlowToPrevStep,normalStep,process,outFlow,actor,processToActor,eventToNormalStep,outFlowToNormalStep,flow,inFlowToFlow,outFlowToFlow,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object actor is really bound\n                                       JavaSDM.ensure ( actor != null );\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object inFlow is really bound\n                                       JavaSDM.ensure ( inFlow != null );\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // check object inFlowToPrevStep is really bound\n                                       JavaSDM.ensure ( inFlowToPrevStep != null );\n                                       // check object prevStep is really bound\n                                       JavaSDM.ensure ( prevStep != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object processToActor is really bound\n                                       JavaSDM.ensure ( processToActor != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // create object event\n                                       event = Bpmn2Factory.eINSTANCE.createIntermediateCatchEvent();\n\n                                       // create object outFlow\n                                       outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // create object eventToNormalStep\n                                       eventToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                       // create object normalStep\n                                       normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n                                       // create object outFlowToNormalStep\n                                       outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                       // create object outFlowToFlow\n                                       outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // assign attribute event\n                                       event.setId ((java.lang.String)csp.getAttributeVariable(\"event\",\"id\").getValue());\n                                       // assign attribute event\n                                       event.setName ((java.lang.String)csp.getAttributeVariable(\"event\",\"name\").getValue());\n                                       // assign attribute normalStep\n                                       normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n                                       // assign attribute normalStep\n                                       normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       outFlow.setSourceRef( event);\n\n\n                                       // create link\n                                       eventToNormalStep.setSource( event);\n\n\n                                       // create link\n                                       process.getFlowElements().add(event);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(event);\n\n\n                                       // create link\n                                       inFlow.setTargetRef( event);\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(prevStep,normalStep,\"next\");\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(normalStep,actor,\"actor\");\n\n                                       // create link\n                                       outFlowToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       flow.getSteps().add(normalStep);\n\n\n                                       // create link\n                                       eventToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       ruleResult.getTargetObjects().add(normalStep);\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(outFlow);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setSource( outFlow);\n\n\n                                       // create link\n                                       outFlowToFlow.setSource( outFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(eventToNormalStep);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n\n                                       // create link\n                                       outFlowToFlow.setTarget( flow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToFlow);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToStep inFlowToPrevStepDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(\"event.id\", csp);\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nVariable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(\"event.name\", csp);\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\n\r\n// Create constraints\r\nEq_modelgen eq_modelgen = new Eq_modelgen();Eq_modelgen eq_modelgen_0 = new Eq_modelgen();\r\n\r\ncsp.getConstraints().add(eq_modelgen);\r\ncsp.getConstraints().add(eq_modelgen_0);\r\n\r\n// Solve CSP\r\neq_modelgen.setRuleName(\"\");\r\neq_modelgen.solve(var_event_id,var_normalStep_name);\r\neq_modelgen_0.setRuleName(\"\");\r\neq_modelgen_0.solve(var_event_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"prevStep\",prevStep);\r\nisApplicableMatch.registerObject(\"inFlowToPrevStep\",inFlowToPrevStep);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			IntermediateCatchEvent event, SequenceFlow inFlow, Step prevStep,
			SequenceFlowToStep inFlowToPrevStep, NormalStep normalStep,
			bpmn2.Process process, SequenceFlow outFlow, Actor actor,
			ProcessToActor processToActor, FlowNodeToStep eventToNormalStep,
			SequenceFlowToStep outFlowToNormalStep, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow,
			SequenceFlowToUCFlow outFlowToFlow,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // IntermediateCatchEventToStepRule
