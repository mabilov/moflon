/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Seq Flow After PG To Parallel Flow Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getSeqFlowAfterPGToParallelFlowRule()
 * @model
 * @generated
 */
public interface SeqFlowAfterPGToParallelFlowRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __process_flowElements_sequenceFlow = null;\n      EMoflonEdge __sequenceFlow_sourceRef_parallelGateway = null;\n      EMoflonEdge __parallelGateway_outgoing_sequenceFlow = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check isomorphic binding between objects sequenceFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,parallelGateway,sequenceFlow,inFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelGateway is really bound\n            JavaSDM.ensure ( parallelGateway != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object sequenceFlow is really bound\n            JavaSDM.ensure ( sequenceFlow != null );\n            // check isomorphic binding between objects sequenceFlow and inFlow \n            JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n            // create object __process_flowElements_sequenceFlow\n            __process_flowElements_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __sequenceFlow_sourceRef_parallelGateway\n            __sequenceFlow_sourceRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __parallelGateway_outgoing_sequenceFlow\n            __parallelGateway_outgoing_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_sequenceFlow\n            __process_flowElements_sequenceFlow.setName (\"flowElements\");\n            // assign attribute __sequenceFlow_sourceRef_parallelGateway\n            __sequenceFlow_sourceRef_parallelGateway.setName (\"sourceRef\");\n            // assign attribute __parallelGateway_outgoing_sequenceFlow\n            __parallelGateway_outgoing_sequenceFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_sequenceFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,sequenceFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__sequenceFlow_sourceRef_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__parallelGateway_outgoing_sequenceFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __process_flowElements_sequenceFlow.setSrc( process);\n\n\n            // create link\n            __parallelGateway_outgoing_sequenceFlow.setSrc( parallelGateway);\n\n\n            // create link\n            __sequenceFlow_sourceRef_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __sequenceFlow_sourceRef_parallelGateway.setSrc( sequenceFlow);\n\n\n            // create link\n            __parallelGateway_outgoing_sequenceFlow.setTrg( sequenceFlow);\n\n\n            // create link\n            __process_flowElements_sequenceFlow.setTrg( sequenceFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelGateway is really bound\n            JavaSDM.ensure ( parallelGateway != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object sequenceFlow is really bound\n            JavaSDM.ensure ( sequenceFlow != null );\n            // check isomorphic binding between objects sequenceFlow and inFlow \n            JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n            // create object __process_flowElements_parallelGateway\n            __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_parallelGateway\n            __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __parallelGateway_incoming_inFlow\n            __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_parallelGateway\n            __process_flowElements_parallelGateway.setName (\"flowElements\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_parallelGateway\n            __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n            // assign attribute __parallelGateway_incoming_inFlow\n            __parallelGateway_incoming_inFlow.setName (\"incoming\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_parallelGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_parallelGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__parallelGateway_incoming_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parallelGateway,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            __process_flowElements_parallelGateway.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n            // create link\n            __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,parallelGateway,sequenceFlow,inFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			ParallelGateway parallelGateway, SequenceFlow sequenceFlow,
			SequenceFlow inFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      ParallelGateway parallelGateway = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      ParallelStep parallelStep = null;\n      Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      SequenceFlow sequenceFlow = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlowToUCFlow sequenceFlowToParallelFlow = null;\n      ParallelFlow parallelFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge sequenceFlowToParallelFlow__source__sequenceFlow = null;\n      EMoflonEdge __sequenceFlow_sourceRef_parallelGateway = null;\n      EMoflonEdge parallelStep__invokedFlows__parallelFlow = null;\n      EMoflonEdge __parallelGateway_outgoing_sequenceFlow = null;\n      EMoflonEdge sequenceFlowToParallelFlow__target__parallelFlow = null;\n      EMoflonEdge useCase__flows__parallelFlow = null;\n      EMoflonEdge __process_flowElements_sequenceFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelGatewayToParallelStep\"));\n\n         // ensure correct type and really bound of object parallelGatewayToParallelStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         parallelGatewayToParallelStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelStep\"));\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"sequenceFlow\"));\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects sequenceFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object sequenceFlowToParallelFlow\n         sequenceFlowToParallelFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object parallelFlow\n         parallelFlow = UseCaseDSLFactory.eINSTANCE.createParallelFlow();\n\n         // assign attribute parallelFlow\n         parallelFlow.setName ((java.lang.String)csp.getAttributeVariable(\"parallelFlow\",\"name\").getValue());\n\n         // create link\n         sequenceFlowToParallelFlow.setSource( sequenceFlow);\n\n\n         // create link\n         \tuseCase.getFlows().add(parallelFlow); // add link\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(parallelStep,parallelFlow,\"invokedFlows\");\n\n         // create link\n         sequenceFlowToParallelFlow.setTarget( parallelFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object parallelFlow is really bound\n         JavaSDM.ensure ( parallelFlow != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToParallelFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToParallelFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToParallelFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object parallelFlow is really bound\n         JavaSDM.ensure ( parallelFlow != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToParallelFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToParallelFlow != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects parallelFlow and flow \n         JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n         // check isomorphic binding between objects parallelGateway and flow \n         JavaSDM.ensure ( !parallelGateway.equals (flow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and flow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (flow) );\n\n         // check isomorphic binding between objects parallelStep and flow \n         JavaSDM.ensure ( !parallelStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects sequenceFlow and flow \n         JavaSDM.ensure ( !sequenceFlow.equals (flow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and flow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelFlow and inFlow \n         JavaSDM.ensure ( !parallelFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelFlow and inFlowToFlow \n         JavaSDM.ensure ( !parallelFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and inFlowToFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and inFlowToFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and parallelFlow \n         JavaSDM.ensure ( !parallelGateway.equals (parallelFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelFlow) );\n\n         // check isomorphic binding between objects parallelStep and parallelFlow \n         JavaSDM.ensure ( !parallelStep.equals (parallelFlow) );\n\n         // check isomorphic binding between objects process and parallelFlow \n         JavaSDM.ensure ( !process.equals (parallelFlow) );\n\n         // check isomorphic binding between objects processToUseCase and parallelFlow \n         JavaSDM.ensure ( !processToUseCase.equals (parallelFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelFlow) );\n\n         // check isomorphic binding between objects useCase and parallelFlow \n         JavaSDM.ensure ( !useCase.equals (parallelFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects process and parallelGateway \n         JavaSDM.ensure ( !process.equals (parallelGateway) );\n\n         // check isomorphic binding between objects processToUseCase and parallelGateway \n         JavaSDM.ensure ( !processToUseCase.equals (parallelGateway) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelGateway \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelGateway) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelGateway \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelGateway) );\n\n         // check isomorphic binding between objects useCase and parallelGateway \n         JavaSDM.ensure ( !useCase.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !parallelStep.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !process.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects processToUseCase and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !processToUseCase.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects useCase and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !useCase.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelStep \n         JavaSDM.ensure ( !process.equals (parallelStep) );\n\n         // check isomorphic binding between objects processToUseCase and parallelStep \n         JavaSDM.ensure ( !processToUseCase.equals (parallelStep) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelStep \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelStep) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelStep \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelStep) );\n\n         // check isomorphic binding between objects useCase and parallelStep \n         JavaSDM.ensure ( !useCase.equals (parallelStep) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlow and process \n         JavaSDM.ensure ( !sequenceFlow.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and process \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and sequenceFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlowToParallelFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlowToParallelFlow) );\n\n         // create object sequenceFlowToParallelFlow__source__sequenceFlow\n         sequenceFlowToParallelFlow__source__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __sequenceFlow_sourceRef_parallelGateway\n         __sequenceFlow_sourceRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelStep__invokedFlows__parallelFlow\n         parallelStep__invokedFlows__parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __parallelGateway_outgoing_sequenceFlow\n         __parallelGateway_outgoing_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlowToParallelFlow__target__parallelFlow\n         sequenceFlowToParallelFlow__target__parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__parallelFlow\n         useCase__flows__parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_sequenceFlow\n         __process_flowElements_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"SeqFlowAfterPGToParallelFlowRule\");\n         // assign attribute __process_flowElements_sequenceFlow\n         __process_flowElements_sequenceFlow.setName (\"flowElements\");\n         // assign attribute __sequenceFlow_sourceRef_parallelGateway\n         __sequenceFlow_sourceRef_parallelGateway.setName (\"sourceRef\");\n         // assign attribute __parallelGateway_outgoing_sequenceFlow\n         __parallelGateway_outgoing_sequenceFlow.setName (\"outgoing\");\n         // assign attribute useCase__flows__parallelFlow\n         useCase__flows__parallelFlow.setName (\"flows\");\n         // assign attribute parallelStep__invokedFlows__parallelFlow\n         parallelStep__invokedFlows__parallelFlow.setName (\"invokedFlows\");\n         // assign attribute sequenceFlowToParallelFlow__source__sequenceFlow\n         sequenceFlowToParallelFlow__source__sequenceFlow.setName (\"source\");\n         // assign attribute sequenceFlowToParallelFlow__target__parallelFlow\n         sequenceFlowToParallelFlow__target__parallelFlow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToParallelFlow__source__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__sequenceFlow_sourceRef_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelStep__invokedFlows__parallelFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__parallelGateway_outgoing_sequenceFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToParallelFlow__target__parallelFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__parallelFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_sequenceFlow,\"translatedEdges\");\n\n         // create link\n         __process_flowElements_sequenceFlow.setSrc( process);\n\n\n         // create link\n         __sequenceFlow_sourceRef_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __parallelGateway_outgoing_sequenceFlow.setSrc( parallelGateway);\n\n\n         // create link\n         __parallelGateway_outgoing_sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         __sequenceFlow_sourceRef_parallelGateway.setSrc( sequenceFlow);\n\n\n         // create link\n         __process_flowElements_sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__source__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         useCase__flows__parallelFlow.setSrc( useCase);\n\n\n         // create link\n         parallelStep__invokedFlows__parallelFlow.setSrc( parallelStep);\n\n\n         // create link\n         useCase__flows__parallelFlow.setTrg( parallelFlow);\n\n\n         // create link\n         parallelStep__invokedFlows__parallelFlow.setTrg( parallelFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__target__parallelFlow.setTrg( parallelFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__source__sequenceFlow.setSrc( sequenceFlowToParallelFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__target__parallelFlow.setSrc( sequenceFlowToParallelFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,parallelGateway,sequenceFlow,inFlow,flow,inFlowToFlow,useCase,processToUseCase,parallelStep,parallelGatewayToParallelStep,parallelFlow,sequenceFlowToParallelFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow inFlow = null;\n      ParallelGateway parallelGateway = null;\n      Process process = null;\n      SequenceFlow sequenceFlow = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_sequenceFlow = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __sequenceFlow_sourceRef_parallelGateway = null;\n      EMoflonEdge __parallelGatewayToParallelStep_source_parallelGateway = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __parallelGateway_outgoing_sequenceFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_parallelStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __parallelGatewayToParallelStep_target_parallelStep = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      ParallelStep parallelStep = null;\n      Iterator fujaba__IterParallelGatewayToParallelGatewayToParallelStep = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"SeqFlowAfterPGToParallelFlowRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (match.getObject(\"sequenceFlow\"));\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects sequenceFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from parallelGateway to parallelGatewayToParallelStep\n               fujaba__Success = false;\n\n               fujaba__IterParallelGatewayToParallelGatewayToParallelStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterParallelGatewayToParallelGatewayToParallelStep.hasNext () )\n               {\n                  try\n                  {\n                     parallelGatewayToParallelStep = (FlowNodeToStep) fujaba__IterParallelGatewayToParallelGatewayToParallelStep.next ();\n\n                     // check object parallelGatewayToParallelStep is really bound\n                     JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n                     // bind object\n                     _TmpObject = parallelGatewayToParallelStep.getTarget ();\n\n                     // ensure correct type and really bound of object parallelStep\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n                     parallelStep = (ParallelStep) _TmpObject;\n\n                     // iterate to-many link source from process to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           useCase = processToUseCase.getTarget ();\n\n                           // check object useCase is really bound\n                           JavaSDM.ensure ( useCase != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object parallelGateway is really bound\n                              JavaSDM.ensure ( parallelGateway != null );\n                              // check object parallelGatewayToParallelStep is really bound\n                              JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n                              // check object parallelStep is really bound\n                              JavaSDM.ensure ( parallelStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object sequenceFlow is really bound\n                              JavaSDM.ensure ( sequenceFlow != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects sequenceFlow and inFlow \n                              JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from parallelGateway to process\n                              JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                              ));\n\n                              // check link flowElements from sequenceFlow to process\n                              JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from parallelGatewayToParallelStep to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (parallelGatewayToParallelStep.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link sourceRef from sequenceFlow to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n                              ));\n\n                              // check link steps from parallelStep to flow\n                              JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from parallelGatewayToParallelStep to parallelStep\n                              JavaSDM.ensure (parallelStep.equals (parallelGatewayToParallelStep.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // create object __process_flowElements_parallelGateway\n                              __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __process_flowElements_sequenceFlow\n                              __process_flowElements_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __sequenceFlow_sourceRef_parallelGateway\n                              __sequenceFlow_sourceRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGatewayToParallelStep_source_parallelGateway\n                              __parallelGatewayToParallelStep_source_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGateway_incoming_inFlow\n                              __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_parallelGateway\n                              __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGateway_outgoing_sequenceFlow\n                              __parallelGateway_outgoing_sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_parallelStep\n                              __flow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGatewayToParallelStep_target_parallelStep\n                              __parallelGatewayToParallelStep_target_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_flowElements_parallelGateway\n                              __process_flowElements_parallelGateway.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_sequenceFlow\n                              __process_flowElements_sequenceFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __sequenceFlow_sourceRef_parallelGateway\n                              __sequenceFlow_sourceRef_parallelGateway.setName (\"sourceRef\");\n                              // assign attribute __parallelGateway_outgoing_sequenceFlow\n                              __parallelGateway_outgoing_sequenceFlow.setName (\"outgoing\");\n                              // assign attribute __inFlow_targetRef_parallelGateway\n                              __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n                              // assign attribute __parallelGateway_incoming_inFlow\n                              __parallelGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __flow_steps_parallelStep\n                              __flow_steps_parallelStep.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __parallelGatewayToParallelStep_source_parallelGateway\n                              __parallelGatewayToParallelStep_source_parallelGateway.setName (\"source\");\n                              // assign attribute __parallelGatewayToParallelStep_target_parallelStep\n                              __parallelGatewayToParallelStep_target_parallelStep.setName (\"target\");\n\n                              // create link\n                              __process_flowElements_parallelGateway.setSrc( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_sequenceFlow.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __sequenceFlow_sourceRef_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_source_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelGateway);\n\n\n                              // create link\n                              __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n                              // create link\n                              __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __parallelGateway_outgoing_sequenceFlow.setSrc( parallelGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(sequenceFlow);\n\n\n                              // create link\n                              __parallelGateway_outgoing_sequenceFlow.setTrg( sequenceFlow);\n\n\n                              // create link\n                              __process_flowElements_sequenceFlow.setTrg( sequenceFlow);\n\n\n                              // create link\n                              __sequenceFlow_sourceRef_parallelGateway.setSrc( sequenceFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_parallelStep.setSrc( flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelStep);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_target_parallelStep.setTrg( parallelStep);\n\n\n                              // create link\n                              __flow_steps_parallelStep.setTrg( parallelStep);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_source_parallelGateway.setSrc( parallelGatewayToParallelStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelGatewayToParallelStep);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_target_parallelStep.setSrc( parallelGatewayToParallelStep);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__sequenceFlow_sourceRef_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGateway_outgoing_sequenceFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGatewayToParallelStep_target_parallelStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_parallelStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_sequenceFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGatewayToParallelStep_source_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,parallelGateway,sequenceFlow,inFlow,flow,inFlowToFlow,useCase,processToUseCase,parallelStep,parallelGatewayToParallelStep));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"SeqFlowAfterPGToParallelFlowRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"parallelGateway\", parallelGateway);\nmatch.registerObject(\"sequenceFlow\", sequenceFlow);\nmatch.registerObject(\"inFlow\", inFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			ParallelGateway parallelGateway, SequenceFlow sequenceFlow,
			SequenceFlow inFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", true, csp);\r\nvar_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			ParallelGateway parallelGateway, SequenceFlow sequenceFlow,
			SequenceFlow inFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_sequenceFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(\"sequenceFlow.id\", true, csp);\r\nvar_sequenceFlow_id.setValue(sequenceFlow.getId());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelFlow.name\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_sequenceFlow_id,var_parallelFlow_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"parallelGateway\",parallelGateway);\r\nisApplicableMatch.registerObject(\"sequenceFlow\",sequenceFlow);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"parallelStep\",parallelStep);\r\nisApplicableMatch.registerObject(\"parallelGatewayToParallelStep\",parallelGatewayToParallelStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, ParallelGateway parallelGateway,
			SequenceFlow sequenceFlow, SequenceFlow inFlow, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, UseCase useCase,
			ProcessToUseCase processToUseCase, ParallelStep parallelStep,
			FlowNodeToStep parallelGatewayToParallelStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"parallelGateway\", parallelGateway);\nruleresult.registerObject(\"sequenceFlow\", sequenceFlow);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"parallelStep\", parallelStep);\nruleresult.registerObject(\"parallelGatewayToParallelStep\", parallelGatewayToParallelStep);\nruleresult.registerObject(\"parallelFlow\", parallelFlow);\nruleresult.registerObject(\"sequenceFlowToParallelFlow\", sequenceFlowToParallelFlow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject parallelGateway, EObject sequenceFlow, EObject inFlow,
			EObject flow, EObject inFlowToFlow, EObject useCase,
			EObject processToUseCase, EObject parallelStep,
			EObject parallelGatewayToParallelStep, EObject parallelFlow,
			EObject sequenceFlowToParallelFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"sequenceFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __useCase_flows_parallelFlow = null;\n      EMoflonEdge __parallelStep_invokedFlows_parallelFlow = null;\n      EMoflonEdge __flow_steps_parallelStep = null;\n      EMoflonEdge __useCase_flows_flow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object parallelFlow is really bound\n         JavaSDM.ensure ( parallelFlow != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects parallelFlow and flow \n         JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,flow,useCase,parallelStep,parallelFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelFlow is really bound\n            JavaSDM.ensure ( parallelFlow != null );\n            // check object parallelStep is really bound\n            JavaSDM.ensure ( parallelStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects parallelFlow and flow \n            JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n            // create object __useCase_flows_parallelFlow\n            __useCase_flows_parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __parallelStep_invokedFlows_parallelFlow\n            __parallelStep_invokedFlows_parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_parallelFlow\n            __useCase_flows_parallelFlow.setName (\"flows\");\n            // assign attribute __parallelStep_invokedFlows_parallelFlow\n            __parallelStep_invokedFlows_parallelFlow.setName (\"invokedFlows\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parallelFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_parallelFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__parallelStep_invokedFlows_parallelFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __useCase_flows_parallelFlow.setSrc( useCase);\n\n\n            // create link\n            __parallelStep_invokedFlows_parallelFlow.setSrc( parallelStep);\n\n\n            // create link\n            __parallelStep_invokedFlows_parallelFlow.setTrg( parallelFlow);\n\n\n            // create link\n            __useCase_flows_parallelFlow.setTrg( parallelFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelFlow is really bound\n            JavaSDM.ensure ( parallelFlow != null );\n            // check object parallelStep is really bound\n            JavaSDM.ensure ( parallelStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects parallelFlow and flow \n            JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n            // create object __flow_steps_parallelStep\n            __flow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __flow_steps_parallelStep\n            __flow_steps_parallelStep.setName (\"steps\");\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_parallelStep,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parallelStep,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            __flow_steps_parallelStep.setSrc( flow);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __flow_steps_parallelStep.setTrg( parallelStep);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,flow,useCase,parallelStep,parallelFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Flow flow, UseCase useCase,
			ParallelStep parallelStep, ParallelFlow parallelFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      ParallelFlow parallelFlow = null;\n      ParallelGateway parallelGateway = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      ParallelStep parallelStep = null;\n      Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlow sequenceFlow = null;\n      SequenceFlowToUCFlow sequenceFlowToParallelFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge sequenceFlow__sourceRef__parallelGateway = null;\n      EMoflonEdge parallelGateway__outgoing__sequenceFlow = null;\n      EMoflonEdge sequenceFlowToParallelFlow__source__sequenceFlow = null;\n      EMoflonEdge __useCase_flows_parallelFlow = null;\n      EMoflonEdge __parallelStep_invokedFlows_parallelFlow = null;\n      EMoflonEdge process__flowElements__sequenceFlow = null;\n      EMoflonEdge sequenceFlowToParallelFlow__target__parallelFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelFlow\"));\n\n         // ensure correct type and really bound of object parallelFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parallelFlow = (ParallelFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelGatewayToParallelStep\"));\n\n         // ensure correct type and really bound of object parallelGatewayToParallelStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         parallelGatewayToParallelStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelStep\"));\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects parallelFlow and flow \n         JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object sequenceFlow\n         sequenceFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object sequenceFlowToParallelFlow\n         sequenceFlowToParallelFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute sequenceFlow\n         sequenceFlow.setId ((java.lang.String)csp.getAttributeVariable(\"sequenceFlow\",\"id\").getValue());\n\n         // create link\n         sequenceFlowToParallelFlow.setTarget( parallelFlow);\n\n\n         // create link\n         \tprocess.getFlowElements().add(sequenceFlow); // add link\n\n\n         // create link\n         sequenceFlow.setSourceRef( parallelGateway);\n\n\n         // create link\n         sequenceFlowToParallelFlow.setSource( sequenceFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object parallelFlow is really bound\n         JavaSDM.ensure ( parallelFlow != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToParallelFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToParallelFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToParallelFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object parallelFlow is really bound\n         JavaSDM.ensure ( parallelFlow != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object sequenceFlow is really bound\n         JavaSDM.ensure ( sequenceFlow != null );\n         // check object sequenceFlowToParallelFlow is really bound\n         JavaSDM.ensure ( sequenceFlowToParallelFlow != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects parallelFlow and flow \n         JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n         // check isomorphic binding between objects parallelGateway and flow \n         JavaSDM.ensure ( !parallelGateway.equals (flow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and flow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (flow) );\n\n         // check isomorphic binding between objects parallelStep and flow \n         JavaSDM.ensure ( !parallelStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects sequenceFlow and flow \n         JavaSDM.ensure ( !sequenceFlow.equals (flow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and flow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelFlow and inFlow \n         JavaSDM.ensure ( !parallelFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and inFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelFlow and inFlowToFlow \n         JavaSDM.ensure ( !parallelFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and inFlowToFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and inFlowToFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and parallelFlow \n         JavaSDM.ensure ( !parallelGateway.equals (parallelFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelFlow) );\n\n         // check isomorphic binding between objects parallelStep and parallelFlow \n         JavaSDM.ensure ( !parallelStep.equals (parallelFlow) );\n\n         // check isomorphic binding between objects process and parallelFlow \n         JavaSDM.ensure ( !process.equals (parallelFlow) );\n\n         // check isomorphic binding between objects processToUseCase and parallelFlow \n         JavaSDM.ensure ( !processToUseCase.equals (parallelFlow) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelFlow \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelFlow) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelFlow) );\n\n         // check isomorphic binding between objects useCase and parallelFlow \n         JavaSDM.ensure ( !useCase.equals (parallelFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects process and parallelGateway \n         JavaSDM.ensure ( !process.equals (parallelGateway) );\n\n         // check isomorphic binding between objects processToUseCase and parallelGateway \n         JavaSDM.ensure ( !processToUseCase.equals (parallelGateway) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelGateway \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelGateway) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelGateway \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelGateway) );\n\n         // check isomorphic binding between objects useCase and parallelGateway \n         JavaSDM.ensure ( !useCase.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !parallelStep.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !process.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects processToUseCase and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !processToUseCase.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects useCase and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !useCase.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelStep \n         JavaSDM.ensure ( !process.equals (parallelStep) );\n\n         // check isomorphic binding between objects processToUseCase and parallelStep \n         JavaSDM.ensure ( !processToUseCase.equals (parallelStep) );\n\n         // check isomorphic binding between objects sequenceFlow and parallelStep \n         JavaSDM.ensure ( !sequenceFlow.equals (parallelStep) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and parallelStep \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (parallelStep) );\n\n         // check isomorphic binding between objects useCase and parallelStep \n         JavaSDM.ensure ( !useCase.equals (parallelStep) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlow and process \n         JavaSDM.ensure ( !sequenceFlow.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and process \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects sequenceFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and processToUseCase \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (processToUseCase) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // check isomorphic binding between objects sequenceFlowToParallelFlow and sequenceFlow \n         JavaSDM.ensure ( !sequenceFlowToParallelFlow.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlow) );\n\n         // check isomorphic binding between objects useCase and sequenceFlowToParallelFlow \n         JavaSDM.ensure ( !useCase.equals (sequenceFlowToParallelFlow) );\n\n         // create object sequenceFlow__sourceRef__parallelGateway\n         sequenceFlow__sourceRef__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGateway__outgoing__sequenceFlow\n         parallelGateway__outgoing__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlowToParallelFlow__source__sequenceFlow\n         sequenceFlowToParallelFlow__source__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_parallelFlow\n         __useCase_flows_parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __parallelStep_invokedFlows_parallelFlow\n         __parallelStep_invokedFlows_parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__sequenceFlow\n         process__flowElements__sequenceFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object sequenceFlowToParallelFlow__target__parallelFlow\n         sequenceFlowToParallelFlow__target__parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"SeqFlowAfterPGToParallelFlowRule\");\n         // assign attribute process__flowElements__sequenceFlow\n         process__flowElements__sequenceFlow.setName (\"flowElements\");\n         // assign attribute sequenceFlow__sourceRef__parallelGateway\n         sequenceFlow__sourceRef__parallelGateway.setName (\"sourceRef\");\n         // assign attribute parallelGateway__outgoing__sequenceFlow\n         parallelGateway__outgoing__sequenceFlow.setName (\"outgoing\");\n         // assign attribute __useCase_flows_parallelFlow\n         __useCase_flows_parallelFlow.setName (\"flows\");\n         // assign attribute __parallelStep_invokedFlows_parallelFlow\n         __parallelStep_invokedFlows_parallelFlow.setName (\"invokedFlows\");\n         // assign attribute sequenceFlowToParallelFlow__source__sequenceFlow\n         sequenceFlowToParallelFlow__source__sequenceFlow.setName (\"source\");\n         // assign attribute sequenceFlowToParallelFlow__target__parallelFlow\n         sequenceFlowToParallelFlow__target__parallelFlow.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlow__sourceRef__parallelGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGateway__outgoing__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToParallelFlow__source__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_parallelFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__parallelStep_invokedFlows_parallelFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__sequenceFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,sequenceFlowToParallelFlow__target__parallelFlow,\"createdEdges\");\n\n         // create link\n         process__flowElements__sequenceFlow.setSrc( process);\n\n\n         // create link\n         sequenceFlow__sourceRef__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         parallelGateway__outgoing__sequenceFlow.setSrc( parallelGateway);\n\n\n         // create link\n         sequenceFlow__sourceRef__parallelGateway.setSrc( sequenceFlow);\n\n\n         // create link\n         parallelGateway__outgoing__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         process__flowElements__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__source__sequenceFlow.setTrg( sequenceFlow);\n\n\n         // create link\n         __useCase_flows_parallelFlow.setSrc( useCase);\n\n\n         // create link\n         __parallelStep_invokedFlows_parallelFlow.setSrc( parallelStep);\n\n\n         // create link\n         sequenceFlowToParallelFlow__target__parallelFlow.setTrg( parallelFlow);\n\n\n         // create link\n         __parallelStep_invokedFlows_parallelFlow.setTrg( parallelFlow);\n\n\n         // create link\n         __useCase_flows_parallelFlow.setTrg( parallelFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__source__sequenceFlow.setSrc( sequenceFlowToParallelFlow);\n\n\n         // create link\n         sequenceFlowToParallelFlow__target__parallelFlow.setSrc( sequenceFlowToParallelFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,process,parallelGateway,sequenceFlow,inFlow,flow,inFlowToFlow,useCase,processToUseCase,parallelStep,parallelGatewayToParallelStep,parallelFlow,sequenceFlowToParallelFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Flow flow = null;\n      ParallelFlow parallelFlow = null;\n      ParallelStep parallelStep = null;\n      UseCase useCase = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __parallelGatewayToParallelStep_source_parallelGateway = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_parallelStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __useCase_flows_parallelFlow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __parallelGatewayToParallelStep_target_parallelStep = null;\n      EMoflonEdge __parallelStep_invokedFlows_parallelFlow = null;\n      CSP csp = null;\n      Process process = null;\n      Iterator fujaba__IterUseCaseToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      ParallelGateway parallelGateway = null;\n      Iterator fujaba__IterParallelStepToParallelGatewayToParallelStep = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"SeqFlowAfterPGToParallelFlowRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"parallelFlow\"));\n\n         // ensure correct type and really bound of object parallelFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parallelFlow = (ParallelFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"parallelStep\"));\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects parallelFlow and flow \n         JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               inFlow = inFlowToFlow.getSource ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n\n               // iterate to-many link target from parallelStep to parallelGatewayToParallelStep\n               fujaba__Success = false;\n\n               fujaba__IterParallelStepToParallelGatewayToParallelStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,FlowNodeToStep.class,\"target\")).iterator ();\n\n               while ( fujaba__IterParallelStepToParallelGatewayToParallelStep.hasNext () )\n               {\n                  try\n                  {\n                     parallelGatewayToParallelStep = (FlowNodeToStep) fujaba__IterParallelStepToParallelGatewayToParallelStep.next ();\n\n                     // check object parallelGatewayToParallelStep is really bound\n                     JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n                     // bind object\n                     _TmpObject = parallelGatewayToParallelStep.getSource ();\n\n                     // ensure correct type and really bound of object parallelGateway\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                     parallelGateway = (ParallelGateway) _TmpObject;\n\n                     // iterate to-many link target from useCase to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterUseCaseToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,ProcessToUseCase.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterUseCaseToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterUseCaseToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           process = processToUseCase.getSource ();\n\n                           // check object process is really bound\n                           JavaSDM.ensure ( process != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object parallelFlow is really bound\n                              JavaSDM.ensure ( parallelFlow != null );\n                              // check object parallelGateway is really bound\n                              JavaSDM.ensure ( parallelGateway != null );\n                              // check object parallelGatewayToParallelStep is really bound\n                              JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n                              // check object parallelStep is really bound\n                              JavaSDM.ensure ( parallelStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects parallelFlow and flow \n                              JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from parallelGateway to process\n                              JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link flows from parallelFlow to useCase\n                              JavaSDM.ensure (useCase.equals (parallelFlow.eContainer()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from parallelGatewayToParallelStep to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (parallelGatewayToParallelStep.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link steps from parallelStep to flow\n                              JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from parallelGatewayToParallelStep to parallelStep\n                              JavaSDM.ensure (parallelStep.equals (parallelGatewayToParallelStep.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // check link targetRef from inFlow to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link invokedFlows from parallelFlow to parallelStep\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")\n                              .contains (parallelStep));\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_parallelGateway\n                              __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __parallelGatewayToParallelStep_source_parallelGateway\n                              __parallelGatewayToParallelStep_source_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_parallelGateway\n                              __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGateway_incoming_inFlow\n                              __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_parallelStep\n                              __flow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_parallelFlow\n                              __useCase_flows_parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGatewayToParallelStep_target_parallelStep\n                              __parallelGatewayToParallelStep_target_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelStep_invokedFlows_parallelFlow\n                              __parallelStep_invokedFlows_parallelFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_flowElements_parallelGateway\n                              __process_flowElements_parallelGateway.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_parallelGateway\n                              __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n                              // assign attribute __parallelGateway_incoming_inFlow\n                              __parallelGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __flow_steps_parallelStep\n                              __flow_steps_parallelStep.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCase_flows_parallelFlow\n                              __useCase_flows_parallelFlow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __parallelStep_invokedFlows_parallelFlow\n                              __parallelStep_invokedFlows_parallelFlow.setName (\"invokedFlows\");\n                              // assign attribute __parallelGatewayToParallelStep_source_parallelGateway\n                              __parallelGatewayToParallelStep_source_parallelGateway.setName (\"source\");\n                              // assign attribute __parallelGatewayToParallelStep_target_parallelStep\n                              __parallelGatewayToParallelStep_target_parallelStep.setName (\"target\");\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_parallelGateway.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_source_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelGateway);\n\n\n                              // create link\n                              __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n                              // create link\n                              __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n                              // create link\n                              __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_parallelStep.setSrc( flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __useCase_flows_parallelFlow.setSrc( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelStep);\n\n\n                              // create link\n                              __flow_steps_parallelStep.setTrg( parallelStep);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_target_parallelStep.setTrg( parallelStep);\n\n\n                              // create link\n                              __parallelStep_invokedFlows_parallelFlow.setSrc( parallelStep);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_source_parallelGateway.setSrc( parallelGatewayToParallelStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelGatewayToParallelStep);\n\n\n                              // create link\n                              __parallelGatewayToParallelStep_target_parallelStep.setSrc( parallelGatewayToParallelStep);\n\n\n                              // create link\n                              __parallelStep_invokedFlows_parallelFlow.setTrg( parallelFlow);\n\n\n                              // create link\n                              __useCase_flows_parallelFlow.setTrg( parallelFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelStep_invokedFlows_parallelFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGatewayToParallelStep_target_parallelStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGatewayToParallelStep_source_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_parallelStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_parallelFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,process,parallelGateway,inFlow,flow,inFlowToFlow,useCase,processToUseCase,parallelStep,parallelGatewayToParallelStep,parallelFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"SeqFlowAfterPGToParallelFlowRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"flow\", flow);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"parallelStep\", parallelStep);\nmatch.registerObject(\"parallelFlow\", parallelFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Flow flow, UseCase useCase,
			ParallelStep parallelStep, ParallelFlow parallelFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Flow flow, UseCase useCase,
			ParallelStep parallelStep, ParallelFlow parallelFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelFlow.name\", true, csp);\r\nvar_parallelFlow_name.setValue(parallelFlow.getName());\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", true, csp);\r\nvar_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_sequenceFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(\"sequenceFlow.id\", csp);\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_sequenceFlow_id,var_parallelFlow_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"parallelGateway\",parallelGateway);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"parallelStep\",parallelStep);\r\nisApplicableMatch.registerObject(\"parallelGatewayToParallelStep\",parallelGatewayToParallelStep);\r\nisApplicableMatch.registerObject(\"parallelFlow\",parallelFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, ParallelGateway parallelGateway,
			SequenceFlow inFlow, Flow flow, SequenceFlowToUCFlow inFlowToFlow,
			UseCase useCase, ProcessToUseCase processToUseCase,
			ParallelStep parallelStep,
			FlowNodeToStep parallelGatewayToParallelStep,
			ParallelFlow parallelFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"parallelGateway\", parallelGateway);\nruleresult.registerObject(\"sequenceFlow\", sequenceFlow);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"parallelStep\", parallelStep);\nruleresult.registerObject(\"parallelGatewayToParallelStep\", parallelGatewayToParallelStep);\nruleresult.registerObject(\"parallelFlow\", parallelFlow);\nruleresult.registerObject(\"sequenceFlowToParallelFlow\", sequenceFlowToParallelFlow);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject process,
			EObject parallelGateway, EObject sequenceFlow, EObject inFlow,
			EObject flow, EObject inFlowToFlow, EObject useCase,
			EObject processToUseCase, EObject parallelStep,
			EObject parallelGatewayToParallelStep, EObject parallelFlow,
			EObject sequenceFlowToParallelFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"parallelFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelFlow());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_629461 = null;\n      Match match = null;\n      ParallelGateway parallelGateway = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow sequenceFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from sequenceFlow to process\n         JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects sequenceFlow and inFlow \n               JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n               // bind object\n               _TmpObject = inFlow.getTargetRef ();\n\n               // ensure correct type and really bound of object parallelGateway\n               JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n               parallelGateway = (ParallelGateway) _TmpObject;\n\n               // check link flowElements from parallelGateway to process\n               JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n               ));\n\n               // check link sourceRef from sequenceFlow to parallelGateway\n               JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_sequenceFlow_flowElements_629461 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n                     // check object __DEC_sequenceFlow_flowElements_629461 is really bound\n                     JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_629461 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_sequenceFlow_flowElements_629461.getFlowElements().contains(sequenceFlow));\n\n                     // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_629461 and process \n                     JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_629461.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from sequenceFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object parallelGateway is really bound\n                  JavaSDM.ensure ( parallelGateway != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check object sequenceFlow is really bound\n                  JavaSDM.ensure ( sequenceFlow != null );\n                  // check isomorphic binding between objects sequenceFlow and inFlow \n                  JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from parallelGateway to process\n                  JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                  ));\n\n                  // check link flowElements from sequenceFlow to process\n                  JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from sequenceFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link trg from _edge_flowElements to sequenceFlow\n                  JavaSDM.ensure (sequenceFlow.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,parallelGateway,sequenceFlow,inFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_523(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_360775 = null;\n      Match match = null;\n      Iterator fujaba__IterParallelGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      ParallelGateway parallelGateway = null;\n      SequenceFlow sequenceFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = parallelGateway.eContainer() instanceof Process ? (Process) parallelGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(parallelGateway));\n\n         // check link flowElements from sequenceFlow to process\n         JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n         ));\n\n         // check link sourceRef from sequenceFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link targetRef from parallelGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToInFlow = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterParallelGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterParallelGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects sequenceFlow and inFlow \n               JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_sequenceFlow_flowElements_360775 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n                     // check object __DEC_sequenceFlow_flowElements_360775 is really bound\n                     JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_360775 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_sequenceFlow_flowElements_360775.getFlowElements().contains(sequenceFlow));\n\n                     // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_360775 and process \n                     JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_360775.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from sequenceFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object parallelGateway is really bound\n                  JavaSDM.ensure ( parallelGateway != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check object sequenceFlow is really bound\n                  JavaSDM.ensure ( sequenceFlow != null );\n                  // check isomorphic binding between objects sequenceFlow and inFlow \n                  JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from parallelGateway to process\n                  JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                  ));\n\n                  // check link flowElements from sequenceFlow to process\n                  JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from sequenceFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_sourceRef to sequenceFlow\n                  JavaSDM.ensure (sequenceFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link trg from _edge_sourceRef to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,parallelGateway,sequenceFlow,inFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_524(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_sequenceFlow_flowElements_286051 = null;\n      Match match = null;\n      Iterator fujaba__IterSequenceFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      SequenceFlow sequenceFlow = null;\n      ParallelGateway parallelGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object sequenceFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         sequenceFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = sequenceFlow.eContainer() instanceof Process ? (Process) sequenceFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(sequenceFlow));\n\n         // check link flowElements from parallelGateway to process\n         JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n         ));\n\n         // check link sourceRef from sequenceFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects sequenceFlow and inFlow \n               JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to parallelGateway\n               JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link src from sequenceFlow to _edge_sourceRef\n               fujaba__Success = false;\n\n               fujaba__IterSequenceFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterSequenceFlowTo_edge_sourceRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_sourceRef = (EMoflonEdge) fujaba__IterSequenceFlowTo_edge_sourceRef.next ();\n\n                     // check object _edge_sourceRef is really bound\n                     JavaSDM.ensure ( _edge_sourceRef != null );\n                     // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                     JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                     // check link trg from _edge_sourceRef to parallelGateway\n                     JavaSDM.ensure (parallelGateway.equals (_edge_sourceRef.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_sequenceFlow_flowElements_286051 = sequenceFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) sequenceFlow.eContainer() : null;\n\n                           // check object __DEC_sequenceFlow_flowElements_286051 is really bound\n                           JavaSDM.ensure ( __DEC_sequenceFlow_flowElements_286051 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_sequenceFlow_flowElements_286051.getFlowElements().contains(sequenceFlow));\n\n                           // check isomorphic binding between objects __DEC_sequenceFlow_flowElements_286051 and process \n                           JavaSDM.ensure ( !__DEC_sequenceFlow_flowElements_286051.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from sequenceFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(sequenceFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // check object _edge_outgoing is really bound\n                        JavaSDM.ensure ( _edge_outgoing != null );\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object sequenceFlow is really bound\n                        JavaSDM.ensure ( sequenceFlow != null );\n                        // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                        JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                        // check isomorphic binding between objects sequenceFlow and inFlow \n                        JavaSDM.ensure ( !sequenceFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link flowElements from sequenceFlow to process\n                        JavaSDM.ensure (process.equals (sequenceFlow.eContainer()\n                        ));\n\n                        // check link sourceRef from sequenceFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (sequenceFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_outgoing to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_outgoing.getSrc ()\n                        ));\n\n                        // check link src from _edge_sourceRef to sequenceFlow\n                        JavaSDM.ensure (sequenceFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link trg from _edge_outgoing to sequenceFlow\n                        JavaSDM.ensure (sequenceFlow.equals (_edge_outgoing.getTrg ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,parallelGateway,sequenceFlow,inFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_525(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_parallelFlow_flows_126760 = null;\n      Iterator fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_467235 = null;\n      ParallelStep __DEC_parallelFlow_invokedFlows_467235 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToParallelStep = null;\n      ParallelStep parallelStep = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      ParallelFlow parallelFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object parallelFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parallelFlow = (ParallelFlow) _TmpObject;\n\n         // check link flows from parallelFlow to useCase\n         JavaSDM.ensure (useCase.equals (parallelFlow.eContainer()\n         ));\n\n         // iterate to-many link flows from useCase to flow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToFlow.hasNext () )\n         {\n            try\n            {\n               flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n               // check isomorphic binding between objects parallelFlow and flow \n               JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n               // iterate to-many link steps from flow to parallelStep\n               fujaba__Success = false;\n\n               fujaba__IterFlowToParallelStep = new ArrayList(flow.getSteps()).iterator ();\n\n               while ( fujaba__IterFlowToParallelStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterFlowToParallelStep.next ();\n\n                     // ensure correct type and really bound of object parallelStep\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n                     parallelStep = (ParallelStep) _TmpObject;\n                     // check link invokedFlows from parallelFlow to parallelStep\n                     JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")\n                     .contains (parallelStep));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelFlow_flows_126760 = parallelFlow.eContainer() instanceof UseCase ? (UseCase) parallelFlow.eContainer() : null;\n\n                           // check object __DEC_parallelFlow_flows_126760 is really bound\n                           JavaSDM.ensure ( __DEC_parallelFlow_flows_126760 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelFlow_flows_126760.getFlows().contains(parallelFlow));\n\n                           // check isomorphic binding between objects __DEC_parallelFlow_flows_126760 and useCase \n                           JavaSDM.ensure ( !__DEC_parallelFlow_flows_126760.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link ref from parallelFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,AlternativeFlowAlternative.class,\"ref\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link invokedFlows from parallelFlow to __DEC_parallelFlow_invokedFlows_467235\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_467235 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_467235.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelFlow_invokedFlows_467235 = (ParallelStep) fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_467235.next ();\n\n                                 // check object __DEC_parallelFlow_invokedFlows_467235 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelFlow_invokedFlows_467235 != null );\n                                 // check isomorphic binding between objects __DEC_parallelFlow_invokedFlows_467235 and parallelStep \n                                 JavaSDM.ensure ( !__DEC_parallelFlow_invokedFlows_467235.equals (parallelStep) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flows is really bound\n                        JavaSDM.ensure ( _edge_flows != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object parallelFlow is really bound\n                        JavaSDM.ensure ( parallelFlow != null );\n                        // check object parallelStep is really bound\n                        JavaSDM.ensure ( parallelStep != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check isomorphic binding between objects parallelFlow and flow \n                        JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link flows from parallelFlow to useCase\n                        JavaSDM.ensure (useCase.equals (parallelFlow.eContainer()\n                        ));\n\n                        // check link src from _edge_flows to useCase\n                        JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                        ));\n\n                        // check link steps from parallelStep to flow\n                        JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n                        ));\n\n                        // check link trg from _edge_flows to parallelFlow\n                        JavaSDM.ensure (parallelFlow.equals (_edge_flows.getTrg ()\n                        ));\n\n                        // check link invokedFlows from parallelFlow to parallelStep\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")\n                        .contains (parallelStep));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,flow,useCase,parallelStep,parallelFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_217(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_parallelFlow_flows_429120 = null;\n      Iterator fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_341426 = null;\n      ParallelStep __DEC_parallelFlow_invokedFlows_341426 = null;\n      Match match = null;\n      ParallelFlow parallelFlow = null;\n      UseCase useCase = null;\n      Flow flow = null;\n      ParallelStep parallelStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_invokedFlows is really bound\n         JavaSDM.ensure ( _edge_invokedFlows != null );\n         // bind object\n         _TmpObject = _edge_invokedFlows.getSrc ();\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n\n         // bind object\n         flow = parallelStep.eContainer() instanceof Flow ? (Flow) parallelStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(parallelStep));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_invokedFlows.getTrg ();\n\n         // ensure correct type and really bound of object parallelFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parallelFlow = (ParallelFlow) _TmpObject;\n\n         // check isomorphic binding between objects parallelFlow and flow \n         JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n         // check link flows from parallelFlow to useCase\n         JavaSDM.ensure (useCase.equals (parallelFlow.eContainer()\n         ));\n\n         // check link invokedFlows from parallelFlow to parallelStep\n         JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")\n         .contains (parallelStep));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_parallelFlow_flows_429120 = parallelFlow.eContainer() instanceof UseCase ? (UseCase) parallelFlow.eContainer() : null;\n\n               // check object __DEC_parallelFlow_flows_429120 is really bound\n               JavaSDM.ensure ( __DEC_parallelFlow_flows_429120 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_parallelFlow_flows_429120.getFlows().contains(parallelFlow));\n\n               // check isomorphic binding between objects __DEC_parallelFlow_flows_429120 and useCase \n               JavaSDM.ensure ( !__DEC_parallelFlow_flows_429120.equals (useCase) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link ref from parallelFlow\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,AlternativeFlowAlternative.class,\"ref\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link invokedFlows from parallelFlow to __DEC_parallelFlow_invokedFlows_341426\n               fujaba__Success = false;\n\n               fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_341426 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_341426.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_parallelFlow_invokedFlows_341426 = (ParallelStep) fujaba__IterParallelFlowTo__DEC_parallelFlow_invokedFlows_341426.next ();\n\n                     // check object __DEC_parallelFlow_invokedFlows_341426 is really bound\n                     JavaSDM.ensure ( __DEC_parallelFlow_invokedFlows_341426 != null );\n                     // check isomorphic binding between objects __DEC_parallelFlow_invokedFlows_341426 and parallelStep \n                     JavaSDM.ensure ( !__DEC_parallelFlow_invokedFlows_341426.equals (parallelStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_invokedFlows is really bound\n            JavaSDM.ensure ( _edge_invokedFlows != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object parallelFlow is really bound\n            JavaSDM.ensure ( parallelFlow != null );\n            // check object parallelStep is really bound\n            JavaSDM.ensure ( parallelStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects parallelFlow and flow \n            JavaSDM.ensure ( !parallelFlow.equals (flow) );\n\n            // check link flows from flow to useCase\n            JavaSDM.ensure (useCase.equals (flow.eContainer()\n            ));\n\n            // check link flows from parallelFlow to useCase\n            JavaSDM.ensure (useCase.equals (parallelFlow.eContainer()\n            ));\n\n            // check link src from _edge_invokedFlows to parallelStep\n            JavaSDM.ensure (parallelStep.equals (_edge_invokedFlows.getSrc ()\n            ));\n\n            // check link steps from parallelStep to flow\n            JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n            ));\n\n            // check link trg from _edge_invokedFlows to parallelFlow\n            JavaSDM.ensure (parallelFlow.equals (_edge_invokedFlows.getTrg ()\n            ));\n\n            // check link invokedFlows from parallelFlow to parallelStep\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelFlow,ParallelStep.class,\"invokedFlows\")\n            .contains (parallelStep));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,flow,useCase,parallelStep,parallelFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_218(
			EMoflonEdge _edge_invokedFlows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      SequenceFlow sequenceFlow = null;\n      SequenceFlowToUCFlow sequenceFlowToParallelFlow = null;\n      ParallelFlow parallelFlow = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      ParallelStep parallelStep = null;\n      Iterator fujaba__IterParallelGatewayToParallelGatewayToParallelStep = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      ParallelGateway parallelGateway = null;\n      Flow flow = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToFlowListToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToFlowList = null;\n      RuleEntryList inFlowToFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToFlowList.hasNext () )\n         {\n            try\n            {\n               inFlowToFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToFlowList.next ();\n\n               // check object inFlowToFlowList is really bound\n               JavaSDM.ensure ( inFlowToFlowList != null );\n               // iterate to-many link entryObjects from inFlowToFlowList to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToFlowListToInFlowToFlow = new ArrayList(inFlowToFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToFlowListToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToFlowListToInFlowToFlow.next ();\n\n                     // ensure correct type and really bound of object inFlowToFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof Process );\n                     process = (Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     flow = inFlowToFlow.getTarget ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.getTargetRef ();\n\n                     // ensure correct type and really bound of object parallelGateway\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                     parallelGateway = (ParallelGateway) _TmpObject;\n\n                     // check link flowElements from parallelGateway to process\n                     JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                     ));\n\n                     // iterate to-many link source from parallelGateway to parallelGatewayToParallelStep\n                     fujaba__Success = false;\n\n                     fujaba__IterParallelGatewayToParallelGatewayToParallelStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterParallelGatewayToParallelGatewayToParallelStep.hasNext () )\n                     {\n                        try\n                        {\n                           parallelGatewayToParallelStep = (FlowNodeToStep) fujaba__IterParallelGatewayToParallelGatewayToParallelStep.next ();\n\n                           // check object parallelGatewayToParallelStep is really bound\n                           JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n                           // bind object\n                           _TmpObject = parallelGatewayToParallelStep.getTarget ();\n\n                           // ensure correct type and really bound of object parallelStep\n                           JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n                           parallelStep = (ParallelStep) _TmpObject;\n\n                           // check link steps from parallelStep to flow\n                           JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n                           ));\n\n                           // iterate to-many link source from process to processToUseCase\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n                           {\n                              try\n                              {\n                                 processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                                 // check object processToUseCase is really bound\n                                 JavaSDM.ensure ( processToUseCase != null );\n                                 // bind object\n                                 useCase = processToUseCase.getTarget ();\n\n                                 // check object useCase is really bound\n                                 JavaSDM.ensure ( useCase != null );\n\n                                 // check link flows from flow to useCase\n                                 JavaSDM.ensure (useCase.equals (flow.eContainer()\n                                 ));\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,process,parallelGateway,sequenceFlow,inFlow,flow,inFlowToFlow,useCase,processToUseCase,parallelStep,parallelGatewayToParallelStep,parallelFlow,sequenceFlowToParallelFlow,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object inFlow is really bound\n                                       JavaSDM.ensure ( inFlow != null );\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // check object parallelGateway is really bound\n                                       JavaSDM.ensure ( parallelGateway != null );\n                                       // check object parallelGatewayToParallelStep is really bound\n                                       JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n                                       // check object parallelStep is really bound\n                                       JavaSDM.ensure ( parallelStep != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object processToUseCase is really bound\n                                       JavaSDM.ensure ( processToUseCase != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // check object useCase is really bound\n                                       JavaSDM.ensure ( useCase != null );\n                                       // create object sequenceFlow\n                                       sequenceFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // create object sequenceFlowToParallelFlow\n                                       sequenceFlowToParallelFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // create object parallelFlow\n                                       parallelFlow = UseCaseDSLFactory.eINSTANCE.createParallelFlow();\n\n                                       // assign attribute sequenceFlow\n                                       sequenceFlow.setId ((java.lang.String)csp.getAttributeVariable(\"sequenceFlow\",\"id\").getValue());\n                                       // assign attribute parallelFlow\n                                       parallelFlow.setName ((java.lang.String)csp.getAttributeVariable(\"parallelFlow\",\"name\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(sequenceFlow); // add link\n\n\n                                       // create link\n                                       sequenceFlow.setSourceRef( parallelGateway);\n\n\n                                       // create link\n                                       sequenceFlowToParallelFlow.setSource( sequenceFlow);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(sequenceFlow);\n\n\n                                       // create link\n                                       \tuseCase.getFlows().add(parallelFlow); // add link\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(parallelStep,parallelFlow,\"invokedFlows\");\n\n                                       // create link\n                                       ruleResult.getTargetObjects().add(parallelFlow);\n\n\n                                       // create link\n                                       sequenceFlowToParallelFlow.setTarget( parallelFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(sequenceFlowToParallelFlow);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToUCFlow inFlowToFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", true, csp);\r\nvar_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_sequenceFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(\"sequenceFlow.id\", csp);\r\nVariable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelFlow.name\", csp);\r\n\r\n// Create constraints\r\nEq_modelgenGatewayDirection eq_modelgenGatewayDirection = new Eq_modelgenGatewayDirection();Eq_modelgen eq_modelgen = new Eq_modelgen();\r\n\r\ncsp.getConstraints().add(eq_modelgenGatewayDirection);\r\ncsp.getConstraints().add(eq_modelgen);\r\n\r\n// Solve CSP\r\neq_modelgenGatewayDirection.setRuleName(\"\");\r\neq_modelgenGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\neq_modelgen.setRuleName(\"\");\r\neq_modelgen.solve(var_sequenceFlow_id,var_parallelFlow_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"parallelGateway\",parallelGateway);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"parallelStep\",parallelStep);\r\nisApplicableMatch.registerObject(\"parallelGatewayToParallelStep\",parallelGatewayToParallelStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, ParallelGateway parallelGateway,
			SequenceFlow sequenceFlow, SequenceFlow inFlow, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, UseCase useCase,
			ProcessToUseCase processToUseCase, ParallelStep parallelStep,
			FlowNodeToStep parallelGatewayToParallelStep,
			ParallelFlow parallelFlow,
			SequenceFlowToUCFlow sequenceFlowToParallelFlow,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // SeqFlowAfterPGToParallelFlowRule
