/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Parallel Converging Gateway Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getParallelConvergingGatewayRule()
 * @model
 * @generated
 */
public interface ParallelConvergingGatewayRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __parallelGateway_outgoing_outFlow = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __outFlow_sourceRef_parallelGateway = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,parallelGateway,outFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object parallelGateway is really bound\n            JavaSDM.ensure ( parallelGateway != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __parallelGateway_outgoing_outFlow\n            __parallelGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __parallelGateway_incoming_inFlow\n            __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_parallelGateway\n            __outFlow_sourceRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_parallelGateway\n            __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_parallelGateway\n            __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_parallelGateway\n            __process_flowElements_parallelGateway.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_parallelGateway\n            __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n            // assign attribute __parallelGateway_incoming_inFlow\n            __parallelGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __outFlow_sourceRef_parallelGateway\n            __outFlow_sourceRef_parallelGateway.setName (\"sourceRef\");\n            // assign attribute __parallelGateway_outgoing_outFlow\n            __parallelGateway_outgoing_outFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__parallelGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__parallelGateway_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parallelGateway,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_parallelGateway.setSrc( process);\n\n\n            // create link\n            __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n            // create link\n            __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n            // create link\n            __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __parallelGateway_outgoing_outFlow.setSrc( parallelGateway);\n\n\n            // create link\n            __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __outFlow_sourceRef_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __parallelGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_parallelGateway.setSrc( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object parallelGateway is really bound\n            JavaSDM.ensure ( parallelGateway != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,parallelGateway,outFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ParallelGateway parallelGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      ParallelFlow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Flow initFlow = null;\n      SequenceFlow outFlow = null;\n      ParallelGateway parallelGateway = null;\n      ParallelStep parallelStep = null;\n      Process process = null;\n      Step step = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      SequenceFlowToUCFlow outFlowToInitFlow = null;\n      SequenceFlowToStep outFlowToParallelStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __outFlow_sourceRef_parallelGateway = null;\n      EMoflonEdge outFlowToInitFlow__target__initFlow = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge parallelGatewayToParallelStep__target__parallelStep = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge outFlowToInitFlow__source__outFlow = null;\n      EMoflonEdge outFlowToParallelStep__target__parallelStep = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __parallelGateway_outgoing_outFlow = null;\n      EMoflonEdge parallelGatewayToParallelStep__source__parallelGateway = null;\n      EMoflonEdge outFlowToParallelStep__source__outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         flow = (ParallelFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToStep\"));\n\n         // ensure correct type and really bound of object inFlowToStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"initFlow\"));\n\n         // ensure correct type and really bound of object initFlow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         initFlow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelStep\"));\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects initFlow and flow \n         JavaSDM.ensure ( !initFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object parallelGatewayToParallelStep\n         parallelGatewayToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToInitFlow\n         outFlowToInitFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlowToParallelStep\n         outFlowToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n\n         // create link\n         parallelGatewayToParallelStep.setSource( parallelGateway);\n\n\n         // create link\n         outFlowToInitFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToParallelStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToInitFlow.setTarget( initFlow);\n\n\n         // create link\n         parallelGatewayToParallelStep.setTarget( parallelStep);\n\n\n         // create link\n         outFlowToParallelStep.setTarget( parallelStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToInitFlow is really bound\n         JavaSDM.ensure ( outFlowToInitFlow != null );\n         // check object outFlowToParallelStep is really bound\n         JavaSDM.ensure ( outFlowToParallelStep != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGateway,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToParallelStep,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToStep is really bound\n         JavaSDM.ensure ( inFlowToStep != null );\n         // check object initFlow is really bound\n         JavaSDM.ensure ( initFlow != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToInitFlow is really bound\n         JavaSDM.ensure ( outFlowToInitFlow != null );\n         // check object outFlowToParallelStep is really bound\n         JavaSDM.ensure ( outFlowToParallelStep != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToStep and flow \n         JavaSDM.ensure ( !inFlowToStep.equals (flow) );\n\n         // check isomorphic binding between objects initFlow and flow \n         JavaSDM.ensure ( !initFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and flow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and flow \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (flow) );\n\n         // check isomorphic binding between objects parallelGateway and flow \n         JavaSDM.ensure ( !parallelGateway.equals (flow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and flow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (flow) );\n\n         // check isomorphic binding between objects parallelStep and flow \n         JavaSDM.ensure ( !parallelStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlow \n         JavaSDM.ensure ( !initFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and inFlow \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects step and inFlow \n         JavaSDM.ensure ( !step.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlowToFlow \n         JavaSDM.ensure ( !initFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects step and inFlowToFlow \n         JavaSDM.ensure ( !step.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects initFlow and inFlowToStep \n         JavaSDM.ensure ( !initFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and inFlowToStep \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and inFlowToStep \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToStep \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToStep \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToStep \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects process and inFlowToStep \n         JavaSDM.ensure ( !process.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects step and inFlowToStep \n         JavaSDM.ensure ( !step.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects outFlow and initFlow \n         JavaSDM.ensure ( !outFlow.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and initFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and initFlow \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (initFlow) );\n\n         // check isomorphic binding between objects parallelGateway and initFlow \n         JavaSDM.ensure ( !parallelGateway.equals (initFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and initFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (initFlow) );\n\n         // check isomorphic binding between objects parallelStep and initFlow \n         JavaSDM.ensure ( !parallelStep.equals (initFlow) );\n\n         // check isomorphic binding between objects process and initFlow \n         JavaSDM.ensure ( !process.equals (initFlow) );\n\n         // check isomorphic binding between objects step and initFlow \n         JavaSDM.ensure ( !step.equals (initFlow) );\n\n         // check isomorphic binding between objects outFlowToInitFlow and outFlow \n         JavaSDM.ensure ( !outFlowToInitFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and outFlow \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (outFlow) );\n\n         // check isomorphic binding between objects parallelGateway and outFlow \n         JavaSDM.ensure ( !parallelGateway.equals (outFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and outFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (outFlow) );\n\n         // check isomorphic binding between objects parallelStep and outFlow \n         JavaSDM.ensure ( !parallelStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects step and outFlow \n         JavaSDM.ensure ( !step.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToParallelStep and outFlowToInitFlow \n         JavaSDM.ensure ( !outFlowToParallelStep.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects parallelGateway and outFlowToInitFlow \n         JavaSDM.ensure ( !parallelGateway.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and outFlowToInitFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects parallelStep and outFlowToInitFlow \n         JavaSDM.ensure ( !parallelStep.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects process and outFlowToInitFlow \n         JavaSDM.ensure ( !process.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects step and outFlowToInitFlow \n         JavaSDM.ensure ( !step.equals (outFlowToInitFlow) );\n\n         // check isomorphic binding between objects parallelGateway and outFlowToParallelStep \n         JavaSDM.ensure ( !parallelGateway.equals (outFlowToParallelStep) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and outFlowToParallelStep \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (outFlowToParallelStep) );\n\n         // check isomorphic binding between objects parallelStep and outFlowToParallelStep \n         JavaSDM.ensure ( !parallelStep.equals (outFlowToParallelStep) );\n\n         // check isomorphic binding between objects process and outFlowToParallelStep \n         JavaSDM.ensure ( !process.equals (outFlowToParallelStep) );\n\n         // check isomorphic binding between objects step and outFlowToParallelStep \n         JavaSDM.ensure ( !step.equals (outFlowToParallelStep) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects process and parallelGateway \n         JavaSDM.ensure ( !process.equals (parallelGateway) );\n\n         // check isomorphic binding between objects step and parallelGateway \n         JavaSDM.ensure ( !step.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !parallelStep.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !process.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects step and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !step.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelStep \n         JavaSDM.ensure ( !process.equals (parallelStep) );\n\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // check isomorphic binding between objects step and process \n         JavaSDM.ensure ( !step.equals (process) );\n\n         // create object __outFlow_sourceRef_parallelGateway\n         __outFlow_sourceRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToInitFlow__target__initFlow\n         outFlowToInitFlow__target__initFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_parallelGateway\n         __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGatewayToParallelStep__target__parallelStep\n         parallelGatewayToParallelStep__target__parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __parallelGateway_incoming_inFlow\n         __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToInitFlow__source__outFlow\n         outFlowToInitFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToParallelStep__target__parallelStep\n         outFlowToParallelStep__target__parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_parallelGateway\n         __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __parallelGateway_outgoing_outFlow\n         __parallelGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGatewayToParallelStep__source__parallelGateway\n         parallelGatewayToParallelStep__source__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToParallelStep__source__outFlow\n         outFlowToParallelStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ParallelConvergingGatewayRule\");\n         // assign attribute __process_flowElements_parallelGateway\n         __process_flowElements_parallelGateway.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_parallelGateway\n         __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n         // assign attribute __parallelGateway_incoming_inFlow\n         __parallelGateway_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __outFlow_sourceRef_parallelGateway\n         __outFlow_sourceRef_parallelGateway.setName (\"sourceRef\");\n         // assign attribute __parallelGateway_outgoing_outFlow\n         __parallelGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute parallelGatewayToParallelStep__source__parallelGateway\n         parallelGatewayToParallelStep__source__parallelGateway.setName (\"source\");\n         // assign attribute parallelGatewayToParallelStep__target__parallelStep\n         parallelGatewayToParallelStep__target__parallelStep.setName (\"target\");\n         // assign attribute outFlowToInitFlow__source__outFlow\n         outFlowToInitFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToInitFlow__target__initFlow\n         outFlowToInitFlow__target__initFlow.setName (\"target\");\n         // assign attribute outFlowToParallelStep__source__outFlow\n         outFlowToParallelStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToParallelStep__target__parallelStep\n         outFlowToParallelStep__target__parallelStep.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow__target__initFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep__target__parallelStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__parallelGateway_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToInitFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToParallelStep__target__parallelStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__parallelGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep__source__parallelGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToParallelStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         __process_flowElements_parallelGateway.setSrc( process);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __parallelGateway_outgoing_outFlow.setSrc( parallelGateway);\n\n\n         // create link\n         __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __outFlow_sourceRef_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         parallelGatewayToParallelStep__source__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n         // create link\n         __parallelGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToInitFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToParallelStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_parallelGateway.setSrc( outFlow);\n\n\n         // create link\n         outFlowToInitFlow__target__initFlow.setTrg( initFlow);\n\n\n         // create link\n         outFlowToParallelStep__target__parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__target__parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__source__parallelGateway.setSrc( parallelGatewayToParallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__target__parallelStep.setSrc( parallelGatewayToParallelStep);\n\n\n         // create link\n         outFlowToInitFlow__target__initFlow.setSrc( outFlowToInitFlow);\n\n\n         // create link\n         outFlowToInitFlow__source__outFlow.setSrc( outFlowToInitFlow);\n\n\n         // create link\n         outFlowToParallelStep__target__parallelStep.setSrc( outFlowToParallelStep);\n\n\n         // create link\n         outFlowToParallelStep__source__outFlow.setSrc( outFlowToParallelStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,inFlow,parallelGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,initFlow,parallelStep,parallelGatewayToParallelStep,outFlowToInitFlow,outFlowToParallelStep);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      ParallelGateway parallelGateway = null;\n      Process process = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __inFlowToStep_source_inFlow = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __parallelGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_parallelGateway = null;\n      EMoflonEdge __parallelStep_invokedFlows_flow = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __inFlowToStep_target_step = null;\n      EMoflonEdge __initFlow_steps_parallelStep = null;\n      CSP csp = null;\n      Flow initFlow = null;\n      Iterator fujaba__IterFlowToParallelStep = null;\n      ParallelStep parallelStep = null;\n      Step step = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      ParallelFlow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ParallelConvergingGatewayRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               _TmpObject = inFlowToFlow.getTarget ();\n\n               // ensure correct type and really bound of object flow\n               JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n               flow = (ParallelFlow) _TmpObject;\n\n               // iterate to-many link source from inFlow to inFlowToStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                     // check object inFlowToStep is really bound\n                     JavaSDM.ensure ( inFlowToStep != null );\n                     // bind object\n                     step = inFlowToStep.getTarget ();\n\n                     // check object step is really bound\n                     JavaSDM.ensure ( step != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object inFlowToStep is really bound\n                        JavaSDM.ensure ( inFlowToStep != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from inFlowToStep to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToStep.getSource ()\n                        ));\n\n                        // check link sourceRef from outFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link steps from step to flow\n                        JavaSDM.ensure (flow.equals (step.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from inFlowToStep to step\n                        JavaSDM.ensure (step.equals (inFlowToStep.getTarget ()\n                        ));\n\n                        // check link targetRef from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // iterate to-many link invokedFlows from flow to parallelStep\n                        fujaba__Success = false;\n\n                        fujaba__IterFlowToParallelStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n                        while ( fujaba__IterFlowToParallelStep.hasNext () )\n                        {\n                           try\n                           {\n                              parallelStep = (ParallelStep) fujaba__IterFlowToParallelStep.next ();\n\n                              // check object parallelStep is really bound\n                              JavaSDM.ensure ( parallelStep != null );\n                              // check isomorphic binding between objects step and parallelStep \n                              JavaSDM.ensure ( !step.equals (parallelStep) );\n\n                              // bind object\n                              initFlow = parallelStep.eContainer() instanceof Flow ? (Flow) parallelStep.eContainer() : null;\n\n                              // check object initFlow is really bound\n                              JavaSDM.ensure ( initFlow != null );\n\n                              // check if contained via correct reference\n                              JavaSDM.ensure(initFlow.getSteps().contains(parallelStep));\n\n                              // check isomorphic binding between objects initFlow and flow \n                              JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_parallelGateway\n                              __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_parallelGateway\n                              __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToStep_source_inFlow\n                              __inFlowToStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGateway_incoming_inFlow\n                              __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelGateway_outgoing_outFlow\n                              __parallelGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_sourceRef_parallelGateway\n                              __outFlow_sourceRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __parallelStep_invokedFlows_flow\n                              __parallelStep_invokedFlows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_step\n                              __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToStep_target_step\n                              __inFlowToStep_target_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __initFlow_steps_parallelStep\n                              __initFlow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_parallelGateway\n                              __process_flowElements_parallelGateway.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_parallelGateway\n                              __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n                              // assign attribute __parallelGateway_incoming_inFlow\n                              __parallelGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __outFlow_sourceRef_parallelGateway\n                              __outFlow_sourceRef_parallelGateway.setName (\"sourceRef\");\n                              // assign attribute __parallelGateway_outgoing_outFlow\n                              __parallelGateway_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __flow_steps_step\n                              __flow_steps_step.setName (\"steps\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __inFlowToStep_source_inFlow\n                              __inFlowToStep_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToStep_target_step\n                              __inFlowToStep_target_step.setName (\"target\");\n                              // assign attribute __initFlow_steps_parallelStep\n                              __initFlow_steps_parallelStep.setName (\"steps\");\n                              // assign attribute __parallelStep_invokedFlows_flow\n                              __parallelStep_invokedFlows_flow.setName (\"invokedFlows\");\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_parallelGateway.setSrc( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n                              // create link\n                              __inFlowToStep_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __parallelGateway_outgoing_outFlow.setSrc( parallelGateway);\n\n\n                              // create link\n                              __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_parallelGateway.setTrg( parallelGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_parallelGateway.setSrc( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __parallelGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __parallelStep_invokedFlows_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_step.setSrc( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToStep_target_step.setTrg( step);\n\n\n                              // create link\n                              __flow_steps_step.setTrg( step);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(step);\n\n\n                              // create link\n                              __inFlowToStep_target_step.setSrc( inFlowToStep);\n\n\n                              // create link\n                              __inFlowToStep_source_inFlow.setSrc( inFlowToStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(initFlow);\n\n\n                              // create link\n                              __initFlow_steps_parallelStep.setSrc( initFlow);\n\n\n                              // create link\n                              __parallelStep_invokedFlows_flow.setSrc( parallelStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(parallelStep);\n\n\n                              // create link\n                              __initFlow_steps_parallelStep.setTrg( parallelStep);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelStep_invokedFlows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGateway_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__initFlow_steps_parallelStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_parallelGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_target_step,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,inFlow,parallelGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,initFlow,parallelStep));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"ParallelConvergingGatewayRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"parallelGateway\", parallelGateway);\nmatch.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ParallelGateway parallelGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\n\r\n// Create attribute variables\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", true, csp);\r\nvar_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, ParallelGateway parallelGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"parallelGateway\",parallelGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"initFlow\",initFlow);\r\nisApplicableMatch.registerObject(\"parallelStep\",parallelStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			ParallelGateway parallelGateway, SequenceFlow outFlow,
			ParallelFlow flow, SequenceFlowToUCFlow inFlowToFlow, Step step,
			SequenceFlowToStep inFlowToStep, Flow initFlow,
			ParallelStep parallelStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"parallelGateway\", parallelGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"inFlowToStep\", inFlowToStep);\nruleresult.registerObject(\"initFlow\", initFlow);\nruleresult.registerObject(\"parallelStep\", parallelStep);\nruleresult.registerObject(\"parallelGatewayToParallelStep\", parallelGatewayToParallelStep);\nruleresult.registerObject(\"outFlowToInitFlow\", outFlowToInitFlow);\nruleresult.registerObject(\"outFlowToParallelStep\", outFlowToParallelStep);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject parallelGateway, EObject outFlow,
			EObject flow, EObject inFlowToFlow, EObject step,
			EObject inFlowToStep, EObject initFlow, EObject parallelStep,
			EObject parallelGatewayToParallelStep, EObject outFlowToInitFlow,
			EObject outFlowToParallelStep);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"parallelGateway\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getParallelGateway()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_385757 = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_829802 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_346885 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_346885 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ParallelGateway parallelGateway = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // check link flowElements from parallelGateway to process\n         JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check link targetRef from inFlow to parallelGateway\n               JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowElements from process to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterProcessToOutFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToOutFlow.next ();\n\n                     // ensure correct type and really bound of object outFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n                     outFlow = (SequenceFlow) _TmpObject;\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link sourceRef from outFlow to parallelGateway\n                     JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_385757 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_385757 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_385757 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_385757.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_385757 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_385757.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelGateway_flowElements_829802 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                           // check object __DEC_parallelGateway_flowElements_829802 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_flowElements_829802 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelGateway_flowElements_829802.getFlowElements().contains(parallelGateway));\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_flowElements_829802 and process \n                           JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_829802.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from parallelGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from parallelGateway to __DEC_parallelGateway_targetRef_346885\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_346885 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_346885.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelGateway_targetRef_346885 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_346885.next ();\n\n                                 // check object __DEC_parallelGateway_targetRef_346885 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_targetRef_346885 != null );\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_346885 and inFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_346885.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_346885 and outFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_346885.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to parallelGateway\n                        JavaSDM.ensure (!(parallelGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_flowElements to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,parallelGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_514(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_125656 = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_903234 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_810738 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_810738 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToParallelGateway = null;\n      ParallelGateway parallelGateway = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // iterate to-many link flowElements from process to parallelGateway\n               fujaba__Success = false;\n\n               fujaba__IterProcessToParallelGateway = new ArrayList(process.getFlowElements()).iterator ();\n\n               while ( fujaba__IterProcessToParallelGateway.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterProcessToParallelGateway.next ();\n\n                     // ensure correct type and really bound of object parallelGateway\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n                     parallelGateway = (ParallelGateway) _TmpObject;\n                     // check link sourceRef from outFlow to parallelGateway\n                     JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                     ));\n\n                     // check link targetRef from inFlow to parallelGateway\n                     JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_125656 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_125656 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_125656 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_125656.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_125656 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_125656.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelGateway_flowElements_903234 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                           // check object __DEC_parallelGateway_flowElements_903234 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_flowElements_903234 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelGateway_flowElements_903234.getFlowElements().contains(parallelGateway));\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_flowElements_903234 and process \n                           JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_903234.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from parallelGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from parallelGateway to __DEC_parallelGateway_targetRef_810738\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_810738 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_810738.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelGateway_targetRef_810738 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_810738.next ();\n\n                                 // check object __DEC_parallelGateway_targetRef_810738 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_targetRef_810738 != null );\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_810738 and inFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_810738.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_810738 and outFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_810738.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to parallelGateway\n                        JavaSDM.ensure (!(parallelGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_flowElements to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,parallelGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_515(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_362998 = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_211471 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_146416 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_146416 = null;\n      Match match = null;\n      Iterator fujaba__IterParallelGatewayToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      ParallelGateway parallelGateway = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = parallelGateway.eContainer() instanceof Process ? (Process) parallelGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(parallelGateway));\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link targetRef from inFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link sourceRef from parallelGateway to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToOutFlow = new ArrayList(parallelGateway.getOutgoing()).iterator ();\n\n         while ( fujaba__IterParallelGatewayToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterParallelGatewayToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_362998 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_362998 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_362998 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_362998.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_362998 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_362998.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_parallelGateway_flowElements_211471 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                     // check object __DEC_parallelGateway_flowElements_211471 is really bound\n                     JavaSDM.ensure ( __DEC_parallelGateway_flowElements_211471 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_parallelGateway_flowElements_211471.getFlowElements().contains(parallelGateway));\n\n                     // check isomorphic binding between objects __DEC_parallelGateway_flowElements_211471 and process \n                     JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_211471.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from parallelGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from parallelGateway to __DEC_parallelGateway_targetRef_146416\n                     fujaba__Success = false;\n\n                     fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_146416 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_146416.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_parallelGateway_targetRef_146416 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_146416.next ();\n\n                           // check object __DEC_parallelGateway_targetRef_146416 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_targetRef_146416 != null );\n                           // check isomorphic binding between objects __DEC_parallelGateway_targetRef_146416 and inFlow \n                           JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_146416.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_targetRef_146416 and outFlow \n                           JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_146416.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_targetRef is really bound\n                  JavaSDM.ensure ( _edge_targetRef != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object parallelGateway is really bound\n                  JavaSDM.ensure ( parallelGateway != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link flowElements from parallelGateway to process\n                  JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_targetRef to inFlow\n                  JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to parallelGateway\n                  JavaSDM.ensure (!(parallelGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_targetRef to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (_edge_targetRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,parallelGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_516(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_735063 = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_747731 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_134918 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_134918 = null;\n      Match match = null;\n      Iterator fujaba__IterParallelGatewayTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterParallelGatewayToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      ParallelGateway parallelGateway = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = parallelGateway.eContainer() instanceof Process ? (Process) parallelGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(parallelGateway));\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link targetRef from inFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link sourceRef from parallelGateway to outFlow\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToOutFlow = new ArrayList(parallelGateway.getOutgoing()).iterator ();\n\n         while ( fujaba__IterParallelGatewayToOutFlow.hasNext () )\n         {\n            try\n            {\n               outFlow = (SequenceFlow) fujaba__IterParallelGatewayToOutFlow.next ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // iterate to-many link trg from parallelGateway to _edge_targetRef\n               fujaba__Success = false;\n\n               fujaba__IterParallelGatewayTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n               while ( fujaba__IterParallelGatewayTo_edge_targetRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_targetRef = (EMoflonEdge) fujaba__IterParallelGatewayTo_edge_targetRef.next ();\n\n                     // check object _edge_targetRef is really bound\n                     JavaSDM.ensure ( _edge_targetRef != null );\n                     // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                     JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                     // check link src from _edge_targetRef to inFlow\n                     JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_735063 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_735063 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_735063 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_735063.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_735063 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_735063.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelGateway_flowElements_747731 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                           // check object __DEC_parallelGateway_flowElements_747731 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_flowElements_747731 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelGateway_flowElements_747731.getFlowElements().contains(parallelGateway));\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_flowElements_747731 and process \n                           JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_747731.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from parallelGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from parallelGateway to __DEC_parallelGateway_targetRef_134918\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_134918 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_134918.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelGateway_targetRef_134918 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_134918.next ();\n\n                                 // check object __DEC_parallelGateway_targetRef_134918 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_targetRef_134918 != null );\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_134918 and inFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_134918.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_134918 and outFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_134918.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_incoming is really bound\n                        JavaSDM.ensure ( _edge_incoming != null );\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                        JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_incoming to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_incoming.getSrc ()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to parallelGateway\n                        JavaSDM.ensure (!(parallelGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_incoming to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                        ));\n\n                        // check link trg from _edge_targetRef to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,parallelGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_517(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_543932 = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_401683 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_87884 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_87884 = null;\n      Match match = null;\n      Iterator fujaba__IterParallelGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      ParallelGateway parallelGateway = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = parallelGateway.eContainer() instanceof Process ? (Process) parallelGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(parallelGateway));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link targetRef from parallelGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToInFlow = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterParallelGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterParallelGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_543932 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_543932 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_543932 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_543932.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_543932 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_543932.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_parallelGateway_flowElements_401683 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                     // check object __DEC_parallelGateway_flowElements_401683 is really bound\n                     JavaSDM.ensure ( __DEC_parallelGateway_flowElements_401683 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_parallelGateway_flowElements_401683.getFlowElements().contains(parallelGateway));\n\n                     // check isomorphic binding between objects __DEC_parallelGateway_flowElements_401683 and process \n                     JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_401683.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link default from outFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                  // negative check for link flowNodeRefs from parallelGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link targetRef from parallelGateway to __DEC_parallelGateway_targetRef_87884\n                     fujaba__Success = false;\n\n                     fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_87884 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_87884.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_parallelGateway_targetRef_87884 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_87884.next ();\n\n                           // check object __DEC_parallelGateway_targetRef_87884 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_targetRef_87884 != null );\n                           // check isomorphic binding between objects __DEC_parallelGateway_targetRef_87884 and inFlow \n                           JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_87884.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_targetRef_87884 and outFlow \n                           JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_87884.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object parallelGateway is really bound\n                  JavaSDM.ensure ( parallelGateway != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link flowElements from parallelGateway to process\n                  JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                  ));\n\n                  // check link sourceRef from outFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_sourceRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link targetRef from inFlow to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link targetRef from outFlow to parallelGateway\n                  JavaSDM.ensure (!(parallelGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link trg from _edge_sourceRef to parallelGateway\n                  JavaSDM.ensure (parallelGateway.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,parallelGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_518(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_287101 = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_180341 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_497243 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_497243 = null;\n      Match match = null;\n      Iterator fujaba__IterOutFlowTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      ParallelGateway parallelGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = outFlow.eContainer() instanceof Process ? (Process) outFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(outFlow));\n\n         // check link flowElements from parallelGateway to process\n         JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link targetRef from inFlow to parallelGateway\n               JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link src from outFlow to _edge_sourceRef\n               fujaba__Success = false;\n\n               fujaba__IterOutFlowTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterOutFlowTo_edge_sourceRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_sourceRef = (EMoflonEdge) fujaba__IterOutFlowTo_edge_sourceRef.next ();\n\n                     // check object _edge_sourceRef is really bound\n                     JavaSDM.ensure ( _edge_sourceRef != null );\n                     // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                     JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                     // check link trg from _edge_sourceRef to parallelGateway\n                     JavaSDM.ensure (parallelGateway.equals (_edge_sourceRef.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_287101 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_287101 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_287101 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_287101.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_287101 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_287101.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelGateway_flowElements_180341 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                           // check object __DEC_parallelGateway_flowElements_180341 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_flowElements_180341 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelGateway_flowElements_180341.getFlowElements().contains(parallelGateway));\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_flowElements_180341 and process \n                           JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_180341.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // negative check for link flowNodeRefs from parallelGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from parallelGateway to __DEC_parallelGateway_targetRef_497243\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_497243 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_497243.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelGateway_targetRef_497243 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_497243.next ();\n\n                                 // check object __DEC_parallelGateway_targetRef_497243 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_targetRef_497243 != null );\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_497243 and inFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_497243.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_497243 and outFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_497243.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_outgoing is really bound\n                        JavaSDM.ensure ( _edge_outgoing != null );\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                        JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link sourceRef from outFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_outgoing to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_outgoing.getSrc ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link targetRef from outFlow to parallelGateway\n                        JavaSDM.ensure (!(parallelGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link trg from _edge_outgoing to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,parallelGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_519(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      SequenceFlow outFlow = null;\n      ParallelGateway parallelGateway = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      SequenceFlowToStep outFlowToParallelStep = null;\n      SequenceFlowToUCFlow outFlowToInitFlow = null;\n      Step step = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Flow initFlow = null;\n      Iterator fujaba__IterFlowToParallelStep = null;\n      ParallelStep parallelStep = null;\n      ParallelFlow flow = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToFlowListToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToFlowList = null;\n      RuleEntryList inFlowToFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToFlowList.hasNext () )\n         {\n            try\n            {\n               inFlowToFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToFlowList.next ();\n\n               // check object inFlowToFlowList is really bound\n               JavaSDM.ensure ( inFlowToFlowList != null );\n               // iterate to-many link entryObjects from inFlowToFlowList to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToFlowListToInFlowToFlow = new ArrayList(inFlowToFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToFlowListToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToFlowListToInFlowToFlow.next ();\n\n                     // ensure correct type and really bound of object inFlowToFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof Process );\n                     process = (Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     _TmpObject = inFlowToFlow.getTarget ();\n\n                     // ensure correct type and really bound of object flow\n                     JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n                     flow = (ParallelFlow) _TmpObject;\n\n                     // iterate to-many link invokedFlows from flow to parallelStep\n                     fujaba__Success = false;\n\n                     fujaba__IterFlowToParallelStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n                     while ( fujaba__IterFlowToParallelStep.hasNext () )\n                     {\n                        try\n                        {\n                           parallelStep = (ParallelStep) fujaba__IterFlowToParallelStep.next ();\n\n                           // check object parallelStep is really bound\n                           JavaSDM.ensure ( parallelStep != null );\n                           // bind object\n                           initFlow = parallelStep.eContainer() instanceof Flow ? (Flow) parallelStep.eContainer() : null;\n\n                           // check object initFlow is really bound\n                           JavaSDM.ensure ( initFlow != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(initFlow.getSteps().contains(parallelStep));\n\n                           // check isomorphic binding between objects initFlow and flow \n                           JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                           // iterate to-many link source from inFlow to inFlowToStep\n                           fujaba__Success = false;\n\n                           fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n                           {\n                              try\n                              {\n                                 inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                                 // check object inFlowToStep is really bound\n                                 JavaSDM.ensure ( inFlowToStep != null );\n                                 // bind object\n                                 step = inFlowToStep.getTarget ();\n\n                                 // check object step is really bound\n                                 JavaSDM.ensure ( step != null );\n\n                                 // check isomorphic binding between objects step and parallelStep \n                                 JavaSDM.ensure ( !step.equals (parallelStep) );\n\n                                 // check link steps from step to flow\n                                 JavaSDM.ensure (flow.equals (step.eContainer()\n                                 ));\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,process,inFlow,parallelGateway,outFlow,flow,inFlowToFlow,step,inFlowToStep,initFlow,parallelStep,parallelGatewayToParallelStep,outFlowToInitFlow,outFlowToParallelStep,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object inFlow is really bound\n                                       JavaSDM.ensure ( inFlow != null );\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // check object inFlowToStep is really bound\n                                       JavaSDM.ensure ( inFlowToStep != null );\n                                       // check object initFlow is really bound\n                                       JavaSDM.ensure ( initFlow != null );\n                                       // check object parallelStep is really bound\n                                       JavaSDM.ensure ( parallelStep != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // check object step is really bound\n                                       JavaSDM.ensure ( step != null );\n                                       // check isomorphic binding between objects initFlow and flow \n                                       JavaSDM.ensure ( !initFlow.equals (flow) );\n\n                                       // check isomorphic binding between objects step and parallelStep \n                                       JavaSDM.ensure ( !step.equals (parallelStep) );\n\n                                       // create object outFlow\n                                       outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // create object parallelGateway\n                                       parallelGateway = Bpmn2Factory.eINSTANCE.createParallelGateway();\n\n                                       // create object parallelGatewayToParallelStep\n                                       parallelGatewayToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                       // create object outFlowToParallelStep\n                                       outFlowToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                       // create object outFlowToInitFlow\n                                       outFlowToInitFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // assign attribute parallelGateway\n                                       parallelGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"parallelGateway\",\"gatewayDirection\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(parallelGateway); // add link\n\n\n                                       // create link\n                                       parallelGateway.getIncoming().add(inFlow);\n\n\n                                       // create link\n                                       outFlow.setSourceRef( parallelGateway);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(parallelGateway);\n\n\n                                       // create link\n                                       parallelGatewayToParallelStep.setSource( parallelGateway);\n\n\n                                       // create link\n                                       outFlowToParallelStep.setSource( outFlow);\n\n\n                                       // create link\n                                       outFlowToInitFlow.setSource( outFlow);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(outFlow);\n\n\n                                       // create link\n                                       outFlowToInitFlow.setTarget( initFlow);\n\n\n                                       // create link\n                                       parallelGatewayToParallelStep.setTarget( parallelStep);\n\n\n                                       // create link\n                                       outFlowToParallelStep.setTarget( parallelStep);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(parallelGatewayToParallelStep);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToInitFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToParallelStep);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToUCFlow inFlowToFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Converging\");\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", csp);\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"initFlow\",initFlow);\r\nisApplicableMatch.registerObject(\"parallelStep\",parallelStep);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow,
			ParallelGateway parallelGateway, SequenceFlow outFlow,
			ParallelFlow flow, SequenceFlowToUCFlow inFlowToFlow, Step step,
			SequenceFlowToStep inFlowToStep, Flow initFlow,
			ParallelStep parallelStep,
			FlowNodeToStep parallelGatewayToParallelStep,
			SequenceFlowToUCFlow outFlowToInitFlow,
			SequenceFlowToStep outFlowToParallelStep,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ParallelConvergingGatewayRule
