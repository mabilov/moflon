/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;

import bpmn2.Task;
import bpmn2.UserTask;
import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Parallel Gateway To Parallel Step Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getParallelGatewayToParallelStepRule()
 * @model
 * @generated
 */
public interface ParallelGatewayToParallelStepRule extends AbstractRule,
		ParallelGatewayToParallelStepCoreRule {

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __lane_flowNodeRefs_parallelGateway = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,inFlow,process,parallelGateway,laneSet,lane));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelGateway is really bound\n            JavaSDM.ensure ( parallelGateway != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // create object __inFlow_targetRef_parallelGateway\n            __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __lane_flowNodeRefs_parallelGateway\n            __lane_flowNodeRefs_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __parallelGateway_incoming_inFlow\n            __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_parallelGateway\n            __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_parallelGateway\n            __process_flowElements_parallelGateway.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_parallelGateway\n            __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n            // assign attribute __parallelGateway_incoming_inFlow\n            __parallelGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __lane_flowNodeRefs_parallelGateway\n            __lane_flowNodeRefs_parallelGateway.setName (\"flowNodeRefs\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__lane_flowNodeRefs_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__parallelGateway_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parallelGateway,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_parallelGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n            // create link\n            __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_parallelGateway.setSrc( process);\n\n\n            // create link\n            __lane_flowNodeRefs_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n            // create link\n            __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n            // create link\n            __lane_flowNodeRefs_parallelGateway.setSrc( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelGateway is really bound\n            JavaSDM.ensure ( parallelGateway != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,inFlow,process,parallelGateway,laneSet,lane);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, SequenceFlow inFlow,
			bpmn2.Process process, ParallelGateway parallelGateway,
			LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      ParallelGateway parallelGateway = null;\n      bpmn2.Process process = null;\n      Step step = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      ParallelStep parallelStep = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge parallelGatewayToParallelStep__target__parallelStep = null;\n      EMoflonEdge flow__steps__parallelStep = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_parallelGateway = null;\n      EMoflonEdge parallelGatewayToParallelStep__source__parallelGateway = null;\n      EMoflonEdge step__next__parallelStep = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToStep\"));\n\n         // ensure correct type and really bound of object inFlowToStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object parallelStep\n         parallelStep = UseCaseDSLFactory.eINSTANCE.createParallelStep();\n\n         // create object parallelGatewayToParallelStep\n         parallelGatewayToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // assign attribute parallelStep\n         parallelStep.setName ((java.lang.String)csp.getAttributeVariable(\"parallelStep\",\"name\").getValue());\n         // assign attribute parallelStep\n         parallelStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"parallelStep\",\"label\").getValue());\n\n         // create link\n         parallelGatewayToParallelStep.setSource( parallelGateway);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(step,parallelStep,\"next\");\n\n         // create link\n         flow.getSteps().add(parallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep.setTarget( parallelStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGateway,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToStep is really bound\n         JavaSDM.ensure ( inFlowToStep != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToStep and flow \n         JavaSDM.ensure ( !inFlowToStep.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects parallelGateway and flow \n         JavaSDM.ensure ( !parallelGateway.equals (flow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and flow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (flow) );\n\n         // check isomorphic binding between objects parallelStep and flow \n         JavaSDM.ensure ( !parallelStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects step and inFlow \n         JavaSDM.ensure ( !step.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects step and inFlowToFlow \n         JavaSDM.ensure ( !step.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToStep \n         JavaSDM.ensure ( !lane.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects laneSet and inFlowToStep \n         JavaSDM.ensure ( !laneSet.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToStep \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToStep \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToStep \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects process and inFlowToStep \n         JavaSDM.ensure ( !process.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects step and inFlowToStep \n         JavaSDM.ensure ( !step.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects parallelGateway and lane \n         JavaSDM.ensure ( !parallelGateway.equals (lane) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and lane \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (lane) );\n\n         // check isomorphic binding between objects parallelStep and lane \n         JavaSDM.ensure ( !parallelStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects step and lane \n         JavaSDM.ensure ( !step.equals (lane) );\n\n         // check isomorphic binding between objects parallelGateway and laneSet \n         JavaSDM.ensure ( !parallelGateway.equals (laneSet) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and laneSet \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (laneSet) );\n\n         // check isomorphic binding between objects parallelStep and laneSet \n         JavaSDM.ensure ( !parallelStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects step and laneSet \n         JavaSDM.ensure ( !step.equals (laneSet) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects process and parallelGateway \n         JavaSDM.ensure ( !process.equals (parallelGateway) );\n\n         // check isomorphic binding between objects step and parallelGateway \n         JavaSDM.ensure ( !step.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !parallelStep.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !process.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects step and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !step.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelStep \n         JavaSDM.ensure ( !process.equals (parallelStep) );\n\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // check isomorphic binding between objects step and process \n         JavaSDM.ensure ( !step.equals (process) );\n\n         // create object parallelGatewayToParallelStep__target__parallelStep\n         parallelGatewayToParallelStep__target__parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__parallelStep\n         flow__steps__parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_parallelGateway\n         __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_parallelGateway\n         __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __parallelGateway_incoming_inFlow\n         __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __lane_flowNodeRefs_parallelGateway\n         __lane_flowNodeRefs_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGatewayToParallelStep__source__parallelGateway\n         parallelGatewayToParallelStep__source__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object step__next__parallelStep\n         step__next__parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ParallelGatewayToParallelStepRule\");\n         // assign attribute step__next__parallelStep\n         step__next__parallelStep.setName (\"next\");\n         // assign attribute __process_flowElements_parallelGateway\n         __process_flowElements_parallelGateway.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_parallelGateway\n         __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n         // assign attribute __parallelGateway_incoming_inFlow\n         __parallelGateway_incoming_inFlow.setName (\"incoming\");\n         // assign attribute flow__steps__parallelStep\n         flow__steps__parallelStep.setName (\"steps\");\n         // assign attribute parallelGatewayToParallelStep__source__parallelGateway\n         parallelGatewayToParallelStep__source__parallelGateway.setName (\"source\");\n         // assign attribute parallelGatewayToParallelStep__target__parallelStep\n         parallelGatewayToParallelStep__target__parallelStep.setName (\"target\");\n         // assign attribute __lane_flowNodeRefs_parallelGateway\n         __lane_flowNodeRefs_parallelGateway.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep__target__parallelStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__parallelStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__parallelGateway_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__lane_flowNodeRefs_parallelGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep__source__parallelGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__next__parallelStep,\"createdEdges\");\n\n         // create link\n         __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n         // create link\n         __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         step__next__parallelStep.setSrc( step);\n\n\n         // create link\n         flow__steps__parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         step__next__parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__target__parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         __process_flowElements_parallelGateway.setSrc( process);\n\n\n         // create link\n         __lane_flowNodeRefs_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         parallelGatewayToParallelStep__source__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n         // create link\n         flow__steps__parallelStep.setSrc( flow);\n\n\n         // create link\n         parallelGatewayToParallelStep__source__parallelGateway.setSrc( parallelGatewayToParallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__target__parallelStep.setSrc( parallelGatewayToParallelStep);\n\n\n         // create link\n         __lane_flowNodeRefs_parallelGateway.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,inFlow,step,inFlowToStep,parallelStep,process,parallelGateway,flow,parallelGatewayToParallelStep,inFlowToFlow,laneSet,lane);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow inFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      ParallelGateway parallelGateway = null;\n      bpmn2.Process process = null;\n      EMoflonEdge __inFlow_targetRef_parallelGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __parallelGateway_incoming_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __inFlowToStep_source_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __inFlowToStep_target_step = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __process_flowElements_parallelGateway = null;\n      EMoflonEdge __lane_flowNodeRefs_parallelGateway = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Step step = null;\n      Iterator fujaba__IterInFlowToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ParallelGatewayToParallelStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"parallelGateway\"));\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from inFlow to inFlowToStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToStep.next ();\n\n                     // check object inFlowToStep is really bound\n                     JavaSDM.ensure ( inFlowToStep != null );\n                     // bind object\n                     step = inFlowToStep.getTarget ();\n\n                     // check object step is really bound\n                     JavaSDM.ensure ( step != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object inFlowToStep is really bound\n                        JavaSDM.ensure ( inFlowToStep != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from inFlowToStep to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToStep.getSource ()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from inFlowToStep to step\n                        JavaSDM.ensure (step.equals (inFlowToStep.getTarget ()\n                        ));\n\n                        // check link flowNodeRefs from lane to parallelGateway\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (parallelGateway));\n\n                        // create object __inFlow_targetRef_parallelGateway\n                        __inFlow_targetRef_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __parallelGateway_incoming_inFlow\n                        __parallelGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __inFlowToStep_source_inFlow\n                        __inFlowToStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToStep_target_step\n                        __inFlowToStep_target_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_parallelGateway\n                        __process_flowElements_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __lane_flowNodeRefs_parallelGateway\n                        __lane_flowNodeRefs_parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __inFlowToStep_source_inFlow\n                        __inFlowToStep_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToStep_target_step\n                        __inFlowToStep_target_step.setName (\"target\");\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_parallelGateway\n                        __process_flowElements_parallelGateway.setName (\"flowElements\");\n                        // assign attribute __inFlow_targetRef_parallelGateway\n                        __inFlow_targetRef_parallelGateway.setName (\"targetRef\");\n                        // assign attribute __parallelGateway_incoming_inFlow\n                        __parallelGateway_incoming_inFlow.setName (\"incoming\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n                        // assign attribute __lane_flowNodeRefs_parallelGateway\n                        __lane_flowNodeRefs_parallelGateway.setName (\"flowNodeRefs\");\n\n                        // create link\n                        __inFlow_targetRef_parallelGateway.setSrc( inFlow);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __parallelGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __inFlowToStep_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(step);\n\n\n                        // create link\n                        __inFlowToStep_target_step.setTrg( step);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToStep);\n\n\n                        // create link\n                        __inFlowToStep_target_step.setSrc( inFlowToStep);\n\n\n                        // create link\n                        __inFlowToStep_source_inFlow.setSrc( inFlowToStep);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_parallelGateway.setSrc( process);\n\n\n                        // create link\n                        __inFlow_targetRef_parallelGateway.setTrg( parallelGateway);\n\n\n                        // create link\n                        __lane_flowNodeRefs_parallelGateway.setTrg( parallelGateway);\n\n\n                        // create link\n                        __parallelGateway_incoming_inFlow.setSrc( parallelGateway);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(parallelGateway);\n\n\n                        // create link\n                        __process_flowElements_parallelGateway.setTrg( parallelGateway);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        __lane_flowNodeRefs_parallelGateway.setSrc( lane);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__parallelGateway_incoming_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_target_step,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_parallelGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_parallelGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__lane_flowNodeRefs_parallelGateway,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,inFlow,step,inFlowToStep,process,parallelGateway,flow,inFlowToFlow,laneSet,lane));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"ParallelGatewayToParallelStepRule\");\n\n                              // create link\n                              isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"parallelGateway\", parallelGateway);\nmatch.registerObject(\"laneSet\", laneSet);\nmatch.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, SequenceFlow inFlow,
			bpmn2.Process process, ParallelGateway parallelGateway,
			LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", true, csp);\r\nvar_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());\r\nvar_parallelGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, SequenceFlow inFlow,
			bpmn2.Process process, ParallelGateway parallelGateway,
			LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.id\", true, csp);\r\nvar_parallelGateway_id.setValue(parallelGateway.getId());\r\nvar_parallelGateway_id.setType(\"\");\r\nVariable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.name\", true, csp);\r\nvar_parallelGateway_name.setValue(parallelGateway.getName());\r\nvar_parallelGateway_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelStep.name\", csp);\r\nvar_parallelStep_name.setType(\"\");\r\nVariable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelStep.label\", csp);\r\nvar_parallelStep_label.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_parallelGateway_id,var_parallelStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_parallelGateway_name,var_parallelStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"parallelGateway\",parallelGateway);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step step, SequenceFlowToStep inFlowToStep,
			bpmn2.Process process, ParallelGateway parallelGateway, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"inFlowToStep\", inFlowToStep);\nruleresult.registerObject(\"parallelStep\", parallelStep);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"parallelGateway\", parallelGateway);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"parallelGatewayToParallelStep\", parallelGatewayToParallelStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject inFlow,
			EObject step, EObject inFlowToStep, EObject parallelStep,
			EObject process, EObject parallelGateway, EObject flow,
			EObject parallelGatewayToParallelStep, EObject inFlowToFlow,
			EObject laneSet, EObject lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"parallelGateway\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getParallelGateway());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __flow_steps_parallelStep = null;\n      EMoflonEdge __step_next_parallelStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,step,parallelStep,flow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelStep is really bound\n            JavaSDM.ensure ( parallelStep != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check isomorphic binding between objects step and parallelStep \n            JavaSDM.ensure ( !step.equals (parallelStep) );\n\n            // create object __flow_steps_parallelStep\n            __flow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __step_next_parallelStep\n            __step_next_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __step_next_parallelStep\n            __step_next_parallelStep.setName (\"next\");\n            // assign attribute __flow_steps_parallelStep\n            __flow_steps_parallelStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_parallelStep,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parallelStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_next_parallelStep,\"toBeTranslatedEdges\");\n\n            // create link\n            __step_next_parallelStep.setSrc( step);\n\n\n            // create link\n            __step_next_parallelStep.setTrg( parallelStep);\n\n\n            // create link\n            __flow_steps_parallelStep.setTrg( parallelStep);\n\n\n            // create link\n            __flow_steps_parallelStep.setSrc( flow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parallelStep is really bound\n            JavaSDM.ensure ( parallelStep != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check isomorphic binding between objects step and parallelStep \n            JavaSDM.ensure ( !step.equals (parallelStep) );\n\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,step,parallelStep,flow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Step step,
			ParallelStep parallelStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      ParallelStep parallelStep = null;\n      bpmn2.Process process = null;\n      Step step = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      ParallelGateway parallelGateway = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge inFlow__targetRef__parallelGateway = null;\n      EMoflonEdge __step_next_parallelStep = null;\n      EMoflonEdge parallelGateway__incoming__inFlow = null;\n      EMoflonEdge parallelGatewayToParallelStep__target__parallelStep = null;\n      EMoflonEdge __flow_steps_parallelStep = null;\n      EMoflonEdge lane__flowNodeRefs__parallelGateway = null;\n      EMoflonEdge parallelGatewayToParallelStep__source__parallelGateway = null;\n      EMoflonEdge process__flowElements__parallelGateway = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToStep\"));\n\n         // ensure correct type and really bound of object inFlowToStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parallelStep\"));\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object parallelGateway\n         parallelGateway = Bpmn2Factory.eINSTANCE.createParallelGateway();\n\n         // create object parallelGatewayToParallelStep\n         parallelGatewayToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // assign attribute parallelGateway\n         parallelGateway.setId ((java.lang.String)csp.getAttributeVariable(\"parallelGateway\",\"id\").getValue());\n         // assign attribute parallelGateway\n         parallelGateway.setName ((java.lang.String)csp.getAttributeVariable(\"parallelGateway\",\"name\").getValue());\n         // assign attribute parallelGateway\n         parallelGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"parallelGateway\",\"gatewayDirection\").getValue());\n\n         // create link\n         parallelGateway.getIncoming().add(inFlow);\n\n\n         // create link\n         parallelGatewayToParallelStep.setTarget( parallelStep);\n\n\n         // create link\n         \tprocess.getFlowElements().add(parallelGateway); // add link\n\n\n         // create link\n         parallelGatewayToParallelStep.setSource( parallelGateway);\n\n\n         // create link\n         lane.getFlowNodeRefs().add(parallelGateway);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGateway,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToStep is really bound\n         JavaSDM.ensure ( inFlowToStep != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object parallelGateway is really bound\n         JavaSDM.ensure ( parallelGateway != null );\n         // check object parallelGatewayToParallelStep is really bound\n         JavaSDM.ensure ( parallelGatewayToParallelStep != null );\n         // check object parallelStep is really bound\n         JavaSDM.ensure ( parallelStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToStep and flow \n         JavaSDM.ensure ( !inFlowToStep.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects parallelGateway and flow \n         JavaSDM.ensure ( !parallelGateway.equals (flow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and flow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (flow) );\n\n         // check isomorphic binding between objects parallelStep and flow \n         JavaSDM.ensure ( !parallelStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects step and inFlow \n         JavaSDM.ensure ( !step.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToFlow \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToFlow \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects step and inFlowToFlow \n         JavaSDM.ensure ( !step.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToStep \n         JavaSDM.ensure ( !lane.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects laneSet and inFlowToStep \n         JavaSDM.ensure ( !laneSet.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelGateway and inFlowToStep \n         JavaSDM.ensure ( !parallelGateway.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and inFlowToStep \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects parallelStep and inFlowToStep \n         JavaSDM.ensure ( !parallelStep.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects process and inFlowToStep \n         JavaSDM.ensure ( !process.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects step and inFlowToStep \n         JavaSDM.ensure ( !step.equals (inFlowToStep) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects parallelGateway and lane \n         JavaSDM.ensure ( !parallelGateway.equals (lane) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and lane \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (lane) );\n\n         // check isomorphic binding between objects parallelStep and lane \n         JavaSDM.ensure ( !parallelStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects step and lane \n         JavaSDM.ensure ( !step.equals (lane) );\n\n         // check isomorphic binding between objects parallelGateway and laneSet \n         JavaSDM.ensure ( !parallelGateway.equals (laneSet) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and laneSet \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (laneSet) );\n\n         // check isomorphic binding between objects parallelStep and laneSet \n         JavaSDM.ensure ( !parallelStep.equals (laneSet) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects step and laneSet \n         JavaSDM.ensure ( !step.equals (laneSet) );\n\n         // check isomorphic binding between objects parallelGatewayToParallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelGatewayToParallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGateway \n         JavaSDM.ensure ( !parallelStep.equals (parallelGateway) );\n\n         // check isomorphic binding between objects process and parallelGateway \n         JavaSDM.ensure ( !process.equals (parallelGateway) );\n\n         // check isomorphic binding between objects step and parallelGateway \n         JavaSDM.ensure ( !step.equals (parallelGateway) );\n\n         // check isomorphic binding between objects parallelStep and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !parallelStep.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !process.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects step and parallelGatewayToParallelStep \n         JavaSDM.ensure ( !step.equals (parallelGatewayToParallelStep) );\n\n         // check isomorphic binding between objects process and parallelStep \n         JavaSDM.ensure ( !process.equals (parallelStep) );\n\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // check isomorphic binding between objects step and process \n         JavaSDM.ensure ( !step.equals (process) );\n\n         // create object inFlow__targetRef__parallelGateway\n         inFlow__targetRef__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_next_parallelStep\n         __step_next_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGateway__incoming__inFlow\n         parallelGateway__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGatewayToParallelStep__target__parallelStep\n         parallelGatewayToParallelStep__target__parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_parallelStep\n         __flow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object lane__flowNodeRefs__parallelGateway\n         lane__flowNodeRefs__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parallelGatewayToParallelStep__source__parallelGateway\n         parallelGatewayToParallelStep__source__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__parallelGateway\n         process__flowElements__parallelGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ParallelGatewayToParallelStepRule\");\n         // assign attribute __step_next_parallelStep\n         __step_next_parallelStep.setName (\"next\");\n         // assign attribute process__flowElements__parallelGateway\n         process__flowElements__parallelGateway.setName (\"flowElements\");\n         // assign attribute inFlow__targetRef__parallelGateway\n         inFlow__targetRef__parallelGateway.setName (\"targetRef\");\n         // assign attribute parallelGateway__incoming__inFlow\n         parallelGateway__incoming__inFlow.setName (\"incoming\");\n         // assign attribute __flow_steps_parallelStep\n         __flow_steps_parallelStep.setName (\"steps\");\n         // assign attribute parallelGatewayToParallelStep__source__parallelGateway\n         parallelGatewayToParallelStep__source__parallelGateway.setName (\"source\");\n         // assign attribute parallelGatewayToParallelStep__target__parallelStep\n         parallelGatewayToParallelStep__target__parallelStep.setName (\"target\");\n         // assign attribute lane__flowNodeRefs__parallelGateway\n         lane__flowNodeRefs__parallelGateway.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__parallelGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_next_parallelStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGateway__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep__target__parallelStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_parallelStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane__flowNodeRefs__parallelGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parallelGatewayToParallelStep__source__parallelGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__parallelGateway,\"createdEdges\");\n\n         // create link\n         parallelGateway__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         inFlow__targetRef__parallelGateway.setSrc( inFlow);\n\n\n         // create link\n         __step_next_parallelStep.setSrc( step);\n\n\n         // create link\n         __step_next_parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__target__parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         __flow_steps_parallelStep.setTrg( parallelStep);\n\n\n         // create link\n         process__flowElements__parallelGateway.setSrc( process);\n\n\n         // create link\n         inFlow__targetRef__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         process__flowElements__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         parallelGatewayToParallelStep__source__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         parallelGateway__incoming__inFlow.setSrc( parallelGateway);\n\n\n         // create link\n         lane__flowNodeRefs__parallelGateway.setTrg( parallelGateway);\n\n\n         // create link\n         __flow_steps_parallelStep.setSrc( flow);\n\n\n         // create link\n         parallelGatewayToParallelStep__source__parallelGateway.setSrc( parallelGatewayToParallelStep);\n\n\n         // create link\n         parallelGatewayToParallelStep__target__parallelStep.setSrc( parallelGatewayToParallelStep);\n\n\n         // create link\n         lane__flowNodeRefs__parallelGateway.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,inFlow,step,inFlowToStep,parallelStep,process,parallelGateway,flow,parallelGatewayToParallelStep,inFlowToFlow,laneSet,lane);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Flow flow = null;\n      ParallelStep parallelStep = null;\n      Step step = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __inFlowToStep_source_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __step_next_parallelStep = null;\n      EMoflonEdge __inFlowToStep_target_step = null;\n      EMoflonEdge __flow_steps_parallelStep = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterStepToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ParallelGatewayToParallelStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"parallelStep\"));\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // iterate to-many link target from step to inFlowToStep\n               fujaba__Success = false;\n\n               fujaba__IterStepToInFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,SequenceFlowToStep.class,\"target\")).iterator ();\n\n               while ( fujaba__IterStepToInFlowToStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToStep = (SequenceFlowToStep) fujaba__IterStepToInFlowToStep.next ();\n\n                     // check object inFlowToStep is really bound\n                     JavaSDM.ensure ( inFlowToStep != null );\n                     // bind object\n                     inFlow = inFlowToStep.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // check link source from inFlowToFlow to inFlow\n                     JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                     ));\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object inFlowToStep is really bound\n                        JavaSDM.ensure ( inFlowToStep != null );\n                        // check object parallelStep is really bound\n                        JavaSDM.ensure ( parallelStep != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check isomorphic binding between objects step and parallelStep \n                        JavaSDM.ensure ( !step.equals (parallelStep) );\n\n                        // check link next from step to parallelStep\n                        JavaSDM.ensure (parallelStep.equals (step.getNext ()\n                        ));\n\n                        // bind object\n                        _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n                        // ensure correct type and really bound of object process\n                        JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n                        process = (bpmn2.Process) _TmpObject;\n\n                        // check if contained via correct reference\n                        JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from inFlowToStep to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToStep.getSource ()\n                        ));\n\n                        // check link steps from parallelStep to flow\n                        JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from inFlowToStep to step\n                        JavaSDM.ensure (step.equals (inFlowToStep.getTarget ()\n                        ));\n\n                        // iterate to-many link laneSets from process to laneSet\n                        fujaba__Success = false;\n\n                        fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                        while ( fujaba__IterProcessToLaneSet.hasNext () )\n                        {\n                           try\n                           {\n                              laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // iterate to-many link lanes from laneSet to lane\n                              fujaba__Success = false;\n\n                              fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                              while ( fujaba__IterLaneSetToLane.hasNext () )\n                              {\n                                 try\n                                 {\n                                    lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                    // check object lane is really bound\n                                    JavaSDM.ensure ( lane != null );\n                                    // create object __process_flowElements_inFlow\n                                    __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToStep_source_inFlow\n                                    __inFlowToStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object isApplicableMatch\n                                    isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                                    // create object __step_next_parallelStep\n                                    __step_next_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToStep_target_step\n                                    __inFlowToStep_target_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __flow_steps_parallelStep\n                                    __flow_steps_parallelStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __process_laneSets_laneSet\n                                    __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // create object __laneSet_lanes_lane\n                                    __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                                    // assign attribute __step_next_parallelStep\n                                    __step_next_parallelStep.setName (\"next\");\n                                    // assign attribute __inFlowToStep_source_inFlow\n                                    __inFlowToStep_source_inFlow.setName (\"source\");\n                                    // assign attribute __inFlowToStep_target_step\n                                    __inFlowToStep_target_step.setName (\"target\");\n                                    // assign attribute __process_laneSets_laneSet\n                                    __process_laneSets_laneSet.setName (\"laneSets\");\n                                    // assign attribute __process_flowElements_inFlow\n                                    __process_flowElements_inFlow.setName (\"flowElements\");\n                                    // assign attribute __flow_steps_parallelStep\n                                    __flow_steps_parallelStep.setName (\"steps\");\n                                    // assign attribute __inFlowToFlow_source_inFlow\n                                    __inFlowToFlow_source_inFlow.setName (\"source\");\n                                    // assign attribute __inFlowToFlow_target_flow\n                                    __inFlowToFlow_target_flow.setName (\"target\");\n                                    // assign attribute __laneSet_lanes_lane\n                                    __laneSet_lanes_lane.setName (\"lanes\");\n\n                                    // create link\n                                    __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    __inFlowToStep_source_inFlow.setTrg( inFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                                    // create link\n                                    __step_next_parallelStep.setSrc( step);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(step);\n\n\n                                    // create link\n                                    __inFlowToStep_target_step.setTrg( step);\n\n\n                                    // create link\n                                    __inFlowToStep_target_step.setSrc( inFlowToStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlowToStep);\n\n\n                                    // create link\n                                    __inFlowToStep_source_inFlow.setSrc( inFlowToStep);\n\n\n                                    // create link\n                                    __flow_steps_parallelStep.setTrg( parallelStep);\n\n\n                                    // create link\n                                    __step_next_parallelStep.setTrg( parallelStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(parallelStep);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(process);\n\n\n                                    // create link\n                                    __process_flowElements_inFlow.setSrc( process);\n\n\n                                    // create link\n                                    __process_laneSets_laneSet.setSrc( process);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(flow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                                    // create link\n                                    __flow_steps_parallelStep.setSrc( flow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                                    // create link\n                                    __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                                    // create link\n                                    __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                                    // create link\n                                    isApplicableMatch.getAllContextElements().add(lane);\n\n\n                                    // create link\n                                    __laneSet_lanes_lane.setTrg( lane);\n\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_parallelStep,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_next_parallelStep,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_source_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToStep_target_step,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n\n                                    // create link\n                                    org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n                                    // story node \'solve CSP\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,inFlow,step,inFlowToStep,parallelStep,process,flow,inFlowToFlow,laneSet,lane));\n\n                                       // ensure correct type and really bound of object csp\n                                       JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                       csp = (CSP) _TmpObject;\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    // statement node \'check CSP\'\n                                    fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                                    if (fujaba__Success)\n                                    {\n                                       // story node \'add match to rule result\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // check object isApplicableMatch is really bound\n                                          JavaSDM.ensure ( isApplicableMatch != null );\n                                          // check object ruleresult is really bound\n                                          JavaSDM.ensure ( ruleresult != null );\n                                          // assign attribute ruleresult\n                                          ruleresult.setSuccess (true);\n                                          // assign attribute isApplicableMatch\n                                          isApplicableMatch.setRuleName (\"ParallelGatewayToParallelStepRule\");\n\n                                          // create link\n                                          isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n                              }\n                              JavaSDM.ensure (fujaba__Success);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"step\", step);\nmatch.registerObject(\"parallelStep\", parallelStep);\nmatch.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Step step,
			ParallelStep parallelStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Step step,
			ParallelStep parallelStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelStep.name\", true, csp);\r\nvar_parallelStep_name.setValue(parallelStep.getName());\r\nvar_parallelStep_name.setType(\"\");\r\nVariable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelStep.label\", true, csp);\r\nvar_parallelStep_label.setValue(parallelStep.getLabel());\r\nvar_parallelStep_label.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.id\", csp);\r\nvar_parallelGateway_id.setType(\"\");\r\nVariable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.name\", csp);\r\nvar_parallelGateway_name.setType(\"\");\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", csp);\r\nvar_parallelGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_parallelGateway_id,var_parallelStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_parallelGateway_name,var_parallelStep_label);\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"parallelStep\",parallelStep);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step step, SequenceFlowToStep inFlowToStep,
			ParallelStep parallelStep, bpmn2.Process process, Flow flow,
			SequenceFlowToUCFlow inFlowToFlow, LaneSet laneSet, Lane lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"inFlowToStep\", inFlowToStep);\nruleresult.registerObject(\"parallelStep\", parallelStep);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"parallelGateway\", parallelGateway);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"parallelGatewayToParallelStep\", parallelGatewayToParallelStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"laneSet\", laneSet);\nruleresult.registerObject(\"lane\", lane);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject inFlow,
			EObject step, EObject inFlowToStep, EObject parallelStep,
			EObject process, EObject parallelGateway, EObject flow,
			EObject parallelGatewayToParallelStep, EObject inFlowToFlow,
			EObject laneSet, EObject lane);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"parallelStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_parallelStep_steps_7642 = null;\n      Iterator fujaba__IterParallelStepTo__DEC_parallelStep_next_698142 = null;\n      Step __DEC_parallelStep_next_698142 = null;\n      Match match = null;\n      Flow flow = null;\n      ParallelStep parallelStep = null;\n      Step step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_next is really bound\n         JavaSDM.ensure ( _edge_next != null );\n         // bind object\n         _TmpObject = _edge_next.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         step = (Step) _TmpObject;\n\n         // bind object\n         _TmpObject = step.getNext ();\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n\n         // check isomorphic binding between objects step and parallelStep \n         JavaSDM.ensure ( !step.equals (parallelStep) );\n\n         // bind object\n         flow = parallelStep.eContainer() instanceof Flow ? (Flow) parallelStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(parallelStep));\n\n         // check link trg from _edge_next to parallelStep\n         JavaSDM.ensure (parallelStep.equals (_edge_next.getTrg ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_parallelStep_steps_7642 = parallelStep.eContainer() instanceof Flow ? (Flow) parallelStep.eContainer() : null;\n\n               // check object __DEC_parallelStep_steps_7642 is really bound\n               JavaSDM.ensure ( __DEC_parallelStep_steps_7642 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_parallelStep_steps_7642.getSteps().contains(parallelStep));\n\n               // check isomorphic binding between objects __DEC_parallelStep_steps_7642 and flow \n               JavaSDM.ensure ( !__DEC_parallelStep_steps_7642.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from parallelStep to __DEC_parallelStep_next_698142\n               fujaba__Success = false;\n\n               fujaba__IterParallelStepTo__DEC_parallelStep_next_698142 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterParallelStepTo__DEC_parallelStep_next_698142.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_parallelStep_next_698142 = (Step) fujaba__IterParallelStepTo__DEC_parallelStep_next_698142.next ();\n\n                     // check object __DEC_parallelStep_next_698142 is really bound\n                     JavaSDM.ensure ( __DEC_parallelStep_next_698142 != null );\n                     // check isomorphic binding between objects __DEC_parallelStep_next_698142 and parallelStep \n                     JavaSDM.ensure ( !__DEC_parallelStep_next_698142.equals (parallelStep) );\n\n                     // check isomorphic binding between objects __DEC_parallelStep_next_698142 and step \n                     JavaSDM.ensure ( !__DEC_parallelStep_next_698142.equals (step) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from parallelStep to parallelStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,ParallelStep.class,\"next\")\n            .contains (parallelStep)));\n\n            // check link next from parallelStep to parallelStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,ParallelStep.class,\"next\")\n            .contains (parallelStep)));\n\n            // check object _edge_next is really bound\n            JavaSDM.ensure ( _edge_next != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object parallelStep is really bound\n            JavaSDM.ensure ( parallelStep != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check isomorphic binding between objects step and parallelStep \n            JavaSDM.ensure ( !step.equals (parallelStep) );\n\n            // check link next from step to parallelStep\n            JavaSDM.ensure (parallelStep.equals (step.getNext ()\n            ));\n\n            // check link src from _edge_next to step\n            JavaSDM.ensure (step.equals (_edge_next.getSrc ()\n            ));\n\n            // check link steps from parallelStep to flow\n            JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n            ));\n\n            // check link trg from _edge_next to parallelStep\n            JavaSDM.ensure (parallelStep.equals (_edge_next.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,step,parallelStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_32(EMoflonEdge _edge_next);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_242921 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_392567 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_392567 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterParallelGatewayToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      ParallelGateway parallelGateway = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // check link flowElements from parallelGateway to process\n         JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check link incoming from inFlow to parallelGateway\n               JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowNodeRefs from parallelGateway to lane\n               fujaba__Success = false;\n\n               fujaba__IterParallelGatewayToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\")).iterator ();\n\n               while ( fujaba__IterParallelGatewayToLane.hasNext () )\n               {\n                  try\n                  {\n                     lane = (Lane) fujaba__IterParallelGatewayToLane.next ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // check link lanes from lane to laneSet\n                           JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_parallelGateway_flowElements_242921 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                                 // check object __DEC_parallelGateway_flowElements_242921 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_flowElements_242921 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_parallelGateway_flowElements_242921.getFlowElements().contains(parallelGateway));\n\n                                 // check isomorphic binding between objects __DEC_parallelGateway_flowElements_242921 and process \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_242921.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from parallelGateway to __DEC_parallelGateway_targetRef_392567\n                                 fujaba__Success = false;\n\n                                 fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_392567 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_392567.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_parallelGateway_targetRef_392567 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_392567.next ();\n\n                                       // check object __DEC_parallelGateway_targetRef_392567 is really bound\n                                       JavaSDM.ensure ( __DEC_parallelGateway_targetRef_392567 != null );\n                                       // check isomorphic binding between objects __DEC_parallelGateway_targetRef_392567 and inFlow \n                                       JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_392567.equals (inFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flowElements is really bound\n                              JavaSDM.ensure ( _edge_flowElements != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object parallelGateway is really bound\n                              JavaSDM.ensure ( parallelGateway != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from parallelGateway to process\n                              JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link src from _edge_flowElements to process\n                              JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                              ));\n\n                              // check link trg from _edge_flowElements to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (_edge_flowElements.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to parallelGateway\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (parallelGateway));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,parallelGateway,laneSet,lane);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_85(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_580659 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_572611 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_572611 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterParallelGatewayToLane = null;\n      Lane lane = null;\n      ParallelGateway parallelGateway = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // check link flowElements from parallelGateway to process\n         JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n         ));\n\n         // check link incoming from inFlow to parallelGateway\n         JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from parallelGateway to lane\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterParallelGatewayToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterParallelGatewayToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelGateway_flowElements_580659 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                           // check object __DEC_parallelGateway_flowElements_580659 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_flowElements_580659 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelGateway_flowElements_580659.getFlowElements().contains(parallelGateway));\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_flowElements_580659 and process \n                           JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_580659.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from parallelGateway to __DEC_parallelGateway_targetRef_572611\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_572611 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_572611.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelGateway_targetRef_572611 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_572611.next ();\n\n                                 // check object __DEC_parallelGateway_targetRef_572611 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_targetRef_572611 != null );\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_572611 and inFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_572611.equals (inFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_targetRef to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from lane to parallelGateway\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (parallelGateway));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,parallelGateway,laneSet,lane);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_86(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_261527 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_251193 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_251193 = null;\n      Match match = null;\n      Iterator fujaba__IterInFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterParallelGatewayToLane = null;\n      Lane lane = null;\n      ParallelGateway parallelGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // iterate to-many link flowNodeRefs from parallelGateway to lane\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelGateway,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterParallelGatewayToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterParallelGatewayToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // bind object\n               _TmpObject = _edge_incoming.getTrg ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n\n               // bind object\n               _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n               // ensure correct type and really bound of object process\n               JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n               process = (bpmn2.Process) _TmpObject;\n\n               // check if contained via correct reference\n               JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n               // check link flowElements from parallelGateway to process\n               JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n               ));\n\n               // check link incoming from inFlow to parallelGateway\n               JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // iterate to-many link src from inFlow to _edge_targetRef\n                     fujaba__Success = false;\n\n                     fujaba__IterInFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                     while ( fujaba__IterInFlowTo_edge_targetRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_targetRef = (EMoflonEdge) fujaba__IterInFlowTo_edge_targetRef.next ();\n\n                           // check object _edge_targetRef is really bound\n                           JavaSDM.ensure ( _edge_targetRef != null );\n                           // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                           JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                           // check link trg from _edge_targetRef to parallelGateway\n                           JavaSDM.ensure (parallelGateway.equals (_edge_targetRef.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_parallelGateway_flowElements_261527 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                                 // check object __DEC_parallelGateway_flowElements_261527 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_flowElements_261527 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_parallelGateway_flowElements_261527.getFlowElements().contains(parallelGateway));\n\n                                 // check isomorphic binding between objects __DEC_parallelGateway_flowElements_261527 and process \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_261527.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from parallelGateway to __DEC_parallelGateway_targetRef_251193\n                                 fujaba__Success = false;\n\n                                 fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_251193 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_251193.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_parallelGateway_targetRef_251193 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_251193.next ();\n\n                                       // check object __DEC_parallelGateway_targetRef_251193 is really bound\n                                       JavaSDM.ensure ( __DEC_parallelGateway_targetRef_251193 != null );\n                                       // check isomorphic binding between objects __DEC_parallelGateway_targetRef_251193 and inFlow \n                                       JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_251193.equals (inFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_incoming is really bound\n                              JavaSDM.ensure ( _edge_incoming != null );\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object parallelGateway is really bound\n                              JavaSDM.ensure ( parallelGateway != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                              JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from parallelGateway to process\n                              JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link src from _edge_incoming to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (_edge_incoming.getSrc ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_incoming to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                              ));\n\n                              // check link trg from _edge_targetRef to parallelGateway\n                              JavaSDM.ensure (parallelGateway.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to parallelGateway\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (parallelGateway));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,parallelGateway,laneSet,lane);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_87(EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_parallelStep_steps_14685 = null;\n      Iterator fujaba__IterParallelStepTo__DEC_parallelStep_next_69801 = null;\n      Step __DEC_parallelStep_next_69801 = null;\n      Match match = null;\n      Iterator fujaba__IterParallelStepToStep = null;\n      Step step = null;\n      ParallelStep parallelStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object parallelStep\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         parallelStep = (ParallelStep) _TmpObject;\n\n         // check link steps from parallelStep to flow\n         JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n         ));\n\n         // iterate to-many link next from parallelStep to step\n         fujaba__Success = false;\n\n         fujaba__IterParallelStepToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,Step.class,\"next\")).iterator ();\n\n         while ( fujaba__IterParallelStepToStep.hasNext () )\n         {\n            try\n            {\n               step = (Step) fujaba__IterParallelStepToStep.next ();\n\n               // check object step is really bound\n               JavaSDM.ensure ( step != null );\n               // check isomorphic binding between objects step and parallelStep \n               JavaSDM.ensure ( !step.equals (parallelStep) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_parallelStep_steps_14685 = parallelStep.eContainer() instanceof Flow ? (Flow) parallelStep.eContainer() : null;\n\n                     // check object __DEC_parallelStep_steps_14685 is really bound\n                     JavaSDM.ensure ( __DEC_parallelStep_steps_14685 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_parallelStep_steps_14685.getSteps().contains(parallelStep));\n\n                     // check isomorphic binding between objects __DEC_parallelStep_steps_14685 and flow \n                     JavaSDM.ensure ( !__DEC_parallelStep_steps_14685.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link next from parallelStep to __DEC_parallelStep_next_69801\n                     fujaba__Success = false;\n\n                     fujaba__IterParallelStepTo__DEC_parallelStep_next_69801 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,Step.class,\"next\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterParallelStepTo__DEC_parallelStep_next_69801.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_parallelStep_next_69801 = (Step) fujaba__IterParallelStepTo__DEC_parallelStep_next_69801.next ();\n\n                           // check object __DEC_parallelStep_next_69801 is really bound\n                           JavaSDM.ensure ( __DEC_parallelStep_next_69801 != null );\n                           // check isomorphic binding between objects __DEC_parallelStep_next_69801 and parallelStep \n                           JavaSDM.ensure ( !__DEC_parallelStep_next_69801.equals (parallelStep) );\n\n                           // check isomorphic binding between objects __DEC_parallelStep_next_69801 and step \n                           JavaSDM.ensure ( !__DEC_parallelStep_next_69801.equals (step) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link next from parallelStep to parallelStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,ParallelStep.class,\"next\")\n                  .contains (parallelStep)));\n\n                  // check link next from parallelStep to parallelStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parallelStep,ParallelStep.class,\"next\")\n                  .contains (parallelStep)));\n\n                  // check object _edge_steps is really bound\n                  JavaSDM.ensure ( _edge_steps != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object parallelStep is really bound\n                  JavaSDM.ensure ( parallelStep != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check isomorphic binding between objects step and parallelStep \n                  JavaSDM.ensure ( !step.equals (parallelStep) );\n\n                  // check link next from step to parallelStep\n                  JavaSDM.ensure (parallelStep.equals (step.getNext ()\n                  ));\n\n                  // check link src from _edge_steps to flow\n                  JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n                  ));\n\n                  // check link steps from parallelStep to flow\n                  JavaSDM.ensure (flow.equals (parallelStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_steps to parallelStep\n                  JavaSDM.ensure (parallelStep.equals (_edge_steps.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,step,parallelStep,flow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_33(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_parallelGateway_flowElements_56707 = null;\n      Iterator fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_38642 = null;\n      SequenceFlow __DEC_parallelGateway_targetRef_38642 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterParallelGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      bpmn2.Process process = null;\n      ParallelGateway parallelGateway = null;\n      Lane lane = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowNodeRefs is really bound\n         JavaSDM.ensure ( _edge_flowNodeRefs != null );\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getSrc ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getTrg ();\n\n         // ensure correct type and really bound of object parallelGateway\n         JavaSDM.ensure ( _TmpObject instanceof ParallelGateway );\n         parallelGateway = (ParallelGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = parallelGateway.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) parallelGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(parallelGateway));\n\n         // check link flowNodeRefs from lane to parallelGateway\n         JavaSDM.ensure (lane.getFlowNodeRefs ().contains (parallelGateway));\n\n         // iterate to-many link incoming from parallelGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterParallelGatewayToInFlow = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterParallelGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterParallelGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_parallelGateway_flowElements_56707 = parallelGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) parallelGateway.eContainer() : null;\n\n                           // check object __DEC_parallelGateway_flowElements_56707 is really bound\n                           JavaSDM.ensure ( __DEC_parallelGateway_flowElements_56707 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_parallelGateway_flowElements_56707.getFlowElements().contains(parallelGateway));\n\n                           // check isomorphic binding between objects __DEC_parallelGateway_flowElements_56707 and process \n                           JavaSDM.ensure ( !__DEC_parallelGateway_flowElements_56707.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from parallelGateway to __DEC_parallelGateway_targetRef_38642\n                           fujaba__Success = false;\n\n                           fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_38642 = new ArrayList(parallelGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_38642.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_parallelGateway_targetRef_38642 = (SequenceFlow) fujaba__IterParallelGatewayTo__DEC_parallelGateway_targetRef_38642.next ();\n\n                                 // check object __DEC_parallelGateway_targetRef_38642 is really bound\n                                 JavaSDM.ensure ( __DEC_parallelGateway_targetRef_38642 != null );\n                                 // check isomorphic binding between objects __DEC_parallelGateway_targetRef_38642 and inFlow \n                                 JavaSDM.ensure ( !__DEC_parallelGateway_targetRef_38642.equals (inFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowNodeRefs is really bound\n                        JavaSDM.ensure ( _edge_flowNodeRefs != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object parallelGateway is really bound\n                        JavaSDM.ensure ( parallelGateway != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from parallelGateway to process\n                        JavaSDM.ensure (process.equals (parallelGateway.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link src from _edge_flowNodeRefs to lane\n                        JavaSDM.ensure (lane.equals (_edge_flowNodeRefs.getSrc ()\n                        ));\n\n                        // check link trg from _edge_flowNodeRefs to parallelGateway\n                        JavaSDM.ensure (parallelGateway.equals (_edge_flowNodeRefs.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from lane to parallelGateway\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (parallelGateway));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,parallelGateway,laneSet,lane);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_88(
			EMoflonEdge _edge_flowNodeRefs);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      ParallelGateway parallelGateway = null;\n      ParallelStep parallelStep = null;\n      FlowNodeToStep parallelGatewayToParallelStep = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Step step = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToStepListToInFlowToStep = null;\n      SequenceFlowToStep inFlowToStep = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToStepList = null;\n      RuleEntryList inFlowToStepList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToStepList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToStepList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToStepList.hasNext () )\n         {\n            try\n            {\n               inFlowToStepList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToStepList.next ();\n\n               // check object inFlowToStepList is really bound\n               JavaSDM.ensure ( inFlowToStepList != null );\n               // iterate to-many link entryObjects from inFlowToStepList to inFlowToStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToStepListToInFlowToStep = new ArrayList(inFlowToStepList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToStepListToInFlowToStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToStepListToInFlowToStep.next ();\n\n                     // ensure correct type and really bound of object inFlowToStep\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n                     inFlowToStep = (SequenceFlowToStep) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToStep.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n                     process = (bpmn2.Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     step = inFlowToStep.getTarget ();\n\n                     // check object step is really bound\n                     JavaSDM.ensure ( step != null );\n\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // iterate to-many link lanes from laneSet to lane\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n                           while ( fujaba__IterLaneSetToLane.hasNext () )\n                           {\n                              try\n                              {\n                                 lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n                                 // iterate to-many link source from inFlow to inFlowToFlow\n                                 fujaba__Success = false;\n\n                                 fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n                                 while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // bind object\n                                       flow = inFlowToFlow.getTarget ();\n\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n\n                                       // story node \'solve CSP\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,inFlow,step,inFlowToStep,parallelStep,process,parallelGateway,flow,parallelGatewayToParallelStep,inFlowToFlow,laneSet,lane,ruleResult));\n\n                                          // ensure correct type and really bound of object csp\n                                          JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                          csp = (CSP) _TmpObject;\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n                                       // statement node \'check CSP\'\n                                       fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'perform\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object flow is really bound\n                                             JavaSDM.ensure ( flow != null );\n                                             // check object inFlow is really bound\n                                             JavaSDM.ensure ( inFlow != null );\n                                             // check object inFlowToFlow is really bound\n                                             JavaSDM.ensure ( inFlowToFlow != null );\n                                             // check object inFlowToStep is really bound\n                                             JavaSDM.ensure ( inFlowToStep != null );\n                                             // check object lane is really bound\n                                             JavaSDM.ensure ( lane != null );\n                                             // check object laneSet is really bound\n                                             JavaSDM.ensure ( laneSet != null );\n                                             // check object process is really bound\n                                             JavaSDM.ensure ( process != null );\n                                             // check object ruleResult is really bound\n                                             JavaSDM.ensure ( ruleResult != null );\n                                             // check object step is really bound\n                                             JavaSDM.ensure ( step != null );\n                                             // create object parallelGateway\n                                             parallelGateway = Bpmn2Factory.eINSTANCE.createParallelGateway();\n\n                                             // create object parallelStep\n                                             parallelStep = UseCaseDSLFactory.eINSTANCE.createParallelStep();\n\n                                             // create object parallelGatewayToParallelStep\n                                             parallelGatewayToParallelStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                             // assign attribute parallelStep\n                                             parallelStep.setName ((java.lang.String)csp.getAttributeVariable(\"parallelStep\",\"name\").getValue());\n                                             // assign attribute parallelStep\n                                             parallelStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"parallelStep\",\"label\").getValue());\n                                             // assign attribute parallelGateway\n                                             parallelGateway.setId ((java.lang.String)csp.getAttributeVariable(\"parallelGateway\",\"id\").getValue());\n                                             // assign attribute parallelGateway\n                                             parallelGateway.setName ((java.lang.String)csp.getAttributeVariable(\"parallelGateway\",\"name\").getValue());\n                                             // assign attribute parallelGateway\n                                             parallelGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"parallelGateway\",\"gatewayDirection\").getValue());\n                                             // assign attribute ruleResult\n                                             ruleResult.setSuccess (true);\n\n                                             // create link\n                                             parallelGateway.getIncoming().add(inFlow);\n\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(step,parallelStep,\"next\");\n\n                                             // create link\n                                             parallelGatewayToParallelStep.setTarget( parallelStep);\n\n\n                                             // create link\n                                             ruleResult.getTargetObjects().add(parallelStep);\n\n\n                                             // create link\n                                             flow.getSteps().add(parallelStep);\n\n\n                                             // create link\n                                             \tprocess.getFlowElements().add(parallelGateway); // add link\n\n\n                                             // create link\n                                             lane.getFlowNodeRefs().add(parallelGateway);\n\n\n                                             // create link\n                                             parallelGatewayToParallelStep.setSource( parallelGateway);\n\n\n                                             // create link\n                                             ruleResult.getSourceObjects().add(parallelGateway);\n\n\n                                             // create link\n                                             ruleResult.getCorrObjects().add(parallelGatewayToParallelStep);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          return ruleResult;\n\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToStep inFlowToStepDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.id\", csp);\r\nvar_parallelGateway_id.setType(\"\");\r\nVariable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelStep.name\", csp);\r\nvar_parallelStep_name.setType(\"\");\r\nVariable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.name\", csp);\r\nvar_parallelGateway_name.setType(\"\");\r\nVariable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelStep.label\", csp);\r\nvar_parallelStep_label.setType(\"\");\r\nVariable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"parallelGateway.gatewayDirection\", csp);\r\nvar_parallelGateway_gatewayDirection.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_parallelGateway_id,var_parallelStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_parallelGateway_name,var_parallelStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"inFlowToStep\",inFlowToStep);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step step, SequenceFlowToStep inFlowToStep,
			ParallelStep parallelStep, bpmn2.Process process,
			ParallelGateway parallelGateway, Flow flow,
			FlowNodeToStep parallelGatewayToParallelStep,
			SequenceFlowToUCFlow inFlowToFlow, LaneSet laneSet, Lane lane,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp); // <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ParallelGatewayToParallelStepRule
