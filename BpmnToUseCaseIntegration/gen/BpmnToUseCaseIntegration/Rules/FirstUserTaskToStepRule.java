/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>First User Task To Step Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getFirstUserTaskToStepRule()
 * @model
 * @generated
 */
public interface FirstUserTaskToStepRule extends AbstractRule,
		TaskToStepCoreRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __lane_flowNodeRefs_task = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_task = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,lane,task,inFlow,process,outFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object task is really bound\n            JavaSDM.ensure ( task != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __lane_flowNodeRefs_task\n            __lane_flowNodeRefs_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_task\n            __process_flowElements_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __task_incoming_inFlow\n            __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __task_outgoing_outFlow\n            __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_task\n            __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_task\n            __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __lane_flowNodeRefs_task\n            __lane_flowNodeRefs_task.setName (\"flowNodeRefs\");\n            // assign attribute __inFlow_targetRef_task\n            __inFlow_targetRef_task.setName (\"targetRef\");\n            // assign attribute __task_incoming_inFlow\n            __task_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __process_flowElements_task\n            __process_flowElements_task.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __outFlow_sourceRef_task\n            __outFlow_sourceRef_task.setName (\"sourceRef\");\n            // assign attribute __task_outgoing_outFlow\n            __task_outgoing_outFlow.setName (\"outgoing\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__lane_flowNodeRefs_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__task_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__task_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,task,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_task,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_task,\"toBeTranslatedEdges\");\n\n            // create link\n            __lane_flowNodeRefs_task.setSrc( lane);\n\n\n            // create link\n            __process_flowElements_task.setTrg( task);\n\n\n            // create link\n            __inFlow_targetRef_task.setTrg( task);\n\n\n            // create link\n            __task_incoming_inFlow.setSrc( task);\n\n\n            // create link\n            __lane_flowNodeRefs_task.setTrg( task);\n\n\n            // create link\n            __task_outgoing_outFlow.setSrc( task);\n\n\n            // create link\n            __outFlow_sourceRef_task.setTrg( task);\n\n\n            // create link\n            __inFlow_targetRef_task.setSrc( inFlow);\n\n\n            // create link\n            __task_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_task.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n            // create link\n            __task_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check object task is really bound\n            JavaSDM.ensure ( task != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,lane,task,inFlow,process,outFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, Lane lane, UserTask task,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneToActor laneToActor = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      UserTask task = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      FlowNodeToStep taskToNormalStep = null;\n      NormalStep normalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge taskToNormalStep__target__normalStep = null;\n      EMoflonEdge flow__steps__normalStep = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge taskToNormalStep__source__task = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_task = null;\n      EMoflonEdge __lane_flowNodeRefs_task = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge normalStep__actor__actor = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneToActor\"));\n\n         // ensure correct type and really bound of object laneToActor\n         JavaSDM.ensure ( _TmpObject instanceof LaneToActor );\n         laneToActor = (LaneToActor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"task\"));\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object taskToNormalStep\n         taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object normalStep\n         normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute normalStep\n         normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n         // assign attribute normalStep\n         normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         taskToNormalStep.setSource( task);\n\n\n         // create link\n         normalStep.setActor( actor);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         flow.getSteps().add(normalStep);\n\n\n         // create link\n         taskToNormalStep.setTarget( normalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneToActor and actor \n         JavaSDM.ensure ( !laneToActor.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects task and actor \n         JavaSDM.ensure ( !task.equals (actor) );\n\n         // check isomorphic binding between objects taskToNormalStep and actor \n         JavaSDM.ensure ( !taskToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneToActor and flow \n         JavaSDM.ensure ( !laneToActor.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects task and flow \n         JavaSDM.ensure ( !task.equals (flow) );\n\n         // check isomorphic binding between objects taskToNormalStep and flow \n         JavaSDM.ensure ( !taskToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects task and inFlow \n         JavaSDM.ensure ( !task.equals (inFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlowToFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects task and inFlowToFlow \n         JavaSDM.ensure ( !task.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneToActor and lane \n         JavaSDM.ensure ( !laneToActor.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects task and lane \n         JavaSDM.ensure ( !task.equals (lane) );\n\n         // check isomorphic binding between objects taskToNormalStep and lane \n         JavaSDM.ensure ( !taskToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneToActor \n         JavaSDM.ensure ( !normalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and laneToActor \n         JavaSDM.ensure ( !outFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneToActor \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneToActor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and laneToActor \n         JavaSDM.ensure ( !process.equals (laneToActor) );\n\n         // check isomorphic binding between objects task and laneToActor \n         JavaSDM.ensure ( !task.equals (laneToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneToActor \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects task and normalStep \n         JavaSDM.ensure ( !task.equals (normalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and normalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects task and outFlow \n         JavaSDM.ensure ( !task.equals (outFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects task and outFlowToFlow \n         JavaSDM.ensure ( !task.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and outFlowToNormalStep \n         JavaSDM.ensure ( !task.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToNormalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and process \n         JavaSDM.ensure ( !task.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and process \n         JavaSDM.ensure ( !taskToNormalStep.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and task \n         JavaSDM.ensure ( !taskToNormalStep.equals (task) );\n\n         // create object taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__normalStep\n         flow__steps__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __task_incoming_inFlow\n         __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_task\n         __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__source__task\n         taskToNormalStep__source__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __task_outgoing_outFlow\n         __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_task\n         __process_flowElements_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __lane_flowNodeRefs_task\n         __lane_flowNodeRefs_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_task\n         __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__actor__actor\n         normalStep__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"FirstUserTaskToStepRule\");\n         // assign attribute __lane_flowNodeRefs_task\n         __lane_flowNodeRefs_task.setName (\"flowNodeRefs\");\n         // assign attribute __inFlow_targetRef_task\n         __inFlow_targetRef_task.setName (\"targetRef\");\n         // assign attribute __task_incoming_inFlow\n         __task_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __process_flowElements_task\n         __process_flowElements_task.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __outFlow_sourceRef_task\n         __outFlow_sourceRef_task.setName (\"sourceRef\");\n         // assign attribute __task_outgoing_outFlow\n         __task_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute normalStep__actor__actor\n         normalStep__actor__actor.setName (\"actor\");\n         // assign attribute taskToNormalStep__source__task\n         taskToNormalStep__source__task.setName (\"source\");\n         // assign attribute taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute flow__steps__normalStep\n         flow__steps__normalStep.setName (\"steps\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__task_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__source__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__task_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__lane_flowNodeRefs_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_task,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__actor__actor,\"createdEdges\");\n\n         // create link\n         __lane_flowNodeRefs_task.setSrc( lane);\n\n\n         // create link\n         __lane_flowNodeRefs_task.setTrg( task);\n\n\n         // create link\n         __outFlow_sourceRef_task.setTrg( task);\n\n\n         // create link\n         __inFlow_targetRef_task.setTrg( task);\n\n\n         // create link\n         taskToNormalStep__source__task.setTrg( task);\n\n\n         // create link\n         __task_outgoing_outFlow.setSrc( task);\n\n\n         // create link\n         __task_incoming_inFlow.setSrc( task);\n\n\n         // create link\n         __process_flowElements_task.setTrg( task);\n\n\n         // create link\n         normalStep__actor__actor.setTrg( actor);\n\n\n         // create link\n         __task_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_task.setSrc( inFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_task.setSrc( process);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __task_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         flow__steps__normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         normalStep__actor__actor.setSrc( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setSrc( taskToNormalStep);\n\n\n         // create link\n         taskToNormalStep__source__task.setSrc( taskToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         flow__steps__normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,lane,task,actor,laneToActor,inFlow,process,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow inFlow = null;\n      Lane lane = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      UserTask task = null;\n      EMoflonEdge __lane_flowNodeRefs_task = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __laneToActor_source_lane = null;\n      EMoflonEdge __outFlow_sourceRef_task = null;\n      EMoflonEdge __process_flowElements_task = null;\n      EMoflonEdge __task_outgoing_outFlow = null;\n      EMoflonEdge __task_incoming_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_task = null;\n      EMoflonEdge __laneToActor_target_actor = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      CSP csp = null;\n      Actor actor = null;\n      Iterator fujaba__IterLaneToLaneToActor = null;\n      LaneToActor laneToActor = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"FirstUserTaskToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (match.getObject(\"task\"));\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from lane to laneToActor\n               fujaba__Success = false;\n\n               fujaba__IterLaneToLaneToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(lane,LaneToActor.class,\"source\")).iterator ();\n\n               while ( fujaba__IterLaneToLaneToActor.hasNext () )\n               {\n                  try\n                  {\n                     laneToActor = (LaneToActor) fujaba__IterLaneToLaneToActor.next ();\n\n                     // check object laneToActor is really bound\n                     JavaSDM.ensure ( laneToActor != null );\n                     // bind object\n                     actor = laneToActor.getTarget ();\n\n                     // check object actor is really bound\n                     JavaSDM.ensure ( actor != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneToActor is really bound\n                        JavaSDM.ensure ( laneToActor != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from task to process\n                        JavaSDM.ensure (process.equals (task.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link outgoing from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from laneToActor to lane\n                        JavaSDM.ensure (lane.equals (laneToActor.getSource ()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from laneToActor to actor\n                        JavaSDM.ensure (actor.equals (laneToActor.getTarget ()\n                        ));\n\n                        // check link flowNodeRefs from task to lane\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                        .contains (lane));\n\n                        // create object __lane_flowNodeRefs_task\n                        __lane_flowNodeRefs_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __laneToActor_source_lane\n                        __laneToActor_source_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __outFlow_sourceRef_task\n                        __outFlow_sourceRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_task\n                        __process_flowElements_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __task_outgoing_outFlow\n                        __task_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __task_incoming_inFlow\n                        __task_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_targetRef_task\n                        __inFlow_targetRef_task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneToActor_target_actor\n                        __laneToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_outFlow\n                        __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __lane_flowNodeRefs_task\n                        __lane_flowNodeRefs_task.setName (\"flowNodeRefs\");\n                        // assign attribute __laneToActor_source_lane\n                        __laneToActor_source_lane.setName (\"source\");\n                        // assign attribute __laneToActor_target_actor\n                        __laneToActor_target_actor.setName (\"target\");\n                        // assign attribute __inFlow_targetRef_task\n                        __inFlow_targetRef_task.setName (\"targetRef\");\n                        // assign attribute __task_incoming_inFlow\n                        __task_incoming_inFlow.setName (\"incoming\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_task\n                        __process_flowElements_task.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_outFlow\n                        __process_flowElements_outFlow.setName (\"flowElements\");\n                        // assign attribute __outFlow_sourceRef_task\n                        __outFlow_sourceRef_task.setName (\"sourceRef\");\n                        // assign attribute __task_outgoing_outFlow\n                        __task_outgoing_outFlow.setName (\"outgoing\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n\n                        // create link\n                        __lane_flowNodeRefs_task.setSrc( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneToActor_source_lane.setTrg( lane);\n\n\n                        // create link\n                        __outFlow_sourceRef_task.setTrg( task);\n\n\n                        // create link\n                        __process_flowElements_task.setTrg( task);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(task);\n\n\n                        // create link\n                        __task_outgoing_outFlow.setSrc( task);\n\n\n                        // create link\n                        __lane_flowNodeRefs_task.setTrg( task);\n\n\n                        // create link\n                        __task_incoming_inFlow.setSrc( task);\n\n\n                        // create link\n                        __inFlow_targetRef_task.setTrg( task);\n\n\n                        // create link\n                        __laneToActor_target_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneToActor);\n\n\n                        // create link\n                        __laneToActor_target_actor.setSrc( laneToActor);\n\n\n                        // create link\n                        __laneToActor_source_lane.setSrc( laneToActor);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __inFlow_targetRef_task.setSrc( inFlow);\n\n\n                        // create link\n                        __task_incoming_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __process_flowElements_task.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setSrc( process);\n\n\n                        // create link\n                        __outFlow_sourceRef_task.setSrc( outFlow);\n\n\n                        // create link\n                        __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        __task_outgoing_outFlow.setTrg( outFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__lane_flowNodeRefs_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__task_outgoing_outFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__task_incoming_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_target_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_source_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_task,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,lane,task,actor,laneToActor,inFlow,process,outFlow,inFlowToFlow,flow));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"FirstUserTaskToStepRule\");\n\n                              // create link\n                              isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"lane\", lane);\nmatch.registerObject(\"task\", task);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, Lane lane, UserTask task,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, Lane lane, UserTask task,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", true, csp);\r\nvar_task_id.setValue(task.getId());\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", true, csp);\r\nvar_task_name.setValue(task.getName());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"task\",task);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"laneToActor\",laneToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			Lane lane, UserTask task, Actor actor, LaneToActor laneToActor,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"task\", task);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"laneToActor\", laneToActor);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"taskToNormalStep\", taskToNormalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject lane,
			EObject task, EObject actor, EObject laneToActor, EObject inFlow,
			EObject process, EObject outFlow, EObject normalStep,
			EObject taskToNormalStep, EObject outFlowToFlow,
			EObject outFlowToNormalStep, EObject inFlowToFlow, EObject flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"task\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,actor,normalStep,flow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // create object __normalStep_actor_actor\n            __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __normalStep_actor_actor\n            __normalStep_actor_actor.setName (\"actor\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            __normalStep_actor_actor.setTrg( actor);\n\n\n            // create link\n            __normalStep_actor_actor.setSrc( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,actor,normalStep,flow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Actor actor, NormalStep normalStep,
			Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneToActor laneToActor = null;\n      NormalStep normalStep = null;\n      Process process = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      UserTask task = null;\n      SequenceFlow outFlow = null;\n      FlowNodeToStep taskToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge taskToNormalStep__target__normalStep = null;\n      EMoflonEdge process__flowElements__task = null;\n      EMoflonEdge taskToNormalStep__source__task = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge inFlow__targetRef__task = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge lane__flowNodeRefs__task = null;\n      EMoflonEdge task__outgoing__outFlow = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge outFlow__sourceRef__task = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge task__incoming__inFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneToActor\"));\n\n         // ensure correct type and really bound of object laneToActor\n         JavaSDM.ensure ( _TmpObject instanceof LaneToActor );\n         laneToActor = (LaneToActor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object task\n         task = Bpmn2Factory.eINSTANCE.createUserTask();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object taskToNormalStep\n         taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute task\n         task.setId ((java.lang.String)csp.getAttributeVariable(\"task\",\"id\").getValue());\n         // assign attribute task\n         task.setName ((java.lang.String)csp.getAttributeVariable(\"task\",\"name\").getValue());\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         outFlowToFlow.setSource( outFlow);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         taskToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(lane,task,\"flowNodeRefs\");\n\n         // create link\n         inFlow.setTargetRef( task);\n\n\n         // create link\n         outFlow.setSourceRef( task);\n\n\n         // create link\n         process.getFlowElements().add(task);\n\n\n         // create link\n         taskToNormalStep.setSource( task);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneToActor is really bound\n         JavaSDM.ensure ( laneToActor != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object task is really bound\n         JavaSDM.ensure ( task != null );\n         // check object taskToNormalStep is really bound\n         JavaSDM.ensure ( taskToNormalStep != null );\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects lane and actor \n         JavaSDM.ensure ( !lane.equals (actor) );\n\n         // check isomorphic binding between objects laneToActor and actor \n         JavaSDM.ensure ( !laneToActor.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects task and actor \n         JavaSDM.ensure ( !task.equals (actor) );\n\n         // check isomorphic binding between objects taskToNormalStep and actor \n         JavaSDM.ensure ( !taskToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneToActor and flow \n         JavaSDM.ensure ( !laneToActor.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects task and flow \n         JavaSDM.ensure ( !task.equals (flow) );\n\n         // check isomorphic binding between objects taskToNormalStep and flow \n         JavaSDM.ensure ( !taskToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects task and inFlow \n         JavaSDM.ensure ( !task.equals (inFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneToActor and inFlowToFlow \n         JavaSDM.ensure ( !laneToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects task and inFlowToFlow \n         JavaSDM.ensure ( !task.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneToActor and lane \n         JavaSDM.ensure ( !laneToActor.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and lane \n         JavaSDM.ensure ( !normalStep.equals (lane) );\n\n         // check isomorphic binding between objects outFlow and lane \n         JavaSDM.ensure ( !outFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToFlow and lane \n         JavaSDM.ensure ( !outFlowToFlow.equals (lane) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and lane \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects task and lane \n         JavaSDM.ensure ( !task.equals (lane) );\n\n         // check isomorphic binding between objects taskToNormalStep and lane \n         JavaSDM.ensure ( !taskToNormalStep.equals (lane) );\n\n         // check isomorphic binding between objects normalStep and laneToActor \n         JavaSDM.ensure ( !normalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and laneToActor \n         JavaSDM.ensure ( !outFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToFlow and laneToActor \n         JavaSDM.ensure ( !outFlowToFlow.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and laneToActor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects process and laneToActor \n         JavaSDM.ensure ( !process.equals (laneToActor) );\n\n         // check isomorphic binding between objects task and laneToActor \n         JavaSDM.ensure ( !task.equals (laneToActor) );\n\n         // check isomorphic binding between objects taskToNormalStep and laneToActor \n         JavaSDM.ensure ( !taskToNormalStep.equals (laneToActor) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects task and normalStep \n         JavaSDM.ensure ( !task.equals (normalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and normalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects task and outFlow \n         JavaSDM.ensure ( !task.equals (outFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects task and outFlowToFlow \n         JavaSDM.ensure ( !task.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and outFlowToNormalStep \n         JavaSDM.ensure ( !task.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects taskToNormalStep and outFlowToNormalStep \n         JavaSDM.ensure ( !taskToNormalStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects task and process \n         JavaSDM.ensure ( !task.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and process \n         JavaSDM.ensure ( !taskToNormalStep.equals (process) );\n\n         // check isomorphic binding between objects taskToNormalStep and task \n         JavaSDM.ensure ( !taskToNormalStep.equals (task) );\n\n         // create object taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__task\n         process__flowElements__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object taskToNormalStep__source__task\n         taskToNormalStep__source__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object inFlow__targetRef__task\n         inFlow__targetRef__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object lane__flowNodeRefs__task\n         lane__flowNodeRefs__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object task__outgoing__outFlow\n         task__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__task\n         outFlow__sourceRef__task = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_actor_actor\n         __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_normalStep\n         __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object task__incoming__inFlow\n         task__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"FirstUserTaskToStepRule\");\n         // assign attribute lane__flowNodeRefs__task\n         lane__flowNodeRefs__task.setName (\"flowNodeRefs\");\n         // assign attribute inFlow__targetRef__task\n         inFlow__targetRef__task.setName (\"targetRef\");\n         // assign attribute task__incoming__inFlow\n         task__incoming__inFlow.setName (\"incoming\");\n         // assign attribute process__flowElements__task\n         process__flowElements__task.setName (\"flowElements\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute outFlow__sourceRef__task\n         outFlow__sourceRef__task.setName (\"sourceRef\");\n         // assign attribute task__outgoing__outFlow\n         task__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute __normalStep_actor_actor\n         __normalStep_actor_actor.setName (\"actor\");\n         // assign attribute taskToNormalStep__source__task\n         taskToNormalStep__source__task.setName (\"source\");\n         // assign attribute taskToNormalStep__target__normalStep\n         taskToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute __flow_steps_normalStep\n         __flow_steps_normalStep.setName (\"steps\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,taskToNormalStep__source__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,lane__flowNodeRefs__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__task,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,task__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         lane__flowNodeRefs__task.setSrc( lane);\n\n\n         // create link\n         task__outgoing__outFlow.setSrc( task);\n\n\n         // create link\n         taskToNormalStep__source__task.setTrg( task);\n\n\n         // create link\n         task__incoming__inFlow.setSrc( task);\n\n\n         // create link\n         inFlow__targetRef__task.setTrg( task);\n\n\n         // create link\n         process__flowElements__task.setTrg( task);\n\n\n         // create link\n         outFlow__sourceRef__task.setTrg( task);\n\n\n         // create link\n         lane__flowNodeRefs__task.setTrg( task);\n\n\n         // create link\n         __normalStep_actor_actor.setTrg( actor);\n\n\n         // create link\n         inFlow__targetRef__task.setSrc( inFlow);\n\n\n         // create link\n         task__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         process__flowElements__task.setSrc( process);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__task.setSrc( outFlow);\n\n\n         // create link\n         task__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __normalStep_actor_actor.setSrc( normalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setTrg( normalStep);\n\n\n         // create link\n         taskToNormalStep__target__normalStep.setSrc( taskToNormalStep);\n\n\n         // create link\n         taskToNormalStep__source__task.setSrc( taskToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         __flow_steps_normalStep.setSrc( flow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,lane,task,actor,laneToActor,inFlow,process,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      EMoflonEdge __laneToActor_source_lane = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __laneToActor_target_actor = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      CSP csp = null;\n      Process process = null;\n      Lane lane = null;\n      Iterator fujaba__IterActorToLaneToActor = null;\n      LaneToActor laneToActor = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"FirstUserTaskToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from flow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               inFlow = inFlowToFlow.getSource ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n\n               // iterate to-many link target from actor to laneToActor\n               fujaba__Success = false;\n\n               fujaba__IterActorToLaneToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,LaneToActor.class,\"target\")).iterator ();\n\n               while ( fujaba__IterActorToLaneToActor.hasNext () )\n               {\n                  try\n                  {\n                     laneToActor = (LaneToActor) fujaba__IterActorToLaneToActor.next ();\n\n                     // check object laneToActor is really bound\n                     JavaSDM.ensure ( laneToActor != null );\n                     // bind object\n                     lane = laneToActor.getSource ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneToActor is really bound\n                        JavaSDM.ensure ( laneToActor != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check link actor from normalStep to actor\n                        JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                        ));\n\n                        // bind object\n                        _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                        // ensure correct type and really bound of object process\n                        JavaSDM.ensure ( _TmpObject instanceof Process );\n                        process = (Process) _TmpObject;\n\n                        // check if contained via correct reference\n                        JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from laneToActor to lane\n                        JavaSDM.ensure (lane.equals (laneToActor.getSource ()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from laneToActor to actor\n                        JavaSDM.ensure (actor.equals (laneToActor.getTarget ()\n                        ));\n\n                        // create object __laneToActor_source_lane\n                        __laneToActor_source_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __laneToActor_target_actor\n                        __laneToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __normalStep_actor_actor\n                        __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __flow_steps_normalStep\n                        __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __laneToActor_source_lane\n                        __laneToActor_source_lane.setName (\"source\");\n                        // assign attribute __laneToActor_target_actor\n                        __laneToActor_target_actor.setName (\"target\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __normalStep_actor_actor\n                        __normalStep_actor_actor.setName (\"actor\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __flow_steps_normalStep\n                        __flow_steps_normalStep.setName (\"steps\");\n\n                        // create link\n                        __laneToActor_source_lane.setTrg( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneToActor_target_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        __normalStep_actor_actor.setTrg( actor);\n\n\n                        // create link\n                        __laneToActor_source_lane.setSrc( laneToActor);\n\n\n                        // create link\n                        __laneToActor_target_actor.setSrc( laneToActor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneToActor);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        __flow_steps_normalStep.setTrg( normalStep);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                        // create link\n                        __normalStep_actor_actor.setSrc( normalStep);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        __flow_steps_normalStep.setSrc( flow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_target_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneToActor_source_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_actor_actor,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,lane,actor,laneToActor,inFlow,process,normalStep,inFlowToFlow,flow));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"FirstUserTaskToStepRule\");\n\n                              // create link\n                              isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"actor\", actor);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Actor actor,
			NormalStep normalStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Actor actor,
			NormalStep normalStep, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", true, csp);\r\nvar_normalStep_name.setValue(normalStep.getName());\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", true, csp);\r\nvar_normalStep_label.setValue(normalStep.getLabel());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", csp);\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_task_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"laneToActor\",laneToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Lane lane, Actor actor, LaneToActor laneToActor,
			SequenceFlow inFlow, bpmn2.Process process, NormalStep normalStep,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"task\", task);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"laneToActor\", laneToActor);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"taskToNormalStep\", taskToNormalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject lane,
			EObject task, EObject actor, EObject laneToActor, EObject inFlow,
			EObject process, EObject outFlow, EObject normalStep,
			EObject taskToNormalStep, EObject outFlowToFlow,
			EObject outFlowToNormalStep, EObject inFlowToFlow, EObject flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"normalStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_215112 = null;\n      FlowElementsContainer __DEC_task_flowElements_737809 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_4931 = null;\n      Lane __DEC_task_flowNodeRefs_4931 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_507846 = null;\n      SequenceFlow __DEC_task_targetRef_507846 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      UserTask task = null;\n      Lane lane = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowNodeRefs is really bound\n         JavaSDM.ensure ( _edge_flowNodeRefs != null );\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getSrc ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = task.eContainer() instanceof Process ? (Process) task.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(task));\n\n         // check link flowNodeRefs from task to lane\n         JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n         .contains (lane));\n\n         // iterate to-many link incoming from task to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n         while ( fujaba__IterTaskToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // iterate to-many link outgoing from task to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToOutFlow = new ArrayList(task.getOutgoing()).iterator ();\n\n               while ( fujaba__IterTaskToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     outFlow = (SequenceFlow) fujaba__IterTaskToOutFlow.next ();\n\n                     // check object outFlow is really bound\n                     JavaSDM.ensure ( outFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_215112 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_215112 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_215112 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_215112.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_215112 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_215112.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_task_flowElements_737809 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                           // check object __DEC_task_flowElements_737809 is really bound\n                           JavaSDM.ensure ( __DEC_task_flowElements_737809 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_task_flowElements_737809.getFlowElements().contains(task));\n\n                           // check isomorphic binding between objects __DEC_task_flowElements_737809 and process \n                           JavaSDM.ensure ( !__DEC_task_flowElements_737809.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_4931\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_flowNodeRefs_4931 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_4931.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_flowNodeRefs_4931 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_4931.next ();\n\n                                 // check object __DEC_task_flowNodeRefs_4931 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowNodeRefs_4931 != null );\n                                 // check isomorphic binding between objects __DEC_task_flowNodeRefs_4931 and lane \n                                 JavaSDM.ensure ( !__DEC_task_flowNodeRefs_4931.equals (lane) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from task to __DEC_task_targetRef_507846\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_targetRef_507846 = new ArrayList(task.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_507846.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_targetRef_507846 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_507846.next ();\n\n                                 // check object __DEC_task_targetRef_507846 is really bound\n                                 JavaSDM.ensure ( __DEC_task_targetRef_507846 != null );\n                                 // check isomorphic binding between objects __DEC_task_targetRef_507846 and inFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_507846.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_task_targetRef_507846 and outFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_507846.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowNodeRefs is really bound\n                        JavaSDM.ensure ( _edge_flowNodeRefs != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from task to process\n                        JavaSDM.ensure (process.equals (task.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to task\n                        JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowNodeRefs to lane\n                        JavaSDM.ensure (lane.equals (_edge_flowNodeRefs.getSrc ()\n                        ));\n\n                        // check link trg from _edge_flowNodeRefs to task\n                        JavaSDM.ensure (task.equals (_edge_flowNodeRefs.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from task to lane\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                        .contains (lane));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_120(
			EMoflonEdge _edge_flowNodeRefs);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_493871 = null;\n      FlowElementsContainer __DEC_task_flowElements_693978 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_4857 = null;\n      Lane __DEC_task_flowNodeRefs_4857 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_245142 = null;\n      SequenceFlow __DEC_task_targetRef_245142 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterTaskToLane = null;\n      Lane lane = null;\n      Process process = null;\n      UserTask task = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = task.eContainer() instanceof Process ? (Process) task.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(task));\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link incoming from inFlow to task\n         JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from task to lane\n         fujaba__Success = false;\n\n         fujaba__IterTaskToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterTaskToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterTaskToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link outgoing from task to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToOutFlow = new ArrayList(task.getOutgoing()).iterator ();\n\n               while ( fujaba__IterTaskToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     outFlow = (SequenceFlow) fujaba__IterTaskToOutFlow.next ();\n\n                     // check object outFlow is really bound\n                     JavaSDM.ensure ( outFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_493871 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_493871 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_493871 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_493871.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_493871 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_493871.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_task_flowElements_693978 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                           // check object __DEC_task_flowElements_693978 is really bound\n                           JavaSDM.ensure ( __DEC_task_flowElements_693978 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_task_flowElements_693978.getFlowElements().contains(task));\n\n                           // check isomorphic binding between objects __DEC_task_flowElements_693978 and process \n                           JavaSDM.ensure ( !__DEC_task_flowElements_693978.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_4857\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_flowNodeRefs_4857 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_4857.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_flowNodeRefs_4857 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_4857.next ();\n\n                                 // check object __DEC_task_flowNodeRefs_4857 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowNodeRefs_4857 != null );\n                                 // check isomorphic binding between objects __DEC_task_flowNodeRefs_4857 and lane \n                                 JavaSDM.ensure ( !__DEC_task_flowNodeRefs_4857.equals (lane) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from task to __DEC_task_targetRef_245142\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_targetRef_245142 = new ArrayList(task.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_245142.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_targetRef_245142 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_245142.next ();\n\n                                 // check object __DEC_task_targetRef_245142 is really bound\n                                 JavaSDM.ensure ( __DEC_task_targetRef_245142 != null );\n                                 // check isomorphic binding between objects __DEC_task_targetRef_245142 and inFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_245142.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_task_targetRef_245142 and outFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_245142.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from task to process\n                        JavaSDM.ensure (process.equals (task.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to task\n                        JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_targetRef to task\n                        JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from task to lane\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                        .contains (lane));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_121(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_132712 = null;\n      FlowElementsContainer __DEC_task_flowElements_30435 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_328985 = null;\n      Lane __DEC_task_flowNodeRefs_328985 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_157406 = null;\n      SequenceFlow __DEC_task_targetRef_157406 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterTaskToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterTaskToLane = null;\n      Lane lane = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      UserTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = task.eContainer() instanceof Process ? (Process) task.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(task));\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from inFlow to process\n         JavaSDM.ensure (process.equals (inFlow.eContainer()\n         ));\n\n         // check link incoming from inFlow to task\n         JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from task to lane\n         fujaba__Success = false;\n\n         fujaba__IterTaskToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterTaskToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterTaskToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link outgoing from task to outFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToOutFlow = new ArrayList(task.getOutgoing()).iterator ();\n\n               while ( fujaba__IterTaskToOutFlow.hasNext () )\n               {\n                  try\n                  {\n                     outFlow = (SequenceFlow) fujaba__IterTaskToOutFlow.next ();\n\n                     // check object outFlow is really bound\n                     JavaSDM.ensure ( outFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from outFlow to process\n                     JavaSDM.ensure (process.equals (outFlow.eContainer()\n                     ));\n\n                     // iterate to-many link trg from task to _edge_targetRef\n                     fujaba__Success = false;\n\n                     fujaba__IterTaskTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterTaskTo_edge_targetRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_targetRef = (EMoflonEdge) fujaba__IterTaskTo_edge_targetRef.next ();\n\n                           // check object _edge_targetRef is really bound\n                           JavaSDM.ensure ( _edge_targetRef != null );\n                           // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                           JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                           // check link src from _edge_targetRef to inFlow\n                           JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_132712 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_132712 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_132712 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_132712.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_132712 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_132712.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_task_flowElements_30435 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                 // check object __DEC_task_flowElements_30435 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowElements_30435 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_task_flowElements_30435.getFlowElements().contains(task));\n\n                                 // check isomorphic binding between objects __DEC_task_flowElements_30435 and process \n                                 JavaSDM.ensure ( !__DEC_task_flowElements_30435.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link default from outFlow\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_328985\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_flowNodeRefs_328985 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_328985.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_flowNodeRefs_328985 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_328985.next ();\n\n                                       // check object __DEC_task_flowNodeRefs_328985 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowNodeRefs_328985 != null );\n                                       // check isomorphic binding between objects __DEC_task_flowNodeRefs_328985 and lane \n                                       JavaSDM.ensure ( !__DEC_task_flowNodeRefs_328985.equals (lane) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from task to __DEC_task_targetRef_157406\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_targetRef_157406 = new ArrayList(task.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_157406.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_targetRef_157406 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_157406.next ();\n\n                                       // check object __DEC_task_targetRef_157406 is really bound\n                                       JavaSDM.ensure ( __DEC_task_targetRef_157406 != null );\n                                       // check isomorphic binding between objects __DEC_task_targetRef_157406 and inFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_157406.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_task_targetRef_157406 and outFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_157406.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_incoming is really bound\n                              JavaSDM.ensure ( _edge_incoming != null );\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object task is really bound\n                              JavaSDM.ensure ( task != null );\n                              // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                              JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flowElements from task to process\n                              JavaSDM.ensure (process.equals (task.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to task\n                              JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to task\n                              JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link outgoing from outFlow to task\n                              JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_incoming to task\n                              JavaSDM.ensure (task.equals (_edge_incoming.getSrc ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_incoming to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                              ));\n\n                              // check link trg from _edge_targetRef to task\n                              JavaSDM.ensure (task.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from task to lane\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                              .contains (lane));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_122(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_810317 = null;\n      FlowElementsContainer __DEC_task_flowElements_869509 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_471734 = null;\n      Lane __DEC_task_flowNodeRefs_471734 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_994973 = null;\n      SequenceFlow __DEC_task_targetRef_994973 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskToOutFlow = null;\n      SequenceFlow outFlow = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterTaskToLane = null;\n      Lane lane = null;\n      UserTask task = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // check link flowElements from task to process\n         JavaSDM.ensure (process.equals (task.eContainer()\n         ));\n\n         // iterate to-many link flowNodeRefs from task to lane\n         fujaba__Success = false;\n\n         fujaba__IterTaskToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterTaskToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterTaskToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link incoming from task to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n               while ( fujaba__IterTaskToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // iterate to-many link outgoing from task to outFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterTaskToOutFlow = new ArrayList(task.getOutgoing()).iterator ();\n\n                     while ( fujaba__IterTaskToOutFlow.hasNext () )\n                     {\n                        try\n                        {\n                           outFlow = (SequenceFlow) fujaba__IterTaskToOutFlow.next ();\n\n                           // check object outFlow is really bound\n                           JavaSDM.ensure ( outFlow != null );\n                           // check isomorphic binding between objects outFlow and inFlow \n                           JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                           // check link flowElements from outFlow to process\n                           JavaSDM.ensure (process.equals (outFlow.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_810317 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_810317 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_810317 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_810317.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_810317 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_810317.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_task_flowElements_869509 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                 // check object __DEC_task_flowElements_869509 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowElements_869509 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_task_flowElements_869509.getFlowElements().contains(task));\n\n                                 // check isomorphic binding between objects __DEC_task_flowElements_869509 and process \n                                 JavaSDM.ensure ( !__DEC_task_flowElements_869509.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link default from outFlow\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_471734\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_flowNodeRefs_471734 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_471734.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_flowNodeRefs_471734 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_471734.next ();\n\n                                       // check object __DEC_task_flowNodeRefs_471734 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowNodeRefs_471734 != null );\n                                       // check isomorphic binding between objects __DEC_task_flowNodeRefs_471734 and lane \n                                       JavaSDM.ensure ( !__DEC_task_flowNodeRefs_471734.equals (lane) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from task to __DEC_task_targetRef_994973\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_targetRef_994973 = new ArrayList(task.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_994973.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_targetRef_994973 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_994973.next ();\n\n                                       // check object __DEC_task_targetRef_994973 is really bound\n                                       JavaSDM.ensure ( __DEC_task_targetRef_994973 != null );\n                                       // check isomorphic binding between objects __DEC_task_targetRef_994973 and inFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_994973.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_task_targetRef_994973 and outFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_994973.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flowElements is really bound\n                              JavaSDM.ensure ( _edge_flowElements != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object task is really bound\n                              JavaSDM.ensure ( task != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flowElements from task to process\n                              JavaSDM.ensure (process.equals (task.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to task\n                              JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to task\n                              JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link outgoing from outFlow to task\n                              JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_flowElements to process\n                              JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                              ));\n\n                              // check link trg from _edge_flowElements to task\n                              JavaSDM.ensure (task.equals (_edge_flowElements.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from task to lane\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                              .contains (lane));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_123(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_939519 = null;\n      FlowElementsContainer __DEC_task_flowElements_831774 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_966493 = null;\n      Lane __DEC_task_flowNodeRefs_966493 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_738041 = null;\n      SequenceFlow __DEC_task_targetRef_738041 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterTaskToLane = null;\n      Lane lane = null;\n      UserTask task = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = outFlow.getSourceRef ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // check link flowElements from task to process\n         JavaSDM.ensure (process.equals (task.eContainer()\n         ));\n\n         // iterate to-many link flowNodeRefs from task to lane\n         fujaba__Success = false;\n\n         fujaba__IterTaskToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterTaskToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterTaskToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link incoming from task to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n               while ( fujaba__IterTaskToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_939519 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_939519 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_939519 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_939519.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_939519 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_939519.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_task_flowElements_831774 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                           // check object __DEC_task_flowElements_831774 is really bound\n                           JavaSDM.ensure ( __DEC_task_flowElements_831774 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_task_flowElements_831774.getFlowElements().contains(task));\n\n                           // check isomorphic binding between objects __DEC_task_flowElements_831774 and process \n                           JavaSDM.ensure ( !__DEC_task_flowElements_831774.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_966493\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_flowNodeRefs_966493 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_966493.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_flowNodeRefs_966493 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_966493.next ();\n\n                                 // check object __DEC_task_flowNodeRefs_966493 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowNodeRefs_966493 != null );\n                                 // check isomorphic binding between objects __DEC_task_flowNodeRefs_966493 and lane \n                                 JavaSDM.ensure ( !__DEC_task_flowNodeRefs_966493.equals (lane) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from task to __DEC_task_targetRef_738041\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_targetRef_738041 = new ArrayList(task.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_738041.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_targetRef_738041 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_738041.next ();\n\n                                 // check object __DEC_task_targetRef_738041 is really bound\n                                 JavaSDM.ensure ( __DEC_task_targetRef_738041 != null );\n                                 // check isomorphic binding between objects __DEC_task_targetRef_738041 and inFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_738041.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_task_targetRef_738041 and outFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_738041.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowElements is really bound\n                        JavaSDM.ensure ( _edge_flowElements != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from task to process\n                        JavaSDM.ensure (process.equals (task.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to task\n                        JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_flowElements to process\n                        JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                        ));\n\n                        // check link trg from _edge_flowElements to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from task to lane\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                        .contains (lane));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_124(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_771930 = null;\n      FlowElementsContainer __DEC_task_flowElements_729407 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_563081 = null;\n      Lane __DEC_task_flowNodeRefs_563081 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_679904 = null;\n      SequenceFlow __DEC_task_targetRef_679904 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterTaskToLane = null;\n      Lane lane = null;\n      Process process = null;\n      UserTask task = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = task.eContainer() instanceof Process ? (Process) task.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(task));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to task\n         JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from task to lane\n         fujaba__Success = false;\n\n         fujaba__IterTaskToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterTaskToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterTaskToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link incoming from task to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n               while ( fujaba__IterTaskToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_771930 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_771930 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_771930 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_771930.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_771930 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_771930.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_task_flowElements_729407 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                           // check object __DEC_task_flowElements_729407 is really bound\n                           JavaSDM.ensure ( __DEC_task_flowElements_729407 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_task_flowElements_729407.getFlowElements().contains(task));\n\n                           // check isomorphic binding between objects __DEC_task_flowElements_729407 and process \n                           JavaSDM.ensure ( !__DEC_task_flowElements_729407.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link default from outFlow\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_563081\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_flowNodeRefs_563081 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_563081.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_flowNodeRefs_563081 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_563081.next ();\n\n                                 // check object __DEC_task_flowNodeRefs_563081 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowNodeRefs_563081 != null );\n                                 // check isomorphic binding between objects __DEC_task_flowNodeRefs_563081 and lane \n                                 JavaSDM.ensure ( !__DEC_task_flowNodeRefs_563081.equals (lane) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from task to __DEC_task_targetRef_679904\n                           fujaba__Success = false;\n\n                           fujaba__IterTaskTo__DEC_task_targetRef_679904 = new ArrayList(task.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_679904.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_task_targetRef_679904 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_679904.next ();\n\n                                 // check object __DEC_task_targetRef_679904 is really bound\n                                 JavaSDM.ensure ( __DEC_task_targetRef_679904 != null );\n                                 // check isomorphic binding between objects __DEC_task_targetRef_679904 and inFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_679904.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_task_targetRef_679904 and outFlow \n                                 JavaSDM.ensure ( !__DEC_task_targetRef_679904.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object task is really bound\n                        JavaSDM.ensure ( task != null );\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link flowElements from task to process\n                        JavaSDM.ensure (process.equals (task.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to task\n                        JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to task\n                        JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to task\n                        JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to task\n                        JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from task to lane\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                        .contains (lane));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_125(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_266838 = null;\n      FlowElementsContainer __DEC_task_flowElements_722575 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_flowNodeRefs_303844 = null;\n      Lane __DEC_task_flowNodeRefs_303844 = null;\n      Iterator fujaba__IterTaskTo__DEC_task_targetRef_85312 = null;\n      SequenceFlow __DEC_task_targetRef_85312 = null;\n      Match match = null;\n      Iterator fujaba__IterTaskTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterTaskToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterTaskToLane = null;\n      Lane lane = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      UserTask task = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object task\n         JavaSDM.ensure ( _TmpObject instanceof UserTask );\n         task = (UserTask) _TmpObject;\n\n         // bind object\n         _TmpObject = task.eContainer() instanceof Process ? (Process) task.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(task));\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to task\n         JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from task to lane\n         fujaba__Success = false;\n\n         fujaba__IterTaskToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterTaskToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterTaskToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // iterate to-many link incoming from task to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterTaskToInFlow = new ArrayList(task.getIncoming()).iterator ();\n\n               while ( fujaba__IterTaskToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterTaskToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check isomorphic binding between objects outFlow and inFlow \n                     JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // iterate to-many link trg from task to _edge_sourceRef\n                     fujaba__Success = false;\n\n                     fujaba__IterTaskTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterTaskTo_edge_sourceRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_sourceRef = (EMoflonEdge) fujaba__IterTaskTo_edge_sourceRef.next ();\n\n                           // check object _edge_sourceRef is really bound\n                           JavaSDM.ensure ( _edge_sourceRef != null );\n                           // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                           JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                           // check link src from _edge_sourceRef to outFlow\n                           JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_outFlow_flowElements_266838 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                                 // check object __DEC_outFlow_flowElements_266838 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_flowElements_266838 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_outFlow_flowElements_266838.getFlowElements().contains(outFlow));\n\n                                 // check isomorphic binding between objects __DEC_outFlow_flowElements_266838 and process \n                                 JavaSDM.ensure ( !__DEC_outFlow_flowElements_266838.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_task_flowElements_722575 = task.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) task.eContainer() : null;\n\n                                 // check object __DEC_task_flowElements_722575 is really bound\n                                 JavaSDM.ensure ( __DEC_task_flowElements_722575 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_task_flowElements_722575.getFlowElements().contains(task));\n\n                                 // check isomorphic binding between objects __DEC_task_flowElements_722575 and process \n                                 JavaSDM.ensure ( !__DEC_task_flowElements_722575.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link default from outFlow\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link flowNodeRefs from task to __DEC_task_flowNodeRefs_303844\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_flowNodeRefs_303844 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_flowNodeRefs_303844.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_flowNodeRefs_303844 = (Lane) fujaba__IterTaskTo__DEC_task_flowNodeRefs_303844.next ();\n\n                                       // check object __DEC_task_flowNodeRefs_303844 is really bound\n                                       JavaSDM.ensure ( __DEC_task_flowNodeRefs_303844 != null );\n                                       // check isomorphic binding between objects __DEC_task_flowNodeRefs_303844 and lane \n                                       JavaSDM.ensure ( !__DEC_task_flowNodeRefs_303844.equals (lane) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link incoming from task to __DEC_task_targetRef_85312\n                                 fujaba__Success = false;\n\n                                 fujaba__IterTaskTo__DEC_task_targetRef_85312 = new ArrayList(task.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterTaskTo__DEC_task_targetRef_85312.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_task_targetRef_85312 = (SequenceFlow) fujaba__IterTaskTo__DEC_task_targetRef_85312.next ();\n\n                                       // check object __DEC_task_targetRef_85312 is really bound\n                                       JavaSDM.ensure ( __DEC_task_targetRef_85312 != null );\n                                       // check isomorphic binding between objects __DEC_task_targetRef_85312 and inFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_85312.equals (inFlow) );\n\n                                       // check isomorphic binding between objects __DEC_task_targetRef_85312 and outFlow \n                                       JavaSDM.ensure ( !__DEC_task_targetRef_85312.equals (outFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_outgoing is really bound\n                              JavaSDM.ensure ( _edge_outgoing != null );\n                              // check object _edge_sourceRef is really bound\n                              JavaSDM.ensure ( _edge_sourceRef != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object task is really bound\n                              JavaSDM.ensure ( task != null );\n                              // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                              JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flowElements from task to process\n                              JavaSDM.ensure (process.equals (task.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to task\n                              JavaSDM.ensure (task.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link incoming from outFlow to task\n                              JavaSDM.ensure (!(task.equals (outFlow.getTargetRef ()\n                              )));\n\n                              // check link outgoing from outFlow to task\n                              JavaSDM.ensure (task.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link src from _edge_outgoing to task\n                              JavaSDM.ensure (task.equals (_edge_outgoing.getSrc ()\n                              ));\n\n                              // check link src from _edge_sourceRef to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                              ));\n\n                              // check link trg from _edge_outgoing to outFlow\n                              JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                              ));\n\n                              // check link trg from _edge_sourceRef to task\n                              JavaSDM.ensure (task.equals (_edge_sourceRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from task to lane\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(task,Lane.class,\"flowNodeRefs\")\n                              .contains (lane));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,lane,task,inFlow,process,outFlow);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_126(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_42442 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_137137 = null;\n      Step __DEC_normalStep_next_137137 = null;\n      Match match = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // bind object\n         _TmpObject = _edge_actor.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actor from normalStep to actor\n         JavaSDM.ensure (actor.equals (normalStep.getActor ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_42442 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_42442 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_42442 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_42442.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_42442 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_42442.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_137137\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_137137 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_137137.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_137137 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_137137.next ();\n\n                     // check object __DEC_normalStep_next_137137 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_137137 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_137137 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_137137.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_actor is really bound\n            JavaSDM.ensure ( _edge_actor != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_actor to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_actor.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_actor to actor\n            JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,actor,normalStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_52(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_375809 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_193785 = null;\n      Step __DEC_normalStep_next_193785 = null;\n      Match match = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link steps from normalStep to flow\n         JavaSDM.ensure (flow.equals (normalStep.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_375809 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_375809 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_375809 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_375809.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_375809 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_375809.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_193785\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_193785 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_193785.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_193785 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_193785.next ();\n\n                     // check object __DEC_normalStep_next_193785 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_193785 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_193785 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_193785.equals (normalStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_steps is really bound\n            JavaSDM.ensure ( _edge_steps != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link src from _edge_steps to flow\n            JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_steps to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_steps.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,actor,normalStep,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_53(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      UserTask task = null;\n      SequenceFlow outFlow = null;\n      FlowNodeToStep taskToNormalStep = null;\n      NormalStep normalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      Actor actor = null;\n      Lane lane = null;\n      Iterator fujaba__IterLaneToActorListToLaneToActor = null;\n      LaneToActor laneToActor = null;\n      Iterator fujaba__IterRuleEntryContainerToLaneToActorList = null;\n      RuleEntryList laneToActorList = null;\n      Flow flow = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToFlowListToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToFlowList = null;\n      RuleEntryList inFlowToFlowList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToFlowList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToFlowList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToFlowList.hasNext () )\n         {\n            try\n            {\n               inFlowToFlowList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToFlowList.next ();\n\n               // check object inFlowToFlowList is really bound\n               JavaSDM.ensure ( inFlowToFlowList != null );\n               // iterate to-many link entryObjects from inFlowToFlowList to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToFlowListToInFlowToFlow = new ArrayList(inFlowToFlowList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToFlowListToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToFlowListToInFlowToFlow.next ();\n\n                     // ensure correct type and really bound of object inFlowToFlow\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n                     inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof Process );\n                     process = (Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     flow = inFlowToFlow.getTarget ();\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // iterate to-many link ruleEntryList from ruleEntryContainer to laneToActorList\n                     fujaba__Success = false;\n\n                     fujaba__IterRuleEntryContainerToLaneToActorList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n                     while ( fujaba__IterRuleEntryContainerToLaneToActorList.hasNext () )\n                     {\n                        try\n                        {\n                           laneToActorList = (RuleEntryList) fujaba__IterRuleEntryContainerToLaneToActorList.next ();\n\n                           // check object laneToActorList is really bound\n                           JavaSDM.ensure ( laneToActorList != null );\n                           // check isomorphic binding between objects laneToActorList and inFlowToFlowList \n                           JavaSDM.ensure ( !laneToActorList.equals (inFlowToFlowList) );\n\n                           // iterate to-many link entryObjects from laneToActorList to laneToActor\n                           fujaba__Success = false;\n\n                           fujaba__IterLaneToActorListToLaneToActor = new ArrayList(laneToActorList.getEntryObjects()).iterator ();\n\n                           while ( fujaba__IterLaneToActorListToLaneToActor.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterLaneToActorListToLaneToActor.next ();\n\n                                 // ensure correct type and really bound of object laneToActor\n                                 JavaSDM.ensure ( _TmpObject instanceof LaneToActor );\n                                 laneToActor = (LaneToActor) _TmpObject;\n                                 // bind object\n                                 lane = laneToActor.getSource ();\n\n                                 // check object lane is really bound\n                                 JavaSDM.ensure ( lane != null );\n\n                                 // bind object\n                                 actor = laneToActor.getTarget ();\n\n                                 // check object actor is really bound\n                                 JavaSDM.ensure ( actor != null );\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,lane,task,actor,laneToActor,inFlow,process,outFlow,normalStep,taskToNormalStep,outFlowToFlow,outFlowToNormalStep,inFlowToFlow,flow,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object actor is really bound\n                                       JavaSDM.ensure ( actor != null );\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object inFlow is really bound\n                                       JavaSDM.ensure ( inFlow != null );\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // check object lane is really bound\n                                       JavaSDM.ensure ( lane != null );\n                                       // check object laneToActor is really bound\n                                       JavaSDM.ensure ( laneToActor != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // create object task\n                                       task = Bpmn2Factory.eINSTANCE.createUserTask();\n\n                                       // create object outFlow\n                                       outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // create object taskToNormalStep\n                                       taskToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                       // create object normalStep\n                                       normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n                                       // create object outFlowToNormalStep\n                                       outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                       // create object outFlowToFlow\n                                       outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // assign attribute task\n                                       task.setId ((java.lang.String)csp.getAttributeVariable(\"task\",\"id\").getValue());\n                                       // assign attribute task\n                                       task.setName ((java.lang.String)csp.getAttributeVariable(\"task\",\"name\").getValue());\n                                       // assign attribute normalStep\n                                       normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n                                       // assign attribute normalStep\n                                       normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(lane,task,\"flowNodeRefs\");\n\n                                       // create link\n                                       inFlow.setTargetRef( task);\n\n\n                                       // create link\n                                       outFlow.setSourceRef( task);\n\n\n                                       // create link\n                                       taskToNormalStep.setSource( task);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(task);\n\n\n                                       // create link\n                                       process.getFlowElements().add(task);\n\n\n                                       // create link\n                                       normalStep.setActor( actor);\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(outFlow);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setSource( outFlow);\n\n\n                                       // create link\n                                       outFlowToFlow.setSource( outFlow);\n\n\n                                       // create link\n                                       ruleResult.getTargetObjects().add(normalStep);\n\n\n                                       // create link\n                                       flow.getSteps().add(normalStep);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       taskToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(taskToNormalStep);\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			LaneToActor laneToActorDummyParameter,
			SequenceFlowToUCFlow inFlowToFlowDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(\"task.id\", csp);\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nVariable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(\"task.name\", csp);\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\n\r\n// Create constraints\r\nEq_modelgen eq_modelgen = new Eq_modelgen();Eq_modelgen eq_modelgen_0 = new Eq_modelgen();\r\n\r\ncsp.getConstraints().add(eq_modelgen);\r\ncsp.getConstraints().add(eq_modelgen_0);\r\n\r\n// Solve CSP\r\neq_modelgen.setRuleName(\"\");\r\neq_modelgen.solve(var_task_id,var_normalStep_name);\r\neq_modelgen_0.setRuleName(\"\");\r\neq_modelgen_0.solve(var_task_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"laneToActor\",laneToActor);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Lane lane, UserTask task, Actor actor, LaneToActor laneToActor,
			SequenceFlow inFlow, bpmn2.Process process, SequenceFlow outFlow,
			NormalStep normalStep, FlowNodeToStep taskToNormalStep,
			SequenceFlowToUCFlow outFlowToFlow,
			SequenceFlowToStep outFlowToNormalStep,
			SequenceFlowToUCFlow inFlowToFlow, Flow flow,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // FirstUserTaskToStepRule
