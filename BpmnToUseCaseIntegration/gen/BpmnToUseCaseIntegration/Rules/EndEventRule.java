/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackage;
import BpmnToUseCaseIntegration.DocRootToUCModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.ICEToAltFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SeqFlowToAltFlowAlt;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.Event;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.FlowNode;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.Task;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>End Event Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getEndEventRule()
 * @model
 * @generated
 */
public interface EndEventRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __lane_flowNodeRefs_endEvent = null;\n      EMoflonEdge __process_flowElements_endEvent = null;\n      EMoflonEdge __inFlow_targetRef_endEvent = null;\n      EMoflonEdge __endEvent_incoming_inFlow = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object endEvent is really bound\n         JavaSDM.ensure ( endEvent != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,process,inFlow,endEvent,lane,laneSet));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object endEvent is really bound\n            JavaSDM.ensure ( endEvent != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // create object __lane_flowNodeRefs_endEvent\n            __lane_flowNodeRefs_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_endEvent\n            __process_flowElements_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_endEvent\n            __inFlow_targetRef_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __endEvent_incoming_inFlow\n            __endEvent_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_endEvent\n            __process_flowElements_endEvent.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_endEvent\n            __inFlow_targetRef_endEvent.setName (\"targetRef\");\n            // assign attribute __endEvent_incoming_inFlow\n            __endEvent_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __lane_flowNodeRefs_endEvent\n            __lane_flowNodeRefs_endEvent.setName (\"flowNodeRefs\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__lane_flowNodeRefs_endEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_endEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_endEvent,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__endEvent_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,endEvent,\"toBeTranslatedNodes\");\n\n            // create link\n            __process_flowElements_endEvent.setSrc( process);\n\n\n            // create link\n            __inFlow_targetRef_endEvent.setSrc( inFlow);\n\n\n            // create link\n            __endEvent_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_endEvent.setTrg( endEvent);\n\n\n            // create link\n            __lane_flowNodeRefs_endEvent.setTrg( endEvent);\n\n\n            // create link\n            __endEvent_incoming_inFlow.setSrc( endEvent);\n\n\n            // create link\n            __inFlow_targetRef_endEvent.setTrg( endEvent);\n\n\n            // create link\n            __lane_flowNodeRefs_endEvent.setSrc( lane);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object endEvent is really bound\n            JavaSDM.ensure ( endEvent != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object lane is really bound\n            JavaSDM.ensure ( lane != null );\n            // check object laneSet is really bound\n            JavaSDM.ensure ( laneSet != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_laneSets_laneSet\n            __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __laneSet_lanes_lane\n            __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_laneSets_laneSet\n            __process_laneSets_laneSet.setName (\"laneSets\");\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n            // assign attribute __laneSet_lanes_lane\n            __laneSet_lanes_lane.setName (\"lanes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,laneSet,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_laneSets_laneSet,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,lane,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__laneSet_lanes_lane,\"contextEdges\");\n\n            // create link\n            __process_laneSets_laneSet.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __laneSet_lanes_lane.setTrg( lane);\n\n\n            // create link\n            __process_laneSets_laneSet.setTrg( laneSet);\n\n\n            // create link\n            __laneSet_lanes_lane.setSrc( laneSet);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,process,inFlow,endEvent,lane,laneSet);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EndEvent endEvent, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EndEvent endEvent = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      EndEventToFlow endEventToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __endEvent_incoming_inFlow = null;\n      EMoflonEdge endEventToFlow__source__endEvent = null;\n      EMoflonEdge __inFlow_targetRef_endEvent = null;\n      EMoflonEdge __process_flowElements_endEvent = null;\n      EMoflonEdge __lane_flowNodeRefs_endEvent = null;\n      EMoflonEdge endEventToFlow__target__flow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"endEvent\"));\n\n         // ensure correct type and really bound of object endEvent\n         JavaSDM.ensure ( _TmpObject instanceof EndEvent );\n         endEvent = (EndEvent) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object endEventToFlow\n         endEventToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createEndEventToFlow();\n\n\n         // create link\n         endEventToFlow.setSource( endEvent);\n\n\n         // create link\n         endEventToFlow.setTarget( flow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object endEvent is really bound\n         JavaSDM.ensure ( endEvent != null );\n         // check object endEventToFlow is really bound\n         JavaSDM.ensure ( endEventToFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,endEvent,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,endEventToFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object endEvent is really bound\n         JavaSDM.ensure ( endEvent != null );\n         // check object endEventToFlow is really bound\n         JavaSDM.ensure ( endEventToFlow != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object lane is really bound\n         JavaSDM.ensure ( lane != null );\n         // check object laneSet is really bound\n         JavaSDM.ensure ( laneSet != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects endEventToFlow and endEvent \n         JavaSDM.ensure ( !endEventToFlow.equals (endEvent) );\n\n         // check isomorphic binding between objects flow and endEvent \n         JavaSDM.ensure ( !flow.equals (endEvent) );\n\n         // check isomorphic binding between objects inFlow and endEvent \n         JavaSDM.ensure ( !inFlow.equals (endEvent) );\n\n         // check isomorphic binding between objects inFlowToFlow and endEvent \n         JavaSDM.ensure ( !inFlowToFlow.equals (endEvent) );\n\n         // check isomorphic binding between objects lane and endEvent \n         JavaSDM.ensure ( !lane.equals (endEvent) );\n\n         // check isomorphic binding between objects laneSet and endEvent \n         JavaSDM.ensure ( !laneSet.equals (endEvent) );\n\n         // check isomorphic binding between objects process and endEvent \n         JavaSDM.ensure ( !process.equals (endEvent) );\n\n         // check isomorphic binding between objects processToUseCase and endEvent \n         JavaSDM.ensure ( !processToUseCase.equals (endEvent) );\n\n         // check isomorphic binding between objects useCase and endEvent \n         JavaSDM.ensure ( !useCase.equals (endEvent) );\n\n         // check isomorphic binding between objects flow and endEventToFlow \n         JavaSDM.ensure ( !flow.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects inFlow and endEventToFlow \n         JavaSDM.ensure ( !inFlow.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects inFlowToFlow and endEventToFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects lane and endEventToFlow \n         JavaSDM.ensure ( !lane.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects laneSet and endEventToFlow \n         JavaSDM.ensure ( !laneSet.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects process and endEventToFlow \n         JavaSDM.ensure ( !process.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and endEventToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects useCase and endEventToFlow \n         JavaSDM.ensure ( !useCase.equals (endEventToFlow) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects lane and flow \n         JavaSDM.ensure ( !lane.equals (flow) );\n\n         // check isomorphic binding between objects laneSet and flow \n         JavaSDM.ensure ( !laneSet.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlow \n         JavaSDM.ensure ( !lane.equals (inFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlow) );\n\n         // check isomorphic binding between objects useCase and inFlow \n         JavaSDM.ensure ( !useCase.equals (inFlow) );\n\n         // check isomorphic binding between objects lane and inFlowToFlow \n         JavaSDM.ensure ( !lane.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and inFlowToFlow \n         JavaSDM.ensure ( !laneSet.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and inFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and inFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects laneSet and lane \n         JavaSDM.ensure ( !laneSet.equals (lane) );\n\n         // check isomorphic binding between objects process and lane \n         JavaSDM.ensure ( !process.equals (lane) );\n\n         // check isomorphic binding between objects processToUseCase and lane \n         JavaSDM.ensure ( !processToUseCase.equals (lane) );\n\n         // check isomorphic binding between objects useCase and lane \n         JavaSDM.ensure ( !useCase.equals (lane) );\n\n         // check isomorphic binding between objects process and laneSet \n         JavaSDM.ensure ( !process.equals (laneSet) );\n\n         // check isomorphic binding between objects processToUseCase and laneSet \n         JavaSDM.ensure ( !processToUseCase.equals (laneSet) );\n\n         // check isomorphic binding between objects useCase and laneSet \n         JavaSDM.ensure ( !useCase.equals (laneSet) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object __endEvent_incoming_inFlow\n         __endEvent_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object endEventToFlow__source__endEvent\n         endEventToFlow__source__endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_endEvent\n         __inFlow_targetRef_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_endEvent\n         __process_flowElements_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __lane_flowNodeRefs_endEvent\n         __lane_flowNodeRefs_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object endEventToFlow__target__flow\n         endEventToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"EndEventRule\");\n         // assign attribute __process_flowElements_endEvent\n         __process_flowElements_endEvent.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_endEvent\n         __inFlow_targetRef_endEvent.setName (\"targetRef\");\n         // assign attribute __endEvent_incoming_inFlow\n         __endEvent_incoming_inFlow.setName (\"incoming\");\n         // assign attribute endEventToFlow__source__endEvent\n         endEventToFlow__source__endEvent.setName (\"source\");\n         // assign attribute endEventToFlow__target__flow\n         endEventToFlow__target__flow.setName (\"target\");\n         // assign attribute __lane_flowNodeRefs_endEvent\n         __lane_flowNodeRefs_endEvent.setName (\"flowNodeRefs\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__endEvent_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,endEventToFlow__source__endEvent,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_endEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_endEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__lane_flowNodeRefs_endEvent,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,endEventToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         __process_flowElements_endEvent.setSrc( process);\n\n\n         // create link\n         __endEvent_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_endEvent.setSrc( inFlow);\n\n\n         // create link\n         endEventToFlow__source__endEvent.setTrg( endEvent);\n\n\n         // create link\n         __lane_flowNodeRefs_endEvent.setTrg( endEvent);\n\n\n         // create link\n         __inFlow_targetRef_endEvent.setTrg( endEvent);\n\n\n         // create link\n         __endEvent_incoming_inFlow.setSrc( endEvent);\n\n\n         // create link\n         __process_flowElements_endEvent.setTrg( endEvent);\n\n\n         // create link\n         endEventToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         endEventToFlow__target__flow.setSrc( endEventToFlow);\n\n\n         // create link\n         endEventToFlow__source__endEvent.setSrc( endEventToFlow);\n\n\n         // create link\n         __lane_flowNodeRefs_endEvent.setSrc( lane);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,process,inFlow,endEvent,flow,inFlowToFlow,endEventToFlow,useCase,processToUseCase,lane,laneSet);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      EndEvent endEvent = null;\n      SequenceFlow inFlow = null;\n      Lane lane = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      EMoflonEdge __process_flowElements_endEvent = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __process_laneSets_laneSet = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_endEvent = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __endEvent_incoming_inFlow = null;\n      EMoflonEdge __lane_flowNodeRefs_endEvent = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __laneSet_lanes_lane = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"EndEventRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"endEvent\"));\n\n         // ensure correct type and really bound of object endEvent\n         JavaSDM.ensure ( _TmpObject instanceof EndEvent );\n         endEvent = (EndEvent) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"lane\"));\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n         _TmpObject = (match.getObject(\"laneSet\"));\n\n         // ensure correct type and really bound of object laneSet\n         JavaSDM.ensure ( _TmpObject instanceof LaneSet );\n         laneSet = (LaneSet) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from process to processToUseCase\n               fujaba__Success = false;\n\n               fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n               while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n               {\n                  try\n                  {\n                     processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                     // check object processToUseCase is really bound\n                     JavaSDM.ensure ( processToUseCase != null );\n                     // bind object\n                     useCase = processToUseCase.getTarget ();\n\n                     // check object useCase is really bound\n                     JavaSDM.ensure ( useCase != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object endEvent is really bound\n                        JavaSDM.ensure ( endEvent != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object inFlowToFlow is really bound\n                        JavaSDM.ensure ( inFlowToFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check object processToUseCase is really bound\n                        JavaSDM.ensure ( processToUseCase != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check link flowElements from endEvent to process\n                        JavaSDM.ensure (process.equals (endEvent.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link source from inFlowToFlow to inFlow\n                        JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                        ));\n\n                        // check link source from processToUseCase to process\n                        JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                        ));\n\n                        // check link target from inFlowToFlow to flow\n                        JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                        ));\n\n                        // check link target from processToUseCase to useCase\n                        JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                        ));\n\n                        // check link targetRef from inFlow to endEvent\n                        JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link flowNodeRefs from lane to endEvent\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n                        // create object __process_flowElements_endEvent\n                        __process_flowElements_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToUseCase_source_process\n                        __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __process_laneSets_laneSet\n                        __process_laneSets_laneSet = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __process_flowElements_inFlow\n                        __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlow_targetRef_endEvent\n                        __inFlow_targetRef_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __endEvent_incoming_inFlow\n                        __endEvent_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __lane_flowNodeRefs_endEvent\n                        __lane_flowNodeRefs_endEvent = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __useCase_flows_flow\n                        __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __processToUseCase_target_useCase\n                        __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __laneSet_lanes_lane\n                        __laneSet_lanes_lane = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __process_laneSets_laneSet\n                        __process_laneSets_laneSet.setName (\"laneSets\");\n                        // assign attribute __process_flowElements_inFlow\n                        __process_flowElements_inFlow.setName (\"flowElements\");\n                        // assign attribute __process_flowElements_endEvent\n                        __process_flowElements_endEvent.setName (\"flowElements\");\n                        // assign attribute __inFlow_targetRef_endEvent\n                        __inFlow_targetRef_endEvent.setName (\"targetRef\");\n                        // assign attribute __endEvent_incoming_inFlow\n                        __endEvent_incoming_inFlow.setName (\"incoming\");\n                        // assign attribute __inFlowToFlow_source_inFlow\n                        __inFlowToFlow_source_inFlow.setName (\"source\");\n                        // assign attribute __inFlowToFlow_target_flow\n                        __inFlowToFlow_target_flow.setName (\"target\");\n                        // assign attribute __useCase_flows_flow\n                        __useCase_flows_flow.setName (\"flows\");\n                        // assign attribute __processToUseCase_source_process\n                        __processToUseCase_source_process.setName (\"source\");\n                        // assign attribute __processToUseCase_target_useCase\n                        __processToUseCase_target_useCase.setName (\"target\");\n                        // assign attribute __lane_flowNodeRefs_endEvent\n                        __lane_flowNodeRefs_endEvent.setName (\"flowNodeRefs\");\n                        // assign attribute __laneSet_lanes_lane\n                        __laneSet_lanes_lane.setName (\"lanes\");\n\n                        // create link\n                        __process_flowElements_endEvent.setSrc( process);\n\n\n                        // create link\n                        __processToUseCase_source_process.setTrg( process);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(process);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setSrc( process);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                        // create link\n                        __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __inFlow_targetRef_endEvent.setSrc( inFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __endEvent_incoming_inFlow.setTrg( inFlow);\n\n\n                        // create link\n                        __endEvent_incoming_inFlow.setSrc( endEvent);\n\n\n                        // create link\n                        __lane_flowNodeRefs_endEvent.setTrg( endEvent);\n\n\n                        // create link\n                        __inFlow_targetRef_endEvent.setTrg( endEvent);\n\n\n                        // create link\n                        __process_flowElements_endEvent.setTrg( endEvent);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(endEvent);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(flow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                        // create link\n                        __useCase_flows_flow.setTrg( flow);\n\n\n                        // create link\n                        __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                        // create link\n                        __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                        // create link\n                        __useCase_flows_flow.setSrc( useCase);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                        // create link\n                        __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                        // create link\n                        __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                        // create link\n                        __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                        // create link\n                        __lane_flowNodeRefs_endEvent.setSrc( lane);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setTrg( lane);\n\n\n                        // create link\n                        __laneSet_lanes_lane.setSrc( laneSet);\n\n\n                        // create link\n                        __process_laneSets_laneSet.setTrg( laneSet);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(laneSet);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_endEvent,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__lane_flowNodeRefs_endEvent,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__laneSet_lanes_lane,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__endEvent_incoming_inFlow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_endEvent,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_laneSets_laneSet,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,process,inFlow,endEvent,flow,inFlowToFlow,useCase,processToUseCase,lane,laneSet));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"EndEventRule\");\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n\n                              // create link\n                              ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"process\", process);\nmatch.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"endEvent\", endEvent);\nmatch.registerObject(\"lane\", lane);\nmatch.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EndEvent endEvent, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, bpmn2.Process process,
			SequenceFlow inFlow, EndEvent endEvent, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_endEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(\"endEvent.name\", true, csp);\r\nvar_endEvent_name.setValue(endEvent.getName());\r\nvar_endEvent_name.setType(\"String\");\r\nVariable var_flow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(\"flow.finalState\", true, csp);\r\nvar_flow_finalState.setValue(flow.getFinalState());\r\nvar_flow_finalState.setType(\"String\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nSetCheckEqStr setCheckEqStr = new SetCheckEqStr();\r\n\r\ncsp.getConstraints().add(setCheckEqStr);\r\n\r\n// Solve CSP\r\nsetCheckEqStr.setRuleName(\"\");\r\nsetCheckEqStr.solve(var_endEvent_name,var_flow_finalState);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"endEvent\",endEvent);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"lane\",lane);\r\nisApplicableMatch.registerObject(\"laneSet\",laneSet);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			bpmn2.Process process, SequenceFlow inFlow, EndEvent endEvent,
			Flow flow, SequenceFlowToUCFlow inFlowToFlow, UseCase useCase,
			ProcessToUseCase processToUseCase, Lane lane, LaneSet laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"endEvent\", endEvent);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"endEventToFlow\", endEventToFlow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"lane\", lane);\nruleresult.registerObject(\"laneSet\", laneSet);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject process,
			EObject inFlow, EObject endEvent, EObject flow,
			EObject inFlowToFlow, EObject endEventToFlow, EObject useCase,
			EObject processToUseCase, EObject lane, EObject laneSet);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"endEvent\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getEndEvent());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_endEvent_flowElements_806797 = null;\n      Iterator fujaba__IterEndEventTo__DEC_endEvent_targetRef_985289 = null;\n      SequenceFlow __DEC_endEvent_targetRef_985289 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      Iterator fujaba__IterEndEventToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      EndEvent endEvent = null;\n      bpmn2.Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object endEvent\n         JavaSDM.ensure ( _TmpObject instanceof EndEvent );\n         endEvent = (EndEvent) _TmpObject;\n\n         // check link flowElements from endEvent to process\n         JavaSDM.ensure (process.equals (endEvent.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check link targetRef from inFlow to endEvent\n               JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n               ));\n\n               // iterate to-many link flowNodeRefs from endEvent to lane\n               fujaba__Success = false;\n\n               fujaba__IterEndEventToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(endEvent,Lane.class,\"flowNodeRefs\")).iterator ();\n\n               while ( fujaba__IterEndEventToLane.hasNext () )\n               {\n                  try\n                  {\n                     lane = (Lane) fujaba__IterEndEventToLane.next ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n                     // iterate to-many link laneSets from process to laneSet\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n                     while ( fujaba__IterProcessToLaneSet.hasNext () )\n                     {\n                        try\n                        {\n                           laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                           // check object laneSet is really bound\n                           JavaSDM.ensure ( laneSet != null );\n                           // check link lanes from lane to laneSet\n                           JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_endEvent_flowElements_806797 = endEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) endEvent.eContainer() : null;\n\n                                 // check object __DEC_endEvent_flowElements_806797 is really bound\n                                 JavaSDM.ensure ( __DEC_endEvent_flowElements_806797 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_endEvent_flowElements_806797.getFlowElements().contains(endEvent));\n\n                                 // check isomorphic binding between objects __DEC_endEvent_flowElements_806797 and process \n                                 JavaSDM.ensure ( !__DEC_endEvent_flowElements_806797.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link targetRef from endEvent to __DEC_endEvent_targetRef_985289\n                                 fujaba__Success = false;\n\n                                 fujaba__IterEndEventTo__DEC_endEvent_targetRef_985289 = new ArrayList(endEvent.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterEndEventTo__DEC_endEvent_targetRef_985289.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_endEvent_targetRef_985289 = (SequenceFlow) fujaba__IterEndEventTo__DEC_endEvent_targetRef_985289.next ();\n\n                                       // check object __DEC_endEvent_targetRef_985289 is really bound\n                                       JavaSDM.ensure ( __DEC_endEvent_targetRef_985289 != null );\n                                       // check isomorphic binding between objects __DEC_endEvent_targetRef_985289 and inFlow \n                                       JavaSDM.ensure ( !__DEC_endEvent_targetRef_985289.equals (inFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flowElements is really bound\n                              JavaSDM.ensure ( _edge_flowElements != null );\n                              // check object endEvent is really bound\n                              JavaSDM.ensure ( endEvent != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check link flowElements from endEvent to process\n                              JavaSDM.ensure (process.equals (endEvent.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link src from _edge_flowElements to process\n                              JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                              ));\n\n                              // check link targetRef from inFlow to endEvent\n                              JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link trg from _edge_flowElements to endEvent\n                              JavaSDM.ensure (endEvent.equals (_edge_flowElements.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to endEvent\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,endEvent,lane,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_27(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_endEvent_flowElements_430208 = null;\n      Iterator fujaba__IterEndEventTo__DEC_endEvent_targetRef_1835 = null;\n      SequenceFlow __DEC_endEvent_targetRef_1835 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      Iterator fujaba__IterEndEventToLane = null;\n      Lane lane = null;\n      EndEvent endEvent = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object endEvent\n         JavaSDM.ensure ( _TmpObject instanceof EndEvent );\n         endEvent = (EndEvent) _TmpObject;\n\n         // check link targetRef from inFlow to endEvent\n         JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link flowNodeRefs from endEvent to lane\n         fujaba__Success = false;\n\n         fujaba__IterEndEventToLane = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(endEvent,Lane.class,\"flowNodeRefs\")).iterator ();\n\n         while ( fujaba__IterEndEventToLane.hasNext () )\n         {\n            try\n            {\n               lane = (Lane) fujaba__IterEndEventToLane.next ();\n\n               // check object lane is really bound\n               JavaSDM.ensure ( lane != null );\n               // bind object\n               _TmpObject = endEvent.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) endEvent.eContainer() : null;\n\n               // ensure correct type and really bound of object process\n               JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n               process = (bpmn2.Process) _TmpObject;\n\n               // check if contained via correct reference\n               JavaSDM.ensure(process.getFlowElements().contains(endEvent));\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // iterate to-many link laneSets from process to laneSet\n               fujaba__Success = false;\n\n               fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n               while ( fujaba__IterProcessToLaneSet.hasNext () )\n               {\n                  try\n                  {\n                     laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n                     // check object laneSet is really bound\n                     JavaSDM.ensure ( laneSet != null );\n                     // check link lanes from lane to laneSet\n                     JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_endEvent_flowElements_430208 = endEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) endEvent.eContainer() : null;\n\n                           // check object __DEC_endEvent_flowElements_430208 is really bound\n                           JavaSDM.ensure ( __DEC_endEvent_flowElements_430208 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_endEvent_flowElements_430208.getFlowElements().contains(endEvent));\n\n                           // check isomorphic binding between objects __DEC_endEvent_flowElements_430208 and process \n                           JavaSDM.ensure ( !__DEC_endEvent_flowElements_430208.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from endEvent to __DEC_endEvent_targetRef_1835\n                           fujaba__Success = false;\n\n                           fujaba__IterEndEventTo__DEC_endEvent_targetRef_1835 = new ArrayList(endEvent.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterEndEventTo__DEC_endEvent_targetRef_1835.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_endEvent_targetRef_1835 = (SequenceFlow) fujaba__IterEndEventTo__DEC_endEvent_targetRef_1835.next ();\n\n                                 // check object __DEC_endEvent_targetRef_1835 is really bound\n                                 JavaSDM.ensure ( __DEC_endEvent_targetRef_1835 != null );\n                                 // check isomorphic binding between objects __DEC_endEvent_targetRef_1835 and inFlow \n                                 JavaSDM.ensure ( !__DEC_endEvent_targetRef_1835.equals (inFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_targetRef is really bound\n                        JavaSDM.ensure ( _edge_targetRef != null );\n                        // check object endEvent is really bound\n                        JavaSDM.ensure ( endEvent != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check link flowElements from endEvent to process\n                        JavaSDM.ensure (process.equals (endEvent.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link src from _edge_targetRef to inFlow\n                        JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to endEvent\n                        JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link trg from _edge_targetRef to endEvent\n                        JavaSDM.ensure (endEvent.equals (_edge_targetRef.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from lane to endEvent\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,endEvent,lane,laneSet);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_28(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_endEvent_flowElements_363037 = null;\n      Iterator fujaba__IterEndEventTo__DEC_endEvent_targetRef_210775 = null;\n      SequenceFlow __DEC_endEvent_targetRef_210775 = null;\n      Match match = null;\n      Iterator fujaba__IterInFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Iterator fujaba__IterLaneSetToLane = null;\n      Lane lane = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      SequenceFlow inFlow = null;\n      EndEvent endEvent = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object endEvent\n         JavaSDM.ensure ( _TmpObject instanceof EndEvent );\n         endEvent = (EndEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // check link flowElements from endEvent to process\n         JavaSDM.ensure (process.equals (endEvent.eContainer()\n         ));\n\n         // check link targetRef from inFlow to endEvent\n         JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link laneSets from process to laneSet\n         fujaba__Success = false;\n\n         fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n         while ( fujaba__IterProcessToLaneSet.hasNext () )\n         {\n            try\n            {\n               laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n               // check object laneSet is really bound\n               JavaSDM.ensure ( laneSet != null );\n               // iterate to-many link lanes from laneSet to lane\n               fujaba__Success = false;\n\n               fujaba__IterLaneSetToLane = new ArrayList(laneSet.getLanes()).iterator ();\n\n               while ( fujaba__IterLaneSetToLane.hasNext () )\n               {\n                  try\n                  {\n                     lane = (Lane) fujaba__IterLaneSetToLane.next ();\n\n                     // check object lane is really bound\n                     JavaSDM.ensure ( lane != null );\n                     // check link flowNodeRefs from lane to endEvent\n                     JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n                     // iterate to-many link src from inFlow to _edge_targetRef\n                     fujaba__Success = false;\n\n                     fujaba__IterInFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n                     while ( fujaba__IterInFlowTo_edge_targetRef.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_targetRef = (EMoflonEdge) fujaba__IterInFlowTo_edge_targetRef.next ();\n\n                           // check object _edge_targetRef is really bound\n                           JavaSDM.ensure ( _edge_targetRef != null );\n                           // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                           JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                           // check link trg from _edge_targetRef to endEvent\n                           JavaSDM.ensure (endEvent.equals (_edge_targetRef.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_endEvent_flowElements_363037 = endEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) endEvent.eContainer() : null;\n\n                                 // check object __DEC_endEvent_flowElements_363037 is really bound\n                                 JavaSDM.ensure ( __DEC_endEvent_flowElements_363037 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_endEvent_flowElements_363037.getFlowElements().contains(endEvent));\n\n                                 // check isomorphic binding between objects __DEC_endEvent_flowElements_363037 and process \n                                 JavaSDM.ensure ( !__DEC_endEvent_flowElements_363037.equals (process) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link targetRef from endEvent to __DEC_endEvent_targetRef_210775\n                                 fujaba__Success = false;\n\n                                 fujaba__IterEndEventTo__DEC_endEvent_targetRef_210775 = new ArrayList(endEvent.getIncoming()).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterEndEventTo__DEC_endEvent_targetRef_210775.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_endEvent_targetRef_210775 = (SequenceFlow) fujaba__IterEndEventTo__DEC_endEvent_targetRef_210775.next ();\n\n                                       // check object __DEC_endEvent_targetRef_210775 is really bound\n                                       JavaSDM.ensure ( __DEC_endEvent_targetRef_210775 != null );\n                                       // check isomorphic binding between objects __DEC_endEvent_targetRef_210775 and inFlow \n                                       JavaSDM.ensure ( !__DEC_endEvent_targetRef_210775.equals (inFlow) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_incoming is really bound\n                              JavaSDM.ensure ( _edge_incoming != null );\n                              // check object _edge_targetRef is really bound\n                              JavaSDM.ensure ( _edge_targetRef != null );\n                              // check object endEvent is really bound\n                              JavaSDM.ensure ( endEvent != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object lane is really bound\n                              JavaSDM.ensure ( lane != null );\n                              // check object laneSet is really bound\n                              JavaSDM.ensure ( laneSet != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                              JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                              // check link flowElements from endEvent to process\n                              JavaSDM.ensure (process.equals (endEvent.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link laneSets from laneSet to process\n                              JavaSDM.ensure (process.equals (laneSet.eContainer()\n                              ));\n\n                              // check link lanes from lane to laneSet\n                              JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                              ));\n\n                              // check link src from _edge_incoming to endEvent\n                              JavaSDM.ensure (endEvent.equals (_edge_incoming.getSrc ()\n                              ));\n\n                              // check link src from _edge_targetRef to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                              ));\n\n                              // check link targetRef from inFlow to endEvent\n                              JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link trg from _edge_incoming to inFlow\n                              JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                              ));\n\n                              // check link trg from _edge_targetRef to endEvent\n                              JavaSDM.ensure (endEvent.equals (_edge_targetRef.getTrg ()\n                              ));\n\n                              // check link flowNodeRefs from lane to endEvent\n                              JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,endEvent,lane,laneSet);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_FWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_29(EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_endEvent_flowElements_402877 = null;\n      Iterator fujaba__IterEndEventTo__DEC_endEvent_targetRef_171711 = null;\n      SequenceFlow __DEC_endEvent_targetRef_171711 = null;\n      Match match = null;\n      Iterator fujaba__IterEndEventToInFlow = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterProcessToLaneSet = null;\n      LaneSet laneSet = null;\n      bpmn2.Process process = null;\n      EndEvent endEvent = null;\n      Lane lane = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowNodeRefs is really bound\n         JavaSDM.ensure ( _edge_flowNodeRefs != null );\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getSrc ();\n\n         // ensure correct type and really bound of object lane\n         JavaSDM.ensure ( _TmpObject instanceof Lane );\n         lane = (Lane) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowNodeRefs.getTrg ();\n\n         // ensure correct type and really bound of object endEvent\n         JavaSDM.ensure ( _TmpObject instanceof EndEvent );\n         endEvent = (EndEvent) _TmpObject;\n\n         // bind object\n         _TmpObject = endEvent.eContainer() instanceof bpmn2.Process ? (bpmn2.Process) endEvent.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof bpmn2.Process );\n         process = (bpmn2.Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(endEvent));\n\n         // check link flowNodeRefs from lane to endEvent\n         JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n         // iterate to-many link laneSets from process to laneSet\n         fujaba__Success = false;\n\n         fujaba__IterProcessToLaneSet = new ArrayList(process.getLaneSets()).iterator ();\n\n         while ( fujaba__IterProcessToLaneSet.hasNext () )\n         {\n            try\n            {\n               laneSet = (LaneSet) fujaba__IterProcessToLaneSet.next ();\n\n               // check object laneSet is really bound\n               JavaSDM.ensure ( laneSet != null );\n               // check link lanes from lane to laneSet\n               JavaSDM.ensure (laneSet.equals (lane.eContainer()\n               ));\n\n               // iterate to-many link targetRef from endEvent to inFlow\n               fujaba__Success = false;\n\n               fujaba__IterEndEventToInFlow = new ArrayList(endEvent.getIncoming()).iterator ();\n\n               while ( fujaba__IterEndEventToInFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlow = (SequenceFlow) fujaba__IterEndEventToInFlow.next ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n                     // check link flowElements from inFlow to process\n                     JavaSDM.ensure (process.equals (inFlow.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_endEvent_flowElements_402877 = endEvent.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) endEvent.eContainer() : null;\n\n                           // check object __DEC_endEvent_flowElements_402877 is really bound\n                           JavaSDM.ensure ( __DEC_endEvent_flowElements_402877 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_endEvent_flowElements_402877.getFlowElements().contains(endEvent));\n\n                           // check isomorphic binding between objects __DEC_endEvent_flowElements_402877 and process \n                           JavaSDM.ensure ( !__DEC_endEvent_flowElements_402877.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link targetRef from endEvent to __DEC_endEvent_targetRef_171711\n                           fujaba__Success = false;\n\n                           fujaba__IterEndEventTo__DEC_endEvent_targetRef_171711 = new ArrayList(endEvent.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterEndEventTo__DEC_endEvent_targetRef_171711.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_endEvent_targetRef_171711 = (SequenceFlow) fujaba__IterEndEventTo__DEC_endEvent_targetRef_171711.next ();\n\n                                 // check object __DEC_endEvent_targetRef_171711 is really bound\n                                 JavaSDM.ensure ( __DEC_endEvent_targetRef_171711 != null );\n                                 // check isomorphic binding between objects __DEC_endEvent_targetRef_171711 and inFlow \n                                 JavaSDM.ensure ( !__DEC_endEvent_targetRef_171711.equals (inFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_flowNodeRefs is really bound\n                        JavaSDM.ensure ( _edge_flowNodeRefs != null );\n                        // check object endEvent is really bound\n                        JavaSDM.ensure ( endEvent != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object lane is really bound\n                        JavaSDM.ensure ( lane != null );\n                        // check object laneSet is really bound\n                        JavaSDM.ensure ( laneSet != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check link flowElements from endEvent to process\n                        JavaSDM.ensure (process.equals (endEvent.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link laneSets from laneSet to process\n                        JavaSDM.ensure (process.equals (laneSet.eContainer()\n                        ));\n\n                        // check link lanes from lane to laneSet\n                        JavaSDM.ensure (laneSet.equals (lane.eContainer()\n                        ));\n\n                        // check link src from _edge_flowNodeRefs to lane\n                        JavaSDM.ensure (lane.equals (_edge_flowNodeRefs.getSrc ()\n                        ));\n\n                        // check link targetRef from inFlow to endEvent\n                        JavaSDM.ensure (endEvent.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link trg from _edge_flowNodeRefs to endEvent\n                        JavaSDM.ensure (endEvent.equals (_edge_flowNodeRefs.getTrg ()\n                        ));\n\n                        // check link flowNodeRefs from lane to endEvent\n                        JavaSDM.ensure (lane.getFlowNodeRefs ().contains (endEvent));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,process,inFlow,endEvent,lane,laneSet);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_30(
			EMoflonEdge _edge_flowNodeRefs);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // EndEventRule
