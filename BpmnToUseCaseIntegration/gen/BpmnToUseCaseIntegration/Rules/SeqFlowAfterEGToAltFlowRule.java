/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Seq Flow After EG To Alt Flow Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getSeqFlowAfterEGToAltFlowRule()
 * @model
 * @generated
 */
public interface SeqFlowAfterEGToAltFlowRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_outgoing_defaultFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_defaultFlow = null;\n      EMoflonEdge __defaultFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_defaultFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,defaultFlow,exclusiveGateway,process,outFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object defaultFlow is really bound\n            JavaSDM.ensure ( defaultFlow != null );\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and defaultFlow \n            JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n            // create object __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n            // assign attribute __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object defaultFlow is really bound\n            JavaSDM.ensure ( defaultFlow != null );\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and defaultFlow \n            JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n            // create object __exclusiveGateway_outgoing_defaultFlow\n            __exclusiveGateway_outgoing_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_default_defaultFlow\n            __exclusiveGateway_default_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __defaultFlow_sourceRef_exclusiveGateway\n            __defaultFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_defaultFlow\n            __process_flowElements_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __exclusiveGateway_default_defaultFlow\n            __exclusiveGateway_default_defaultFlow.setName (\"default\");\n            // assign attribute __defaultFlow_sourceRef_exclusiveGateway\n            __defaultFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n            // assign attribute __exclusiveGateway_outgoing_defaultFlow\n            __exclusiveGateway_outgoing_defaultFlow.setName (\"outgoing\");\n            // assign attribute __process_flowElements_defaultFlow\n            __process_flowElements_defaultFlow.setName (\"flowElements\");\n            // assign attribute __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_outgoing_defaultFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,exclusiveGateway,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_exclusiveGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_default_defaultFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__defaultFlow_sourceRef_exclusiveGateway,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_defaultFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,defaultFlow,\"contextNodes\");\n\n            // create link\n            __exclusiveGateway_default_defaultFlow.setTrg( defaultFlow);\n\n\n            // create link\n            __exclusiveGateway_outgoing_defaultFlow.setTrg( defaultFlow);\n\n\n            // create link\n            __defaultFlow_sourceRef_exclusiveGateway.setSrc( defaultFlow);\n\n\n            // create link\n            __process_flowElements_defaultFlow.setTrg( defaultFlow);\n\n\n            // create link\n            __exclusiveGateway_default_defaultFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __defaultFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_outgoing_defaultFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_defaultFlow.setSrc( process);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setSrc( process);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,defaultFlow,exclusiveGateway,process,outFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, SequenceFlow defaultFlow,
			ExclusiveGateway exclusiveGateway, bpmn2.Process process,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      SequenceFlow defaultFlow = null;\n      SequenceFlowToUCFlow defaultFlowToFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n      SequenceFlowToUCFlow outFlowToAlternativeFlow = null;\n      SequenceFlowToAlternativeFlowAlternative outFlowToAlt = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge outFlowToAlternativeFlow__source__outFlow = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge outFlowToAlternativeFlow__target__alternativeFlow = null;\n      EMoflonEdge useCase__flows__alternativeFlow = null;\n      EMoflonEdge outFlowToAlt__source__outFlow = null;\n      EMoflonEdge normalStep__stepAlternative__alt = null;\n      EMoflonEdge outFlowToAlt__target__alt = null;\n      EMoflonEdge alt__ref__alternativeFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"defaultFlow\"));\n\n         // ensure correct type and really bound of object defaultFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         defaultFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"defaultFlowToFlow\"));\n\n         // ensure correct type and really bound of object defaultFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         defaultFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGatewayToNormalStep\"));\n\n         // ensure correct type and really bound of object exclusiveGatewayToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         exclusiveGatewayToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object alternativeFlow\n         alternativeFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();\n\n         // create object alt\n         alt = UseCaseDSLFactory.eINSTANCE.createAlternativeFlowAlternative();\n\n         // create object outFlowToAlternativeFlow\n         outFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlowToAlt\n         outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToAlternativeFlowAlternative();\n\n         // assign attribute alternativeFlow\n         alternativeFlow.setName ((java.lang.String)csp.getAttributeVariable(\"alternativeFlow\",\"name\").getValue());\n         // assign attribute alt\n         alt.setCondition ((java.lang.String)csp.getAttributeVariable(\"alt\",\"condition\").getValue());\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToAlt,outFlow,\"source\");\n\n         // create link\n         \tuseCase.getFlows().add(alternativeFlow); // add link\n\n\n         // create link\n         \tnormalStep.getStepAlternative().add(alt); // add link\n\n\n         // create link\n         outFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         alt.setRef( alternativeFlow);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToAlternativeFlow,outFlow,\"source\");\n\n         // create link\n         outFlowToAlt.setTarget( alt);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternativeFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n         // check object defaultFlowToFlow is really bound\n         JavaSDM.ensure ( defaultFlowToFlow != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects alternativeFlow and alt \n         JavaSDM.ensure ( !alternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlow and alt \n         JavaSDM.ensure ( !defaultFlow.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlowToFlow and alt \n         JavaSDM.ensure ( !defaultFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGateway and alt \n         JavaSDM.ensure ( !exclusiveGateway.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and alt \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlt and alt \n         JavaSDM.ensure ( !outFlowToAlt.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects processToUseCase and alt \n         JavaSDM.ensure ( !processToUseCase.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlow and alternativeFlow \n         JavaSDM.ensure ( !defaultFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects defaultFlowToFlow and alternativeFlow \n         JavaSDM.ensure ( !defaultFlowToFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and alternativeFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and alternativeFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and alternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects process and alternativeFlow \n         JavaSDM.ensure ( !process.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and alternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects useCase and alternativeFlow \n         JavaSDM.ensure ( !useCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects defaultFlowToFlow and defaultFlow \n         JavaSDM.ensure ( !defaultFlowToFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and defaultFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and defaultFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects flow and defaultFlow \n         JavaSDM.ensure ( !flow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects normalStep and defaultFlow \n         JavaSDM.ensure ( !normalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and defaultFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and defaultFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects process and defaultFlow \n         JavaSDM.ensure ( !process.equals (defaultFlow) );\n\n         // check isomorphic binding between objects processToUseCase and defaultFlow \n         JavaSDM.ensure ( !processToUseCase.equals (defaultFlow) );\n\n         // check isomorphic binding between objects useCase and defaultFlow \n         JavaSDM.ensure ( !useCase.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and defaultFlowToFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and defaultFlowToFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects flow and defaultFlowToFlow \n         JavaSDM.ensure ( !flow.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and defaultFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and defaultFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and defaultFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects process and defaultFlowToFlow \n         JavaSDM.ensure ( !process.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and defaultFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and defaultFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToAlt and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToAlt.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects processToUseCase and exclusiveGateway \n         JavaSDM.ensure ( !processToUseCase.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects useCase and exclusiveGateway \n         JavaSDM.ensure ( !useCase.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects processToUseCase and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !processToUseCase.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects useCase and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !useCase.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlt and flow \n         JavaSDM.ensure ( !outFlowToAlt.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and flow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and normalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and normalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToUseCase and normalStep \n         JavaSDM.ensure ( !processToUseCase.equals (normalStep) );\n\n         // check isomorphic binding between objects useCase and normalStep \n         JavaSDM.ensure ( !useCase.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and outFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlow) );\n\n         // check isomorphic binding between objects useCase and outFlow \n         JavaSDM.ensure ( !useCase.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlowToAlt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlt \n         JavaSDM.ensure ( !process.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlt \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlt \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !process.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__alternativeFlow\n         useCase__flows__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__stepAlternative__alt\n         normalStep__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__target__alt\n         outFlowToAlt__target__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alt__ref__alternativeFlow\n         alt__ref__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"SeqFlowAfterEGToAltFlowRule\");\n         // assign attribute useCase__flows__alternativeFlow\n         useCase__flows__alternativeFlow.setName (\"flows\");\n         // assign attribute normalStep__stepAlternative__alt\n         normalStep__stepAlternative__alt.setName (\"stepAlternative\");\n         // assign attribute outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow.setName (\"target\");\n         // assign attribute alt__ref__alternativeFlow\n         alt__ref__alternativeFlow.setName (\"ref\");\n         // assign attribute outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlt__target__alt\n         outFlowToAlt__target__alt.setName (\"target\");\n         // assign attribute __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__stepAlternative__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__target__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt__ref__alternativeFlow,\"createdEdges\");\n\n         // create link\n         useCase__flows__alternativeFlow.setSrc( useCase);\n\n\n         // create link\n         normalStep__stepAlternative__alt.setSrc( normalStep);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         alt__ref__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         useCase__flows__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         alt__ref__alternativeFlow.setSrc( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setTrg( alt);\n\n\n         // create link\n         normalStep__stepAlternative__alt.setTrg( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setSrc( outFlowToAlt);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setSrc( outFlowToAlt);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setTrg( outFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,useCase,processToUseCase,defaultFlow,flow,defaultFlowToFlow,normalStep,exclusiveGatewayToNormalStep,alternativeFlow,outFlowToAlternativeFlow,alt,outFlowToAlt,exclusiveGateway,process,outFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      SequenceFlow defaultFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __exclusiveGateway_outgoing_defaultFlow = null;\n      EMoflonEdge __defaultFlowToFlow_source_defaultFlow = null;\n      EMoflonEdge __exclusiveGateway_default_defaultFlow = null;\n      EMoflonEdge __process_flowElements_defaultFlow = null;\n      EMoflonEdge __defaultFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __defaultFlowToFlow_target_flow = null;\n      EMoflonEdge __exclusiveGatewayToNormalStep_target_normalStep = null;\n      EMoflonEdge __exclusiveGatewayToNormalStep_source_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterProcessToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      Flow flow = null;\n      Iterator fujaba__IterDefaultFlowToDefaultFlowToFlow = null;\n      SequenceFlowToUCFlow defaultFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"SeqFlowAfterEGToAltFlowRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"defaultFlow\"));\n\n         // ensure correct type and really bound of object defaultFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         defaultFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // iterate to-many link source from defaultFlow to defaultFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterDefaultFlowToDefaultFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(defaultFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterDefaultFlowToDefaultFlowToFlow.hasNext () )\n         {\n            try\n            {\n               defaultFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterDefaultFlowToDefaultFlowToFlow.next ();\n\n               // check object defaultFlowToFlow is really bound\n               JavaSDM.ensure ( defaultFlowToFlow != null );\n               // bind object\n               flow = defaultFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from exclusiveGateway to exclusiveGatewayToNormalStep\n               fujaba__Success = false;\n\n               fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,FlowNodeToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     exclusiveGatewayToNormalStep = (FlowNodeToStep) fujaba__IterExclusiveGatewayToExclusiveGatewayToNormalStep.next ();\n\n                     // check object exclusiveGatewayToNormalStep is really bound\n                     JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                     // bind object\n                     _TmpObject = exclusiveGatewayToNormalStep.getTarget ();\n\n                     // ensure correct type and really bound of object normalStep\n                     JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                     normalStep = (NormalStep) _TmpObject;\n\n                     // iterate to-many link source from process to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToUseCase.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterProcessToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterProcessToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           useCase = processToUseCase.getTarget ();\n\n                           // check object useCase is really bound\n                           JavaSDM.ensure ( useCase != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object defaultFlow is really bound\n                              JavaSDM.ensure ( defaultFlow != null );\n                              // check object defaultFlowToFlow is really bound\n                              JavaSDM.ensure ( defaultFlowToFlow != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object exclusiveGatewayToNormalStep is really bound\n                              JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects outFlow and defaultFlow \n                              JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                              // check link default from exclusiveGateway to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link flowElements from defaultFlow to process\n                              JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from defaultFlowToFlow to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (defaultFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from exclusiveGatewayToNormalStep to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (exclusiveGatewayToNormalStep.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link sourceRef from defaultFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n                              ));\n\n                              // check link sourceRef from outFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from defaultFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (defaultFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from exclusiveGatewayToNormalStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (exclusiveGatewayToNormalStep.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_outgoing_defaultFlow\n                              __exclusiveGateway_outgoing_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __defaultFlowToFlow_source_defaultFlow\n                              __defaultFlowToFlow_source_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_default_defaultFlow\n                              __exclusiveGateway_default_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_defaultFlow\n                              __process_flowElements_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __defaultFlow_sourceRef_exclusiveGateway\n                              __defaultFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __defaultFlowToFlow_target_flow\n                              __defaultFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGatewayToNormalStep_target_normalStep\n                              __exclusiveGatewayToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGatewayToNormalStep_source_exclusiveGateway\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_sourceRef_exclusiveGateway\n                              __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_outgoing_outFlow\n                              __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __defaultFlowToFlow_source_defaultFlow\n                              __defaultFlowToFlow_source_defaultFlow.setName (\"source\");\n                              // assign attribute __defaultFlowToFlow_target_flow\n                              __defaultFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __exclusiveGatewayToNormalStep_source_exclusiveGateway\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway.setName (\"source\");\n                              // assign attribute __exclusiveGatewayToNormalStep_target_normalStep\n                              __exclusiveGatewayToNormalStep_target_normalStep.setName (\"target\");\n                              // assign attribute __exclusiveGateway_default_defaultFlow\n                              __exclusiveGateway_default_defaultFlow.setName (\"default\");\n                              // assign attribute __defaultFlow_sourceRef_exclusiveGateway\n                              __defaultFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n                              // assign attribute __exclusiveGateway_outgoing_defaultFlow\n                              __exclusiveGateway_outgoing_defaultFlow.setName (\"outgoing\");\n                              // assign attribute __outFlow_sourceRef_exclusiveGateway\n                              __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n                              // assign attribute __exclusiveGateway_outgoing_outFlow\n                              __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __process_flowElements_defaultFlow\n                              __process_flowElements_defaultFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              __defaultFlowToFlow_source_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(defaultFlow);\n\n\n                              // create link\n                              __exclusiveGateway_default_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              __process_flowElements_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              __defaultFlow_sourceRef_exclusiveGateway.setSrc( defaultFlow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              __defaultFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __defaultFlowToFlow_source_defaultFlow.setSrc( defaultFlowToFlow);\n\n\n                              // create link\n                              __defaultFlowToFlow_target_flow.setSrc( defaultFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(defaultFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_target_normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(exclusiveGatewayToNormalStep);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __defaultFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_default_defaultFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_defaultFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(exclusiveGateway);\n\n\n                              // create link\n                              __process_flowElements_defaultFlow.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n                              // create link\n                              __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_outgoing_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlowToFlow_source_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlow_sourceRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_default_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGatewayToNormalStep_target_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGatewayToNormalStep_source_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlowToFlow_target_flow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,useCase,processToUseCase,defaultFlow,flow,defaultFlowToFlow,normalStep,exclusiveGatewayToNormalStep,exclusiveGateway,process,outFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"SeqFlowAfterEGToAltFlowRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"defaultFlow\", defaultFlow);\nmatch.registerObject(\"exclusiveGateway\", exclusiveGateway);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, SequenceFlow defaultFlow,
			ExclusiveGateway exclusiveGateway, bpmn2.Process process,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, SequenceFlow defaultFlow,
			ExclusiveGateway exclusiveGateway, bpmn2.Process process,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_outFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(\"outFlow.id\", true, csp);\r\nvar_outFlow_id.setValue(outFlow.getId());\r\nVariable var_outFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"outFlow.name\", true, csp);\r\nvar_outFlow_name.setValue(outFlow.getName());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", csp);\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_outFlow_id,var_alternativeFlow_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_outFlow_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"defaultFlow\",defaultFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"defaultFlowToFlow\",defaultFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"exclusiveGatewayToNormalStep\",exclusiveGatewayToNormalStep);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, ProcessToUseCase processToUseCase,
			SequenceFlow defaultFlow, Flow flow,
			SequenceFlowToUCFlow defaultFlowToFlow, NormalStep normalStep,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			ExclusiveGateway exclusiveGateway, bpmn2.Process process,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"defaultFlow\", defaultFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"defaultFlowToFlow\", defaultFlowToFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"alternativeFlow\", alternativeFlow);\nruleresult.registerObject(\"outFlowToAlternativeFlow\", outFlowToAlternativeFlow);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"outFlowToAlt\", outFlowToAlt);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject useCase,
			EObject processToUseCase, EObject defaultFlow, EObject flow,
			EObject defaultFlowToFlow, EObject normalStep,
			EObject exclusiveGatewayToNormalStep, EObject alternativeFlow,
			EObject outFlowToAlternativeFlow, EObject alt,
			EObject outFlowToAlt, EObject exclusiveGateway, EObject process,
			EObject outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __useCase_flows_flow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,useCase,flow,normalStep,alternativeFlow,alt));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object alternativeFlow is really bound\n            JavaSDM.ensure ( alternativeFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects flow and alternativeFlow \n            JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n            // create object __alt_ref_alternativeFlow\n            __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __normalStep_stepAlternative_alt\n            __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_alternativeFlow\n            __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_alternativeFlow\n            __useCase_flows_alternativeFlow.setName (\"flows\");\n            // assign attribute __normalStep_stepAlternative_alt\n            __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n            // assign attribute __alt_ref_alternativeFlow\n            __alt_ref_alternativeFlow.setName (\"ref\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__alt_ref_alternativeFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alternativeFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_stepAlternative_alt,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_alternativeFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alt,\"toBeTranslatedNodes\");\n\n            // create link\n            __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n            // create link\n            __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n            // create link\n            __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n            // create link\n            __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n            // create link\n            __alt_ref_alternativeFlow.setSrc( alt);\n\n\n            // create link\n            __normalStep_stepAlternative_alt.setTrg( alt);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object alternativeFlow is really bound\n            JavaSDM.ensure ( alternativeFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects flow and alternativeFlow \n            JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,useCase,flow,normalStep,alternativeFlow,alt);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlow alternativeFlow,
			AlternativeFlowAlternative alt);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      SequenceFlow defaultFlow = null;\n      SequenceFlowToUCFlow defaultFlowToFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      Process process = null;\n      ProcessToUseCase processToUseCase = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      SequenceFlowToUCFlow outFlowToAlternativeFlow = null;\n      SequenceFlow outFlow = null;\n      SequenceFlowToAlternativeFlowAlternative outFlowToAlt = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge outFlowToAlternativeFlow__source__outFlow = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge exclusiveGateway__outgoing__outFlow = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge outFlowToAlternativeFlow__target__alternativeFlow = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge outFlow__sourceRef__exclusiveGateway = null;\n      EMoflonEdge outFlowToAlt__source__outFlow = null;\n      EMoflonEdge outFlowToAlt__target__alt = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"alternativeFlow\"));\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"defaultFlow\"));\n\n         // ensure correct type and really bound of object defaultFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         defaultFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"defaultFlowToFlow\"));\n\n         // ensure correct type and really bound of object defaultFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         defaultFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGatewayToNormalStep\"));\n\n         // ensure correct type and really bound of object exclusiveGatewayToNormalStep\n         JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n         exclusiveGatewayToNormalStep = (FlowNodeToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToUseCase\"));\n\n         // ensure correct type and really bound of object processToUseCase\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToUseCase );\n         processToUseCase = (ProcessToUseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object outFlowToAlternativeFlow\n         outFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // create object outFlowToAlt\n         outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToAlternativeFlowAlternative();\n\n         // assign attribute outFlow\n         outFlow.setId ((java.lang.String)csp.getAttributeVariable(\"outFlow\",\"id\").getValue());\n         // assign attribute outFlow\n         outFlow.setName ((java.lang.String)csp.getAttributeVariable(\"outFlow\",\"name\").getValue());\n\n         // create link\n         outFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToAlternativeFlow,outFlow,\"source\");\n\n         // create link\n         outFlowToAlt.setTarget( alt);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToAlt,outFlow,\"source\");\n\n         // create link\n         outFlow.setSourceRef( exclusiveGateway);\n\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternativeFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object alternativeFlow is really bound\n         JavaSDM.ensure ( alternativeFlow != null );\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n         // check object defaultFlowToFlow is really bound\n         JavaSDM.ensure ( defaultFlowToFlow != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToAlt is really bound\n         JavaSDM.ensure ( outFlowToAlt != null );\n         // check object outFlowToAlternativeFlow is really bound\n         JavaSDM.ensure ( outFlowToAlternativeFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToUseCase is really bound\n         JavaSDM.ensure ( processToUseCase != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects alternativeFlow and alt \n         JavaSDM.ensure ( !alternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlow and alt \n         JavaSDM.ensure ( !defaultFlow.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlowToFlow and alt \n         JavaSDM.ensure ( !defaultFlowToFlow.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGateway and alt \n         JavaSDM.ensure ( !exclusiveGateway.equals (alt) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and alt \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects normalStep and alt \n         JavaSDM.ensure ( !normalStep.equals (alt) );\n\n         // check isomorphic binding between objects outFlow and alt \n         JavaSDM.ensure ( !outFlow.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlt and alt \n         JavaSDM.ensure ( !outFlowToAlt.equals (alt) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alt) );\n\n         // check isomorphic binding between objects process and alt \n         JavaSDM.ensure ( !process.equals (alt) );\n\n         // check isomorphic binding between objects processToUseCase and alt \n         JavaSDM.ensure ( !processToUseCase.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects defaultFlow and alternativeFlow \n         JavaSDM.ensure ( !defaultFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects defaultFlowToFlow and alternativeFlow \n         JavaSDM.ensure ( !defaultFlowToFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and alternativeFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and alternativeFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects normalStep and alternativeFlow \n         JavaSDM.ensure ( !normalStep.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and alternativeFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects process and alternativeFlow \n         JavaSDM.ensure ( !process.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and alternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects useCase and alternativeFlow \n         JavaSDM.ensure ( !useCase.equals (alternativeFlow) );\n\n         // check isomorphic binding between objects defaultFlowToFlow and defaultFlow \n         JavaSDM.ensure ( !defaultFlowToFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and defaultFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and defaultFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects flow and defaultFlow \n         JavaSDM.ensure ( !flow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects normalStep and defaultFlow \n         JavaSDM.ensure ( !normalStep.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and defaultFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (defaultFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and defaultFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (defaultFlow) );\n\n         // check isomorphic binding between objects process and defaultFlow \n         JavaSDM.ensure ( !process.equals (defaultFlow) );\n\n         // check isomorphic binding between objects processToUseCase and defaultFlow \n         JavaSDM.ensure ( !processToUseCase.equals (defaultFlow) );\n\n         // check isomorphic binding between objects useCase and defaultFlow \n         JavaSDM.ensure ( !useCase.equals (defaultFlow) );\n\n         // check isomorphic binding between objects exclusiveGateway and defaultFlowToFlow \n         JavaSDM.ensure ( !exclusiveGateway.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and defaultFlowToFlow \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects flow and defaultFlowToFlow \n         JavaSDM.ensure ( !flow.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and defaultFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and defaultFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlt and defaultFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and defaultFlowToFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects process and defaultFlowToFlow \n         JavaSDM.ensure ( !process.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects processToUseCase and defaultFlowToFlow \n         JavaSDM.ensure ( !processToUseCase.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects useCase and defaultFlowToFlow \n         JavaSDM.ensure ( !useCase.equals (defaultFlowToFlow) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToAlt and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToAlt.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects processToUseCase and exclusiveGateway \n         JavaSDM.ensure ( !processToUseCase.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects useCase and exclusiveGateway \n         JavaSDM.ensure ( !useCase.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects processToUseCase and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !processToUseCase.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects useCase and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !useCase.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlt and flow \n         JavaSDM.ensure ( !outFlowToAlt.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and flow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToUseCase and flow \n         JavaSDM.ensure ( !processToUseCase.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and normalStep \n         JavaSDM.ensure ( !outFlowToAlt.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and normalStep \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToUseCase and normalStep \n         JavaSDM.ensure ( !processToUseCase.equals (normalStep) );\n\n         // check isomorphic binding between objects useCase and normalStep \n         JavaSDM.ensure ( !useCase.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToAlt and outFlow \n         JavaSDM.ensure ( !outFlowToAlt.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlow \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlow) );\n\n         // check isomorphic binding between objects useCase and outFlow \n         JavaSDM.ensure ( !useCase.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToAlternativeFlow and outFlowToAlt \n         JavaSDM.ensure ( !outFlowToAlternativeFlow.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlt \n         JavaSDM.ensure ( !process.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlt \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlt \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlt) );\n\n         // check isomorphic binding between objects process and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !process.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !processToUseCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects useCase and outFlowToAlternativeFlow \n         JavaSDM.ensure ( !useCase.equals (outFlowToAlternativeFlow) );\n\n         // check isomorphic binding between objects processToUseCase and process \n         JavaSDM.ensure ( !processToUseCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and process \n         JavaSDM.ensure ( !useCase.equals (process) );\n\n         // check isomorphic binding between objects useCase and processToUseCase \n         JavaSDM.ensure ( !useCase.equals (processToUseCase) );\n\n         // create object __alt_ref_alternativeFlow\n         __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_stepAlternative_alt\n         __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__outgoing__outFlow\n         exclusiveGateway__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_alternativeFlow\n         __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__exclusiveGateway\n         outFlow__sourceRef__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToAlt__target__alt\n         outFlowToAlt__target__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"SeqFlowAfterEGToAltFlowRule\");\n         // assign attribute __useCase_flows_alternativeFlow\n         __useCase_flows_alternativeFlow.setName (\"flows\");\n         // assign attribute __normalStep_stepAlternative_alt\n         __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n         // assign attribute outFlowToAlternativeFlow__source__outFlow\n         outFlowToAlternativeFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlternativeFlow__target__alternativeFlow\n         outFlowToAlternativeFlow__target__alternativeFlow.setName (\"target\");\n         // assign attribute __alt_ref_alternativeFlow\n         __alt_ref_alternativeFlow.setName (\"ref\");\n         // assign attribute outFlowToAlt__source__outFlow\n         outFlowToAlt__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToAlt__target__alt\n         outFlowToAlt__target__alt.setName (\"target\");\n         // assign attribute outFlow__sourceRef__exclusiveGateway\n         outFlow__sourceRef__exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute exclusiveGateway__outgoing__outFlow\n         exclusiveGateway__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__alt_ref_alternativeFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_stepAlternative_alt,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlternativeFlow__target__alternativeFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_alternativeFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToAlt__target__alt,\"createdEdges\");\n\n         // create link\n         __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n         // create link\n         __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n         // create link\n         __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__target__alternativeFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setSrc( outFlowToAlternativeFlow);\n\n\n         // create link\n         outFlowToAlt__target__alt.setTrg( alt);\n\n\n         // create link\n         __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n         // create link\n         __alt_ref_alternativeFlow.setSrc( alt);\n\n\n         // create link\n         outFlowToAlt__target__alt.setSrc( outFlowToAlt);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setSrc( outFlowToAlt);\n\n\n         // create link\n         exclusiveGateway__outgoing__outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         outFlow__sourceRef__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         outFlow__sourceRef__exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         outFlowToAlt__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGateway__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToAlternativeFlow__source__outFlow.setTrg( outFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,useCase,processToUseCase,defaultFlow,flow,defaultFlowToFlow,normalStep,exclusiveGatewayToNormalStep,alternativeFlow,outFlowToAlternativeFlow,alt,outFlowToAlt,exclusiveGateway,process,outFlow);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow alternativeFlow = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      UseCase useCase = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __processToUseCase_target_useCase = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __useCase_flows_alternativeFlow = null;\n      EMoflonEdge __processToUseCase_source_process = null;\n      EMoflonEdge __defaultFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __defaultFlowToFlow_source_defaultFlow = null;\n      EMoflonEdge __process_flowElements_defaultFlow = null;\n      EMoflonEdge __exclusiveGateway_outgoing_defaultFlow = null;\n      EMoflonEdge __exclusiveGateway_default_defaultFlow = null;\n      EMoflonEdge __defaultFlowToFlow_target_flow = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __exclusiveGatewayToNormalStep_target_normalStep = null;\n      EMoflonEdge __normalStep_stepAlternative_alt = null;\n      EMoflonEdge __exclusiveGatewayToNormalStep_source_exclusiveGateway = null;\n      EMoflonEdge __alt_ref_alternativeFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      CSP csp = null;\n      Process process = null;\n      Iterator fujaba__IterUseCaseToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Iterator fujaba__IterNormalStepToExclusiveGatewayToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlow defaultFlow = null;\n      Iterator fujaba__IterFlowToDefaultFlowToFlow = null;\n      SequenceFlowToUCFlow defaultFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"SeqFlowAfterEGToAltFlowRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (match.getObject(\"alternativeFlow\"));\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects flow and alternativeFlow \n         JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n         // iterate to-many link target from flow to defaultFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterFlowToDefaultFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n         while ( fujaba__IterFlowToDefaultFlowToFlow.hasNext () )\n         {\n            try\n            {\n               defaultFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToDefaultFlowToFlow.next ();\n\n               // check object defaultFlowToFlow is really bound\n               JavaSDM.ensure ( defaultFlowToFlow != null );\n               // bind object\n               defaultFlow = defaultFlowToFlow.getSource ();\n\n               // check object defaultFlow is really bound\n               JavaSDM.ensure ( defaultFlow != null );\n\n               // iterate to-many link target from normalStep to exclusiveGatewayToNormalStep\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepToExclusiveGatewayToNormalStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,FlowNodeToStep.class,\"target\")).iterator ();\n\n               while ( fujaba__IterNormalStepToExclusiveGatewayToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     exclusiveGatewayToNormalStep = (FlowNodeToStep) fujaba__IterNormalStepToExclusiveGatewayToNormalStep.next ();\n\n                     // check object exclusiveGatewayToNormalStep is really bound\n                     JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                     // bind object\n                     _TmpObject = exclusiveGatewayToNormalStep.getSource ();\n\n                     // ensure correct type and really bound of object exclusiveGateway\n                     JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n                     exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n                     // iterate to-many link target from useCase to processToUseCase\n                     fujaba__Success = false;\n\n                     fujaba__IterUseCaseToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,ProcessToUseCase.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterUseCaseToProcessToUseCase.hasNext () )\n                     {\n                        try\n                        {\n                           processToUseCase = (ProcessToUseCase) fujaba__IterUseCaseToProcessToUseCase.next ();\n\n                           // check object processToUseCase is really bound\n                           JavaSDM.ensure ( processToUseCase != null );\n                           // bind object\n                           process = processToUseCase.getSource ();\n\n                           // check object process is really bound\n                           JavaSDM.ensure ( process != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object alternativeFlow is really bound\n                              JavaSDM.ensure ( alternativeFlow != null );\n                              // check object defaultFlow is really bound\n                              JavaSDM.ensure ( defaultFlow != null );\n                              // check object defaultFlowToFlow is really bound\n                              JavaSDM.ensure ( defaultFlowToFlow != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object exclusiveGatewayToNormalStep is really bound\n                              JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToUseCase is really bound\n                              JavaSDM.ensure ( processToUseCase != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects flow and alternativeFlow \n                              JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                              // check link default from exclusiveGateway to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link ref from alt to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                              ));\n\n                              // check link flowElements from defaultFlow to process\n                              JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flows from alternativeFlow to useCase\n                              JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from defaultFlowToFlow to defaultFlow\n                              JavaSDM.ensure (defaultFlow.equals (defaultFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from exclusiveGatewayToNormalStep to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (exclusiveGatewayToNormalStep.getSource ()\n                              ));\n\n                              // check link source from processToUseCase to process\n                              JavaSDM.ensure (process.equals (processToUseCase.getSource ()\n                              ));\n\n                              // check link sourceRef from defaultFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n                              ));\n\n                              // check link stepAlternative from alt to normalStep\n                              JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from defaultFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (defaultFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from exclusiveGatewayToNormalStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (exclusiveGatewayToNormalStep.getTarget ()\n                              ));\n\n                              // check link target from processToUseCase to useCase\n                              JavaSDM.ensure (useCase.equals (processToUseCase.getTarget ()\n                              ));\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_alternativeFlow\n                              __useCase_flows_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToUseCase_source_process\n                              __processToUseCase_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __defaultFlow_sourceRef_exclusiveGateway\n                              __defaultFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __defaultFlowToFlow_source_defaultFlow\n                              __defaultFlowToFlow_source_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_defaultFlow\n                              __process_flowElements_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_outgoing_defaultFlow\n                              __exclusiveGateway_outgoing_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_default_defaultFlow\n                              __exclusiveGateway_default_defaultFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __defaultFlowToFlow_target_flow\n                              __defaultFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGatewayToNormalStep_target_normalStep\n                              __exclusiveGatewayToNormalStep_target_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __normalStep_stepAlternative_alt\n                              __normalStep_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGatewayToNormalStep_source_exclusiveGateway\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __alt_ref_alternativeFlow\n                              __alt_ref_alternativeFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCase_flows_alternativeFlow\n                              __useCase_flows_alternativeFlow.setName (\"flows\");\n                              // assign attribute __processToUseCase_source_process\n                              __processToUseCase_source_process.setName (\"source\");\n                              // assign attribute __processToUseCase_target_useCase\n                              __processToUseCase_target_useCase.setName (\"target\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __defaultFlowToFlow_source_defaultFlow\n                              __defaultFlowToFlow_source_defaultFlow.setName (\"source\");\n                              // assign attribute __defaultFlowToFlow_target_flow\n                              __defaultFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __normalStep_stepAlternative_alt\n                              __normalStep_stepAlternative_alt.setName (\"stepAlternative\");\n                              // assign attribute __exclusiveGatewayToNormalStep_source_exclusiveGateway\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway.setName (\"source\");\n                              // assign attribute __exclusiveGatewayToNormalStep_target_normalStep\n                              __exclusiveGatewayToNormalStep_target_normalStep.setName (\"target\");\n                              // assign attribute __alt_ref_alternativeFlow\n                              __alt_ref_alternativeFlow.setName (\"ref\");\n                              // assign attribute __exclusiveGateway_default_defaultFlow\n                              __exclusiveGateway_default_defaultFlow.setName (\"default\");\n                              // assign attribute __defaultFlow_sourceRef_exclusiveGateway\n                              __defaultFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n                              // assign attribute __exclusiveGateway_outgoing_defaultFlow\n                              __exclusiveGateway_outgoing_defaultFlow.setName (\"outgoing\");\n                              // assign attribute __process_flowElements_defaultFlow\n                              __process_flowElements_defaultFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __useCase_flows_alternativeFlow.setSrc( useCase);\n\n\n                              // create link\n                              __processToUseCase_source_process.setSrc( processToUseCase);\n\n\n                              // create link\n                              __processToUseCase_target_useCase.setSrc( processToUseCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToUseCase);\n\n\n                              // create link\n                              __defaultFlow_sourceRef_exclusiveGateway.setSrc( defaultFlow);\n\n\n                              // create link\n                              __defaultFlowToFlow_source_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              __process_flowElements_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(defaultFlow);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              __exclusiveGateway_default_defaultFlow.setTrg( defaultFlow);\n\n\n                              // create link\n                              __defaultFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              __defaultFlowToFlow_target_flow.setSrc( defaultFlowToFlow);\n\n\n                              // create link\n                              __defaultFlowToFlow_source_defaultFlow.setSrc( defaultFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(defaultFlowToFlow);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_target_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __normalStep_stepAlternative_alt.setSrc( normalStep);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(exclusiveGatewayToNormalStep);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_target_normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n                              // create link\n                              __useCase_flows_alternativeFlow.setTrg( alternativeFlow);\n\n\n                              // create link\n                              __alt_ref_alternativeFlow.setTrg( alternativeFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(alternativeFlow);\n\n\n                              // create link\n                              __alt_ref_alternativeFlow.setSrc( alt);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(alt);\n\n\n                              // create link\n                              __normalStep_stepAlternative_alt.setTrg( alt);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_defaultFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_default_defaultFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __defaultFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGatewayToNormalStep_source_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __process_flowElements_defaultFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n                              // create link\n                              __processToUseCase_source_process.setTrg( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_stepAlternative_alt,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGatewayToNormalStep_target_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_target_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToUseCase_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_alternativeFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_alternativeFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_default_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlow_sourceRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__defaultFlowToFlow_source_defaultFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGatewayToNormalStep_source_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_outgoing_defaultFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,useCase,processToUseCase,defaultFlow,flow,defaultFlowToFlow,normalStep,exclusiveGatewayToNormalStep,alternativeFlow,alt,exclusiveGateway,process));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"SeqFlowAfterEGToAltFlowRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"alternativeFlow\", alternativeFlow);\nmatch.registerObject(\"alt\", alt);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlow alternativeFlow,
			AlternativeFlowAlternative alt);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, UseCase useCase, Flow flow,
			NormalStep normalStep, AlternativeFlow alternativeFlow,
			AlternativeFlowAlternative alt);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", true, csp);\r\nvar_alternativeFlow_name.setValue(alternativeFlow.getName());\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", true, csp);\r\nvar_alt_condition.setValue(alt.getCondition());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_outFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(\"outFlow.id\", csp);\r\nVariable var_outFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"outFlow.name\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_outFlow_id,var_alternativeFlow_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_outFlow_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"defaultFlow\",defaultFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"defaultFlowToFlow\",defaultFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"exclusiveGatewayToNormalStep\",exclusiveGatewayToNormalStep);\r\nisApplicableMatch.registerObject(\"alternativeFlow\",alternativeFlow);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, ProcessToUseCase processToUseCase,
			SequenceFlow defaultFlow, Flow flow,
			SequenceFlowToUCFlow defaultFlowToFlow, NormalStep normalStep,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			AlternativeFlow alternativeFlow, AlternativeFlowAlternative alt,
			ExclusiveGateway exclusiveGateway, bpmn2.Process process);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"processToUseCase\", processToUseCase);\nruleresult.registerObject(\"defaultFlow\", defaultFlow);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"defaultFlowToFlow\", defaultFlowToFlow);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"alternativeFlow\", alternativeFlow);\nruleresult.registerObject(\"outFlowToAlternativeFlow\", outFlowToAlternativeFlow);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"outFlowToAlt\", outFlowToAlt);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject useCase,
			EObject processToUseCase, EObject defaultFlow, EObject flow,
			EObject defaultFlowToFlow, EObject normalStep,
			EObject exclusiveGatewayToNormalStep, EObject alternativeFlow,
			EObject outFlowToAlternativeFlow, EObject alt,
			EObject outFlowToAlt, EObject exclusiveGateway, EObject process,
			EObject outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"alternativeFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow()) && match.getObject(\"alt\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_520081 = null;\n      NormalStep __DEC_alt_stepAlternative_714781 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_992604 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_992604 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToNormalStep = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterAlternativeFlowToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      AlternativeFlow alternativeFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n\n         // check link flows from alternativeFlow to useCase\n         JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n         ));\n\n         // iterate to-many link flows from useCase to flow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToFlow.hasNext () )\n         {\n            try\n            {\n               flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // iterate to-many link ref from alternativeFlow to alt\n               fujaba__Success = false;\n\n               fujaba__IterAlternativeFlowToAlt = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n               while ( fujaba__IterAlternativeFlowToAlt.hasNext () )\n               {\n                  try\n                  {\n                     alt = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowToAlt.next ();\n\n                     // check object alt is really bound\n                     JavaSDM.ensure ( alt != null );\n                     // iterate to-many link steps from flow to normalStep\n                     fujaba__Success = false;\n\n                     fujaba__IterFlowToNormalStep = new ArrayList(flow.getSteps()).iterator ();\n\n                     while ( fujaba__IterFlowToNormalStep.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterFlowToNormalStep.next ();\n\n                           // ensure correct type and really bound of object normalStep\n                           JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                           normalStep = (NormalStep) _TmpObject;\n                           // check link stepAlternative from alt to normalStep\n                           JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_alternativeFlow_flows_520081 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                                 // check object __DEC_alternativeFlow_flows_520081 is really bound\n                                 JavaSDM.ensure ( __DEC_alternativeFlow_flows_520081 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_alternativeFlow_flows_520081.getFlows().contains(alternativeFlow));\n\n                                 // check isomorphic binding between objects __DEC_alternativeFlow_flows_520081 and useCase \n                                 JavaSDM.ensure ( !__DEC_alternativeFlow_flows_520081.equals (useCase) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_alt_stepAlternative_714781 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                                 // check object __DEC_alt_stepAlternative_714781 is really bound\n                                 JavaSDM.ensure ( __DEC_alt_stepAlternative_714781 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_alt_stepAlternative_714781.getStepAlternative().contains(alt));\n\n                                 // check isomorphic binding between objects __DEC_alt_stepAlternative_714781 and normalStep \n                                 JavaSDM.ensure ( !__DEC_alt_stepAlternative_714781.equals (normalStep) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_992604\n                                 fujaba__Success = false;\n\n                                 fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_992604 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_992604.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_alternativeFlow_ref_992604 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_992604.next ();\n\n                                       // check object __DEC_alternativeFlow_ref_992604 is really bound\n                                       JavaSDM.ensure ( __DEC_alternativeFlow_ref_992604 != null );\n                                       // check isomorphic binding between objects __DEC_alternativeFlow_ref_992604 and alt \n                                       JavaSDM.ensure ( !__DEC_alternativeFlow_ref_992604.equals (alt) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_flows is really bound\n                              JavaSDM.ensure ( _edge_flows != null );\n                              // check object alt is really bound\n                              JavaSDM.ensure ( alt != null );\n                              // check object alternativeFlow is really bound\n                              JavaSDM.ensure ( alternativeFlow != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check isomorphic binding between objects flow and alternativeFlow \n                              JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                              // check link ref from alt to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                              ));\n\n                              // check link flows from alternativeFlow to useCase\n                              JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link src from _edge_flows to useCase\n                              JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                              ));\n\n                              // check link stepAlternative from alt to normalStep\n                              JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link trg from _edge_flows to alternativeFlow\n                              JavaSDM.ensure (alternativeFlow.equals (_edge_flows.getTrg ()\n                              ));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alternativeFlow,alt);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_214(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_191921 = null;\n      NormalStep __DEC_alt_stepAlternative_989469 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_991498 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_991498 = null;\n      Match match = null;\n      Iterator fujaba__IterUseCaseToAlternativeFlow = null;\n      AlternativeFlow alternativeFlow = null;\n      UseCase useCase = null;\n      Flow flow = null;\n      AlternativeFlowAlternative alt = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_stepAlternative is really bound\n         JavaSDM.ensure ( _edge_stepAlternative != null );\n         // bind object\n         _TmpObject = _edge_stepAlternative.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_stepAlternative.getTrg ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // check link stepAlternative from alt to normalStep\n         JavaSDM.ensure (normalStep.equals (alt.eContainer()\n         ));\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // iterate to-many link flows from useCase to alternativeFlow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToAlternativeFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToAlternativeFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterUseCaseToAlternativeFlow.next ();\n\n               // ensure correct type and really bound of object alternativeFlow\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n               alternativeFlow = (AlternativeFlow) _TmpObject;\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // check link ref from alt to alternativeFlow\n               JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alternativeFlow_flows_191921 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                     // check object __DEC_alternativeFlow_flows_191921 is really bound\n                     JavaSDM.ensure ( __DEC_alternativeFlow_flows_191921 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alternativeFlow_flows_191921.getFlows().contains(alternativeFlow));\n\n                     // check isomorphic binding between objects __DEC_alternativeFlow_flows_191921 and useCase \n                     JavaSDM.ensure ( !__DEC_alternativeFlow_flows_191921.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alt_stepAlternative_989469 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                     // check object __DEC_alt_stepAlternative_989469 is really bound\n                     JavaSDM.ensure ( __DEC_alt_stepAlternative_989469 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alt_stepAlternative_989469.getStepAlternative().contains(alt));\n\n                     // check isomorphic binding between objects __DEC_alt_stepAlternative_989469 and normalStep \n                     JavaSDM.ensure ( !__DEC_alt_stepAlternative_989469.equals (normalStep) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_991498\n                     fujaba__Success = false;\n\n                     fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_991498 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_991498.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_alternativeFlow_ref_991498 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_991498.next ();\n\n                           // check object __DEC_alternativeFlow_ref_991498 is really bound\n                           JavaSDM.ensure ( __DEC_alternativeFlow_ref_991498 != null );\n                           // check isomorphic binding between objects __DEC_alternativeFlow_ref_991498 and alt \n                           JavaSDM.ensure ( !__DEC_alternativeFlow_ref_991498.equals (alt) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_stepAlternative is really bound\n                  JavaSDM.ensure ( _edge_stepAlternative != null );\n                  // check object alt is really bound\n                  JavaSDM.ensure ( alt != null );\n                  // check object alternativeFlow is really bound\n                  JavaSDM.ensure ( alternativeFlow != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects flow and alternativeFlow \n                  JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                  // check link ref from alt to alternativeFlow\n                  JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                  ));\n\n                  // check link flows from alternativeFlow to useCase\n                  JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link src from _edge_stepAlternative to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_stepAlternative.getSrc ()\n                  ));\n\n                  // check link stepAlternative from alt to normalStep\n                  JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_stepAlternative to alt\n                  JavaSDM.ensure (alt.equals (_edge_stepAlternative.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alternativeFlow,alt);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_215(
			EMoflonEdge _edge_stepAlternative);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_alternativeFlow_flows_115870 = null;\n      NormalStep __DEC_alt_stepAlternative_677545 = null;\n      Iterator fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_503521 = null;\n      AlternativeFlowAlternative __DEC_alternativeFlow_ref_503521 = null;\n      Match match = null;\n      Iterator fujaba__IterFlowToNormalStep = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterUseCaseToFlow = null;\n      Flow flow = null;\n      UseCase useCase = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_ref is really bound\n         JavaSDM.ensure ( _edge_ref != null );\n         // bind object\n         _TmpObject = _edge_ref.getSrc ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_ref.getTrg ();\n\n         // ensure correct type and really bound of object alternativeFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         alternativeFlow = (AlternativeFlow) _TmpObject;\n\n         // check link ref from alt to alternativeFlow\n         JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n         ));\n\n         // bind object\n         useCase = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(alternativeFlow));\n\n         // iterate to-many link flows from useCase to flow\n         fujaba__Success = false;\n\n         fujaba__IterUseCaseToFlow = new ArrayList(useCase.getFlows()).iterator ();\n\n         while ( fujaba__IterUseCaseToFlow.hasNext () )\n         {\n            try\n            {\n               flow = (Flow) fujaba__IterUseCaseToFlow.next ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n               // check isomorphic binding between objects flow and alternativeFlow \n               JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n               // iterate to-many link steps from flow to normalStep\n               fujaba__Success = false;\n\n               fujaba__IterFlowToNormalStep = new ArrayList(flow.getSteps()).iterator ();\n\n               while ( fujaba__IterFlowToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterFlowToNormalStep.next ();\n\n                     // ensure correct type and really bound of object normalStep\n                     JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                     normalStep = (NormalStep) _TmpObject;\n                     // check link stepAlternative from alt to normalStep\n                     JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_alternativeFlow_flows_115870 = alternativeFlow.eContainer() instanceof UseCase ? (UseCase) alternativeFlow.eContainer() : null;\n\n                           // check object __DEC_alternativeFlow_flows_115870 is really bound\n                           JavaSDM.ensure ( __DEC_alternativeFlow_flows_115870 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_alternativeFlow_flows_115870.getFlows().contains(alternativeFlow));\n\n                           // check isomorphic binding between objects __DEC_alternativeFlow_flows_115870 and useCase \n                           JavaSDM.ensure ( !__DEC_alternativeFlow_flows_115870.equals (useCase) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_alt_stepAlternative_677545 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                           // check object __DEC_alt_stepAlternative_677545 is really bound\n                           JavaSDM.ensure ( __DEC_alt_stepAlternative_677545 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_alt_stepAlternative_677545.getStepAlternative().contains(alt));\n\n                           // check isomorphic binding between objects __DEC_alt_stepAlternative_677545 and normalStep \n                           JavaSDM.ensure ( !__DEC_alt_stepAlternative_677545.equals (normalStep) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link ref from alternativeFlow to __DEC_alternativeFlow_ref_503521\n                           fujaba__Success = false;\n\n                           fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_503521 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(alternativeFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_503521.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_alternativeFlow_ref_503521 = (AlternativeFlowAlternative) fujaba__IterAlternativeFlowTo__DEC_alternativeFlow_ref_503521.next ();\n\n                                 // check object __DEC_alternativeFlow_ref_503521 is really bound\n                                 JavaSDM.ensure ( __DEC_alternativeFlow_ref_503521 != null );\n                                 // check isomorphic binding between objects __DEC_alternativeFlow_ref_503521 and alt \n                                 JavaSDM.ensure ( !__DEC_alternativeFlow_ref_503521.equals (alt) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_ref is really bound\n                        JavaSDM.ensure ( _edge_ref != null );\n                        // check object alt is really bound\n                        JavaSDM.ensure ( alt != null );\n                        // check object alternativeFlow is really bound\n                        JavaSDM.ensure ( alternativeFlow != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object normalStep is really bound\n                        JavaSDM.ensure ( normalStep != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check isomorphic binding between objects flow and alternativeFlow \n                        JavaSDM.ensure ( !flow.equals (alternativeFlow) );\n\n                        // check link ref from alt to alternativeFlow\n                        JavaSDM.ensure (alternativeFlow.equals (alt.getRef ()\n                        ));\n\n                        // check link flows from alternativeFlow to useCase\n                        JavaSDM.ensure (useCase.equals (alternativeFlow.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link src from _edge_ref to alt\n                        JavaSDM.ensure (alt.equals (_edge_ref.getSrc ()\n                        ));\n\n                        // check link stepAlternative from alt to normalStep\n                        JavaSDM.ensure (normalStep.equals (alt.eContainer()\n                        ));\n\n                        // check link steps from normalStep to flow\n                        JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                        ));\n\n                        // check link trg from _edge_ref to alternativeFlow\n                        JavaSDM.ensure (alternativeFlow.equals (_edge_ref.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,useCase,flow,normalStep,alternativeFlow,alt);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_216(EMoflonEdge _edge_ref);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_689280 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_265939 = null;\n      ExclusiveGateway __DEC_outFlow_default_265939 = null;\n      Match match = null;\n      Process process = null;\n      SequenceFlow defaultFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getSrc ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         defaultFlow = exclusiveGateway.getDefault ();\n\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // check link flowElements from defaultFlow to process\n         JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n         ));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from defaultFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n         ));\n\n         // check link sourceRef from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_outFlow_flowElements_689280 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n               // check object __DEC_outFlow_flowElements_689280 is really bound\n               JavaSDM.ensure ( __DEC_outFlow_flowElements_689280 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_outFlow_flowElements_689280.getFlowElements().contains(outFlow));\n\n               // check isomorphic binding between objects __DEC_outFlow_flowElements_689280 and process \n               JavaSDM.ensure ( !__DEC_outFlow_flowElements_689280.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link default from outFlow to __DEC_outFlow_default_265939\n               fujaba__Success = false;\n\n               fujaba__IterOutFlowTo__DEC_outFlow_default_265939 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_265939.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_outFlow_default_265939 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_265939.next ();\n\n                     // check object __DEC_outFlow_default_265939 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_default_265939 != null );\n                     // check isomorphic binding between objects __DEC_outFlow_default_265939 and exclusiveGateway \n                     JavaSDM.ensure ( !__DEC_outFlow_default_265939.equals (exclusiveGateway) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_sourceRef is really bound\n            JavaSDM.ensure ( _edge_sourceRef != null );\n            // check object defaultFlow is really bound\n            JavaSDM.ensure ( defaultFlow != null );\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and defaultFlow \n            JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n            // check link default from exclusiveGateway to defaultFlow\n            JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n            ));\n\n            // check link default from exclusiveGateway to outFlow\n            JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n            )));\n\n            // check link flowElements from defaultFlow to process\n            JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n            ));\n\n            // check link flowElements from exclusiveGateway to process\n            JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n            ));\n\n            // check link flowElements from outFlow to process\n            JavaSDM.ensure (process.equals (outFlow.eContainer()\n            ));\n\n            // check link sourceRef from defaultFlow to exclusiveGateway\n            JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n            ));\n\n            // check link sourceRef from outFlow to exclusiveGateway\n            JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n            ));\n\n            // check link src from _edge_sourceRef to outFlow\n            JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n            ));\n\n            // check link trg from _edge_sourceRef to exclusiveGateway\n            JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,defaultFlow,exclusiveGateway,process,outFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_520(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_269672 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_800477 = null;\n      ExclusiveGateway __DEC_outFlow_default_800477 = null;\n      Match match = null;\n      Iterator fujaba__IterExclusiveGatewayTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      SequenceFlow outFlow = null;\n      SequenceFlow defaultFlow = null;\n      Process process = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // bind object\n         defaultFlow = exclusiveGateway.getDefault ();\n\n         // check object defaultFlow is really bound\n         JavaSDM.ensure ( defaultFlow != null );\n\n         // check link flowElements from defaultFlow to process\n         JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n         ));\n\n         // check link sourceRef from defaultFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n         ));\n\n         // bind object\n         _TmpObject = _edge_outgoing.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // check isomorphic binding between objects outFlow and defaultFlow \n         JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link sourceRef from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // iterate to-many link trg from exclusiveGateway to _edge_sourceRef\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayTo_edge_sourceRef.hasNext () )\n         {\n            try\n            {\n               _edge_sourceRef = (EMoflonEdge) fujaba__IterExclusiveGatewayTo_edge_sourceRef.next ();\n\n               // check object _edge_sourceRef is really bound\n               JavaSDM.ensure ( _edge_sourceRef != null );\n               // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n               JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n               // check link src from _edge_sourceRef to outFlow\n               JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_269672 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_269672 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_269672 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_269672.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_269672 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_269672.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_800477\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_800477 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_800477.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_800477 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_800477.next ();\n\n                           // check object __DEC_outFlow_default_800477 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_800477 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_800477 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_800477.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_outgoing is really bound\n                  JavaSDM.ensure ( _edge_outgoing != null );\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object defaultFlow is really bound\n                  JavaSDM.ensure ( defaultFlow != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                  JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                  // check isomorphic binding between objects outFlow and defaultFlow \n                  JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                  // check link default from exclusiveGateway to defaultFlow\n                  JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                  )));\n\n                  // check link flowElements from defaultFlow to process\n                  JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from defaultFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n                  ));\n\n                  // check link sourceRef from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_outgoing to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_outgoing.getSrc ()\n                  ));\n\n                  // check link src from _edge_sourceRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link trg from _edge_outgoing to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                  ));\n\n                  // check link trg from _edge_sourceRef to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,defaultFlow,exclusiveGateway,process,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_521(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_707328 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_21968 = null;\n      ExclusiveGateway __DEC_outFlow_default_21968 = null;\n      Match match = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Iterator fujaba__IterProcessToDefaultFlow = null;\n      SequenceFlow defaultFlow = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to defaultFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToDefaultFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToDefaultFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToDefaultFlow.next ();\n\n               // ensure correct type and really bound of object defaultFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               defaultFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and defaultFlow \n               JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n               // bind object\n               _TmpObject = defaultFlow.getSourceRef ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n               // check link default from exclusiveGateway to defaultFlow\n               JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n               ));\n\n               // check link flowElements from exclusiveGateway to process\n               JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n               ));\n\n               // check link sourceRef from outFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_707328 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_707328 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_707328 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_707328.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_707328 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_707328.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_21968\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_21968 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_21968.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_21968 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_21968.next ();\n\n                           // check object __DEC_outFlow_default_21968 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_21968 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_21968 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_21968.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object defaultFlow is really bound\n                  JavaSDM.ensure ( defaultFlow != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and defaultFlow \n                  JavaSDM.ensure ( !outFlow.equals (defaultFlow) );\n\n                  // check link default from exclusiveGateway to defaultFlow\n                  JavaSDM.ensure (defaultFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (!(outFlow.equals (exclusiveGateway.getDefault ()\n                  )));\n\n                  // check link flowElements from defaultFlow to process\n                  JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link sourceRef from defaultFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n                  ));\n\n                  // check link sourceRef from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link trg from _edge_flowElements to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,defaultFlow,exclusiveGateway,process,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_522(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      AlternativeFlow alternativeFlow = null;\n      AlternativeFlowAlternative alt = null;\n      SequenceFlowToUCFlow outFlowToAlternativeFlow = null;\n      SequenceFlow outFlow = null;\n      SequenceFlowToAlternativeFlowAlternative outFlowToAlt = null;\n      Process process = null;\n      Iterator fujaba__IterUseCaseToProcessToUseCase = null;\n      ProcessToUseCase processToUseCase = null;\n      Iterator fujaba__IterFlowToDefaultFlowToFlow = null;\n      SequenceFlowToUCFlow defaultFlowToFlow = null;\n      SequenceFlow defaultFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      UseCase useCase = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      Iterator fujaba__IterExclusiveGatewayToNormalStepListToExclusiveGatewayToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      Iterator fujaba__IterRuleEntryContainerToExclusiveGatewayToNormalStepList = null;\n      RuleEntryList exclusiveGatewayToNormalStepList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to exclusiveGatewayToNormalStepList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToExclusiveGatewayToNormalStepList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToExclusiveGatewayToNormalStepList.hasNext () )\n         {\n            try\n            {\n               exclusiveGatewayToNormalStepList = (RuleEntryList) fujaba__IterRuleEntryContainerToExclusiveGatewayToNormalStepList.next ();\n\n               // check object exclusiveGatewayToNormalStepList is really bound\n               JavaSDM.ensure ( exclusiveGatewayToNormalStepList != null );\n               // iterate to-many link entryObjects from exclusiveGatewayToNormalStepList to exclusiveGatewayToNormalStep\n               fujaba__Success = false;\n\n               fujaba__IterExclusiveGatewayToNormalStepListToExclusiveGatewayToNormalStep = new ArrayList(exclusiveGatewayToNormalStepList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterExclusiveGatewayToNormalStepListToExclusiveGatewayToNormalStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterExclusiveGatewayToNormalStepListToExclusiveGatewayToNormalStep.next ();\n\n                     // ensure correct type and really bound of object exclusiveGatewayToNormalStep\n                     JavaSDM.ensure ( _TmpObject instanceof FlowNodeToStep );\n                     exclusiveGatewayToNormalStep = (FlowNodeToStep) _TmpObject;\n                     // bind object\n                     _TmpObject = exclusiveGatewayToNormalStep.getTarget ();\n\n                     // ensure correct type and really bound of object normalStep\n                     JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n                     normalStep = (NormalStep) _TmpObject;\n\n                     // bind object\n                     flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                     // check object flow is really bound\n                     JavaSDM.ensure ( flow != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n                     // bind object\n                     useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n                     // check object useCase is really bound\n                     JavaSDM.ensure ( useCase != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n                     // bind object\n                     _TmpObject = exclusiveGatewayToNormalStep.getSource ();\n\n                     // ensure correct type and really bound of object exclusiveGateway\n                     JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n                     exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n                     // bind object\n                     defaultFlow = exclusiveGateway.getDefault ();\n\n                     // check object defaultFlow is really bound\n                     JavaSDM.ensure ( defaultFlow != null );\n\n                     // check link sourceRef from defaultFlow to exclusiveGateway\n                     JavaSDM.ensure (exclusiveGateway.equals (defaultFlow.getSourceRef ()\n                     ));\n\n                     // iterate to-many link target from flow to defaultFlowToFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterFlowToDefaultFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterFlowToDefaultFlowToFlow.hasNext () )\n                     {\n                        try\n                        {\n                           defaultFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToDefaultFlowToFlow.next ();\n\n                           // check object defaultFlowToFlow is really bound\n                           JavaSDM.ensure ( defaultFlowToFlow != null );\n                           // check link source from defaultFlowToFlow to defaultFlow\n                           JavaSDM.ensure (defaultFlow.equals (defaultFlowToFlow.getSource ()\n                           ));\n\n                           // iterate to-many link target from useCase to processToUseCase\n                           fujaba__Success = false;\n\n                           fujaba__IterUseCaseToProcessToUseCase = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,ProcessToUseCase.class,\"target\")).iterator ();\n\n                           while ( fujaba__IterUseCaseToProcessToUseCase.hasNext () )\n                           {\n                              try\n                              {\n                                 processToUseCase = (ProcessToUseCase) fujaba__IterUseCaseToProcessToUseCase.next ();\n\n                                 // check object processToUseCase is really bound\n                                 JavaSDM.ensure ( processToUseCase != null );\n                                 // bind object\n                                 process = processToUseCase.getSource ();\n\n                                 // check object process is really bound\n                                 JavaSDM.ensure ( process != null );\n\n                                 // check link flowElements from defaultFlow to process\n                                 JavaSDM.ensure (process.equals (defaultFlow.eContainer()\n                                 ));\n\n                                 // check link flowElements from exclusiveGateway to process\n                                 JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                                 ));\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,useCase,processToUseCase,defaultFlow,flow,defaultFlowToFlow,normalStep,exclusiveGatewayToNormalStep,alternativeFlow,outFlowToAlternativeFlow,alt,outFlowToAlt,exclusiveGateway,process,outFlow,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object defaultFlow is really bound\n                                       JavaSDM.ensure ( defaultFlow != null );\n                                       // check object defaultFlowToFlow is really bound\n                                       JavaSDM.ensure ( defaultFlowToFlow != null );\n                                       // check object exclusiveGateway is really bound\n                                       JavaSDM.ensure ( exclusiveGateway != null );\n                                       // check object exclusiveGatewayToNormalStep is really bound\n                                       JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object normalStep is really bound\n                                       JavaSDM.ensure ( normalStep != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object processToUseCase is really bound\n                                       JavaSDM.ensure ( processToUseCase != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // check object useCase is really bound\n                                       JavaSDM.ensure ( useCase != null );\n                                       // create object alternativeFlow\n                                       alternativeFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();\n\n                                       // create object alt\n                                       alt = UseCaseDSLFactory.eINSTANCE.createAlternativeFlowAlternative();\n\n                                       // create object outFlowToAlternativeFlow\n                                       outFlowToAlternativeFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // create object outFlow\n                                       outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // create object outFlowToAlt\n                                       outFlowToAlt = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToAlternativeFlowAlternative();\n\n                                       // assign attribute alternativeFlow\n                                       alternativeFlow.setName ((java.lang.String)csp.getAttributeVariable(\"alternativeFlow\",\"name\").getValue());\n                                       // assign attribute alt\n                                       alt.setCondition ((java.lang.String)csp.getAttributeVariable(\"alt\",\"condition\").getValue());\n                                       // assign attribute outFlow\n                                       outFlow.setId ((java.lang.String)csp.getAttributeVariable(\"outFlow\",\"id\").getValue());\n                                       // assign attribute outFlow\n                                       outFlow.setName ((java.lang.String)csp.getAttributeVariable(\"outFlow\",\"name\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       \tuseCase.getFlows().add(alternativeFlow); // add link\n\n\n                                       // create link\n                                       \tnormalStep.getStepAlternative().add(alt); // add link\n\n\n                                       // create link\n                                       ruleResult.getTargetObjects().add(alternativeFlow);\n\n\n                                       // create link\n                                       outFlowToAlternativeFlow.setTarget( alternativeFlow);\n\n\n                                       // create link\n                                       alt.setRef( alternativeFlow);\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToAlternativeFlow,outFlow,\"source\");\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToAlternativeFlow);\n\n\n                                       // create link\n                                       outFlowToAlt.setTarget( alt);\n\n\n                                       // create link\n                                       ruleResult.getTargetObjects().add(alt);\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToAlt,outFlow,\"source\");\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToAlt);\n\n\n                                       // create link\n                                       outFlow.setSourceRef( exclusiveGateway);\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(outFlow);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			FlowNodeToStep exclusiveGatewayToNormalStepDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_outFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(\"outFlow.id\", csp);\r\nVariable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"alternativeFlow.name\", csp);\r\nVariable var_outFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"outFlow.name\", csp);\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", csp);\r\n\r\n// Create constraints\r\nEq_modelgen eq_modelgen = new Eq_modelgen();Eq_modelgen eq_modelgen_0 = new Eq_modelgen();\r\n\r\ncsp.getConstraints().add(eq_modelgen);\r\ncsp.getConstraints().add(eq_modelgen_0);\r\n\r\n// Solve CSP\r\neq_modelgen.setRuleName(\"\");\r\neq_modelgen.solve(var_outFlow_id,var_alternativeFlow_name);\r\neq_modelgen_0.setRuleName(\"\");\r\neq_modelgen_0.solve(var_outFlow_name,var_alt_condition);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"processToUseCase\",processToUseCase);\r\nisApplicableMatch.registerObject(\"defaultFlow\",defaultFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"defaultFlowToFlow\",defaultFlowToFlow);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"exclusiveGatewayToNormalStep\",exclusiveGatewayToNormalStep);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, ProcessToUseCase processToUseCase,
			SequenceFlow defaultFlow, Flow flow,
			SequenceFlowToUCFlow defaultFlowToFlow, NormalStep normalStep,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			AlternativeFlow alternativeFlow,
			SequenceFlowToUCFlow outFlowToAlternativeFlow,
			AlternativeFlowAlternative alt,
			SequenceFlowToAlternativeFlowAlternative outFlowToAlt,
			ExclusiveGateway exclusiveGateway, bpmn2.Process process,
			SequenceFlow outFlow, ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // SeqFlowAfterEGToAltFlowRule
