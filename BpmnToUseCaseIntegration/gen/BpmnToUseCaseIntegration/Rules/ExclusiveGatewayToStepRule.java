/**
 */
package BpmnToUseCaseIntegration.Rules;

import BpmnToUseCaseIntegration.BpmnToUseCaseIntegrationFactory;
import BpmnToUseCaseIntegration.DefinitionsToPackageDeclaration;
import BpmnToUseCaseIntegration.DocumentRootToUseCasesModel;
import BpmnToUseCaseIntegration.EndEventToFlow;
import BpmnToUseCaseIntegration.FlowNodeToStep;
import BpmnToUseCaseIntegration.IntermediateCatchEventToAlternativeFlow;
import BpmnToUseCaseIntegration.LaneToActor;
import BpmnToUseCaseIntegration.ProcessToActor;
import BpmnToUseCaseIntegration.ProcessToUseCase;
import BpmnToUseCaseIntegration.SequenceFlowToAlternativeFlowAlternative;
import BpmnToUseCaseIntegration.SequenceFlowToStep;
import BpmnToUseCaseIntegration.SequenceFlowToUCFlow;
import BpmnToUseCaseIntegration.StartEventToBasicFlow;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.Step;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import bpmn2.Bpmn2Factory;
import bpmn2.Definitions;
import bpmn2.DocumentRoot;
import bpmn2.EndEvent;
import bpmn2.EventBasedGateway;
import bpmn2.ExclusiveGateway;
import bpmn2.FlowElementsContainer;
import bpmn2.IntermediateCatchEvent;
import bpmn2.IntermediateThrowEvent;
import bpmn2.Lane;
import bpmn2.LaneSet;
import bpmn2.ParallelGateway;
import bpmn2.SequenceFlow;
import bpmn2.ServiceTask;
import bpmn2.StartEvent;
import bpmn2.UserTask;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Exclusive Gateway To Step Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see BpmnToUseCaseIntegration.Rules.RulesPackage#getExclusiveGatewayToStepRule()
 * @model
 * @generated
 */
public interface ExclusiveGatewayToStepRule extends AbstractRule,
		ExclusiveGatewayToStepCoreRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __exclusiveGateway_default_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,inFlow,process,exclusiveGateway,outFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_incoming_inFlow\n            __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __exclusiveGateway_default_outFlow\n            __exclusiveGateway_default_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __inFlow_targetRef_exclusiveGateway\n            __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_outFlow\n            __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_exclusiveGateway\n            __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n            // assign attribute __process_flowElements_outFlow\n            __process_flowElements_outFlow.setName (\"flowElements\");\n            // assign attribute __inFlow_targetRef_exclusiveGateway\n            __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n            // assign attribute __exclusiveGateway_incoming_inFlow\n            __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n            // assign attribute __outFlow_sourceRef_exclusiveGateway\n            __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n            // assign attribute __exclusiveGateway_outgoing_outFlow\n            __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n            // assign attribute __exclusiveGateway_default_outFlow\n            __exclusiveGateway_default_outFlow.setName (\"default\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_outgoing_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_incoming_inFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__exclusiveGateway_default_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,exclusiveGateway,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__inFlow_targetRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_outFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,outFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__outFlow_sourceRef_exclusiveGateway,\"toBeTranslatedEdges\");\n\n            // create link\n            __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n            // create link\n            __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n            // create link\n            __process_flowElements_outFlow.setSrc( process);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_default_outFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n            // create link\n            __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n            // create link\n            __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __process_flowElements_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __exclusiveGateway_default_outFlow.setTrg( outFlow);\n\n\n            // create link\n            __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // create object __process_flowElements_inFlow\n            __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __process_flowElements_inFlow\n            __process_flowElements_inFlow.setName (\"flowElements\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,process,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__process_flowElements_inFlow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,inFlow,\"contextNodes\");\n\n            // create link\n            __process_flowElements_inFlow.setTrg( inFlow);\n\n\n            // create link\n            __process_flowElements_inFlow.setSrc( process);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, SequenceFlow inFlow,
			bpmn2.Process process, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      SequenceFlow outFlow = null;\n      Step prevStep = null;\n      Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep normalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge prevStep__next__normalStep = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_outFlow = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge normalStep__actor__actor = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge flow__steps__normalStep = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__source__exclusiveGateway = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToPrevStep\"));\n\n         // ensure correct type and really bound of object inFlowToPrevStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToPrevStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"prevStep\"));\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object normalStep\n         normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object exclusiveGatewayToNormalStep\n         exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // assign attribute normalStep\n         normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n         // assign attribute normalStep\n         normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,outFlow,\"source\");\n\n         // create link\n         exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(prevStep,normalStep,\"next\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(normalStep,actor,\"actor\");\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         flow.getSteps().add(normalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToPrevStep is really bound\n         JavaSDM.ensure ( inFlowToPrevStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object prevStep is really bound\n         JavaSDM.ensure ( prevStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects exclusiveGateway and actor \n         JavaSDM.ensure ( !exclusiveGateway.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and actor \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and actor \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects prevStep and actor \n         JavaSDM.ensure ( !prevStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects prevStep and exclusiveGateway \n         JavaSDM.ensure ( !prevStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGateway \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects prevStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and flow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects prevStep and flow \n         JavaSDM.ensure ( !prevStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !normalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects prevStep and inFlowToPrevStep \n         JavaSDM.ensure ( !prevStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects process and inFlowToPrevStep \n         JavaSDM.ensure ( !process.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects processToActor and inFlowToPrevStep \n         JavaSDM.ensure ( !processToActor.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and prevStep \n         JavaSDM.ensure ( !process.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and prevStep \n         JavaSDM.ensure ( !processToActor.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // create object exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object prevStep__next__normalStep\n         prevStep__next__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_exclusiveGateway\n         __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_default_outFlow\n         __exclusiveGateway_default_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __inFlow_targetRef_exclusiveGateway\n         __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object normalStep__actor__actor\n         normalStep__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __process_flowElements_outFlow\n         __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__normalStep\n         flow__steps__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __exclusiveGateway_incoming_inFlow\n         __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ExclusiveGatewayToStepRule\");\n         // assign attribute prevStep__next__normalStep\n         prevStep__next__normalStep.setName (\"next\");\n         // assign attribute normalStep__actor__actor\n         normalStep__actor__actor.setName (\"actor\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute __process_flowElements_exclusiveGateway\n         __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n         // assign attribute __process_flowElements_outFlow\n         __process_flowElements_outFlow.setName (\"flowElements\");\n         // assign attribute __inFlow_targetRef_exclusiveGateway\n         __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n         // assign attribute __exclusiveGateway_incoming_inFlow\n         __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n         // assign attribute __outFlow_sourceRef_exclusiveGateway\n         __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute __exclusiveGateway_outgoing_outFlow\n         __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n         // assign attribute __exclusiveGateway_default_outFlow\n         __exclusiveGateway_default_outFlow.setName (\"default\");\n         // assign attribute exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setName (\"source\");\n         // assign attribute exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute flow__steps__normalStep\n         flow__steps__normalStep.setName (\"steps\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,prevStep__next__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_default_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__inFlow_targetRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__process_flowElements_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_outgoing_outFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__exclusiveGateway_incoming_inFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__source__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__outFlow_sourceRef_exclusiveGateway,\"translatedEdges\");\n\n         // create link\n         __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n         // create link\n         __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n         // create link\n         prevStep__next__normalStep.setSrc( prevStep);\n\n\n         // create link\n         prevStep__next__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         normalStep__actor__actor.setSrc( normalStep);\n\n\n         // create link\n         flow__steps__normalStep.setTrg( normalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         __process_flowElements_outFlow.setSrc( process);\n\n\n         // create link\n         __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_default_outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         __process_flowElements_outFlow.setTrg( outFlow);\n\n\n         // create link\n         __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __exclusiveGateway_default_outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         flow__steps__normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         normalStep__actor__actor.setTrg( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,inFlow,prevStep,inFlowToPrevStep,normalStep,outFlowToFlow,inFlowToFlow,process,exclusiveGateway,outFlow,exclusiveGatewayToNormalStep,outFlowToNormalStep,flow,actor,processToActor);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      ExclusiveGateway exclusiveGateway = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      EMoflonEdge __exclusiveGateway_incoming_inFlow = null;\n      EMoflonEdge __inFlowToPrevStep_source_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlow_targetRef_exclusiveGateway = null;\n      EMoflonEdge __inFlowToPrevStep_target_prevStep = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __process_flowElements_outFlow = null;\n      EMoflonEdge __process_flowElements_exclusiveGateway = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __exclusiveGateway_outgoing_outFlow = null;\n      EMoflonEdge __outFlow_sourceRef_exclusiveGateway = null;\n      EMoflonEdge __exclusiveGateway_default_outFlow = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      CSP csp = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Step prevStep = null;\n      Iterator fujaba__IterInFlowToInFlowToPrevStep = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ExclusiveGatewayToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"exclusiveGateway\"));\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n         _TmpObject = (match.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"outFlow\"));\n\n         // ensure correct type and really bound of object outFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         outFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // iterate to-many link source from inFlow to inFlowToFlow\n         fujaba__Success = false;\n\n         fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n         while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n         {\n            try\n            {\n               inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n               // check object inFlowToFlow is really bound\n               JavaSDM.ensure ( inFlowToFlow != null );\n               // bind object\n               flow = inFlowToFlow.getTarget ();\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // iterate to-many link source from inFlow to inFlowToPrevStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToInFlowToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToStep.class,\"source\")).iterator ();\n\n               while ( fujaba__IterInFlowToInFlowToPrevStep.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToPrevStep = (SequenceFlowToStep) fujaba__IterInFlowToInFlowToPrevStep.next ();\n\n                     // check object inFlowToPrevStep is really bound\n                     JavaSDM.ensure ( inFlowToPrevStep != null );\n                     // bind object\n                     prevStep = inFlowToPrevStep.getTarget ();\n\n                     // check object prevStep is really bound\n                     JavaSDM.ensure ( prevStep != null );\n\n                     // iterate to-many link source from process to processToActor\n                     fujaba__Success = false;\n\n                     fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterProcessToProcessToActor.hasNext () )\n                     {\n                        try\n                        {\n                           processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                           // check object processToActor is really bound\n                           JavaSDM.ensure ( processToActor != null );\n                           // bind object\n                           actor = processToActor.getTarget ();\n\n                           // check object actor is really bound\n                           JavaSDM.ensure ( actor != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // check object exclusiveGateway is really bound\n                              JavaSDM.ensure ( exclusiveGateway != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object inFlowToPrevStep is really bound\n                              JavaSDM.ensure ( inFlowToPrevStep != null );\n                              // check object outFlow is really bound\n                              JavaSDM.ensure ( outFlow != null );\n                              // check object prevStep is really bound\n                              JavaSDM.ensure ( prevStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToActor is really bound\n                              JavaSDM.ensure ( processToActor != null );\n                              // check isomorphic binding between objects outFlow and inFlow \n                              JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                              // check link default from exclusiveGateway to outFlow\n                              JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                              ));\n\n                              // check link flowElements from exclusiveGateway to process\n                              JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link flowElements from outFlow to process\n                              JavaSDM.ensure (process.equals (outFlow.eContainer()\n                              ));\n\n                              // check link incoming from inFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                              ));\n\n                              // check link outgoing from outFlow to exclusiveGateway\n                              JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from inFlowToPrevStep to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToPrevStep.getSource ()\n                              ));\n\n                              // check link source from processToActor to process\n                              JavaSDM.ensure (process.equals (processToActor.getSource ()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from inFlowToPrevStep to prevStep\n                              JavaSDM.ensure (prevStep.equals (inFlowToPrevStep.getTarget ()\n                              ));\n\n                              // check link target from processToActor to actor\n                              JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                              ));\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_incoming_inFlow\n                              __exclusiveGateway_incoming_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlow_targetRef_exclusiveGateway\n                              __inFlow_targetRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_outFlow\n                              __process_flowElements_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_source_process\n                              __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_outgoing_outFlow\n                              __exclusiveGateway_outgoing_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __outFlow_sourceRef_exclusiveGateway\n                              __outFlow_sourceRef_exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __exclusiveGateway_default_outFlow\n                              __exclusiveGateway_default_outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_target_actor\n                              __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep.setName (\"target\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_exclusiveGateway\n                              __process_flowElements_exclusiveGateway.setName (\"flowElements\");\n                              // assign attribute __process_flowElements_outFlow\n                              __process_flowElements_outFlow.setName (\"flowElements\");\n                              // assign attribute __inFlow_targetRef_exclusiveGateway\n                              __inFlow_targetRef_exclusiveGateway.setName (\"targetRef\");\n                              // assign attribute __exclusiveGateway_incoming_inFlow\n                              __exclusiveGateway_incoming_inFlow.setName (\"incoming\");\n                              // assign attribute __outFlow_sourceRef_exclusiveGateway\n                              __outFlow_sourceRef_exclusiveGateway.setName (\"sourceRef\");\n                              // assign attribute __exclusiveGateway_outgoing_outFlow\n                              __exclusiveGateway_outgoing_outFlow.setName (\"outgoing\");\n                              // assign attribute __exclusiveGateway_default_outFlow\n                              __exclusiveGateway_default_outFlow.setName (\"default\");\n                              // assign attribute __processToActor_source_process\n                              __processToActor_source_process.setName (\"source\");\n                              // assign attribute __processToActor_target_actor\n                              __processToActor_target_actor.setName (\"target\");\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __exclusiveGateway_incoming_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlow_targetRef_exclusiveGateway.setSrc( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(prevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setTrg( prevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setSrc( process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __processToActor_source_process.setTrg( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __inFlow_targetRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_incoming_inFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_outFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __outFlow_sourceRef_exclusiveGateway.setTrg( exclusiveGateway);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(exclusiveGateway);\n\n\n                              // create link\n                              __exclusiveGateway_default_outFlow.setSrc( exclusiveGateway);\n\n\n                              // create link\n                              __process_flowElements_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __exclusiveGateway_outgoing_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __exclusiveGateway_default_outFlow.setTrg( outFlow);\n\n\n                              // create link\n                              __outFlow_sourceRef_exclusiveGateway.setSrc( outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(outFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              __processToActor_target_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                              // create link\n                              __processToActor_target_actor.setSrc( processToActor);\n\n\n                              // create link\n                              __processToActor_source_process.setSrc( processToActor);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_target_prevStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_incoming_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_outgoing_outFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__outFlow_sourceRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlow_targetRef_exclusiveGateway,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__exclusiveGateway_default_outFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,inFlow,prevStep,inFlowToPrevStep,inFlowToFlow,process,exclusiveGateway,outFlow,flow,actor,processToActor));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"ExclusiveGatewayToStepRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"inFlow\", inFlow);\nmatch.registerObject(\"process\", process);\nmatch.registerObject(\"exclusiveGateway\", exclusiveGateway);\nmatch.registerObject(\"outFlow\", outFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, SequenceFlow inFlow,
			bpmn2.Process process, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", true, csp);\r\nvar_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, SequenceFlow inFlow,
			bpmn2.Process process, ExclusiveGateway exclusiveGateway,
			SequenceFlow outFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.id\", true, csp);\r\nvar_exclusiveGateway_id.setValue(exclusiveGateway.getId());\r\nVariable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.name\", true, csp);\r\nvar_exclusiveGateway_name.setValue(exclusiveGateway.getName());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_exclusiveGateway_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_exclusiveGateway_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"prevStep\",prevStep);\r\nisApplicableMatch.registerObject(\"inFlowToPrevStep\",inFlowToPrevStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"exclusiveGateway\",exclusiveGateway);\r\nisApplicableMatch.registerObject(\"outFlow\",outFlow);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step prevStep,
			SequenceFlowToStep inFlowToPrevStep,
			SequenceFlowToUCFlow inFlowToFlow, bpmn2.Process process,
			ExclusiveGateway exclusiveGateway, SequenceFlow outFlow, Flow flow,
			Actor actor, ProcessToActor processToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"prevStep\", prevStep);\nruleresult.registerObject(\"inFlowToPrevStep\", inFlowToPrevStep);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject inFlow,
			EObject prevStep, EObject inFlowToPrevStep, EObject normalStep,
			EObject outFlowToFlow, EObject inFlowToFlow, EObject process,
			EObject exclusiveGateway, EObject outFlow,
			EObject exclusiveGatewayToNormalStep, EObject outFlowToNormalStep,
			EObject flow, EObject actor, EObject processToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"exclusiveGateway\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) && match.getObject(\"outFlow\").eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __prevStep_next_normalStep = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object prevStep is really bound\n         JavaSDM.ensure ( prevStep != null );\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,prevStep,normalStep,flow,actor));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object prevStep is really bound\n            JavaSDM.ensure ( prevStep != null );\n            // check isomorphic binding between objects prevStep and normalStep \n            JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n            // create object __normalStep_actor_actor\n            __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __prevStep_next_normalStep\n            __prevStep_next_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_normalStep\n            __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __prevStep_next_normalStep\n            __prevStep_next_normalStep.setName (\"next\");\n            // assign attribute __normalStep_actor_actor\n            __normalStep_actor_actor.setName (\"actor\");\n            // assign attribute __flow_steps_normalStep\n            __flow_steps_normalStep.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__normalStep_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__prevStep_next_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,normalStep,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_normalStep,\"toBeTranslatedEdges\");\n\n            // create link\n            __prevStep_next_normalStep.setSrc( prevStep);\n\n\n            // create link\n            __prevStep_next_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setTrg( normalStep);\n\n\n            // create link\n            __normalStep_actor_actor.setSrc( normalStep);\n\n\n            // create link\n            __flow_steps_normalStep.setSrc( flow);\n\n\n            // create link\n            __normalStep_actor_actor.setTrg( actor);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object prevStep is really bound\n            JavaSDM.ensure ( prevStep != null );\n            // check isomorphic binding between objects prevStep and normalStep \n            JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,prevStep,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,prevStep,normalStep,flow,actor);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Step prevStep,
			NormalStep normalStep, Flow flow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Flow flow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      NormalStep normalStep = null;\n      Step prevStep = null;\n      Process process = null;\n      ProcessToActor processToActor = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      ExclusiveGateway exclusiveGateway = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      SequenceFlow outFlow = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__target__normalStep = null;\n      EMoflonEdge outFlowToNormalStep__target__normalStep = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge exclusiveGateway__incoming__inFlow = null;\n      EMoflonEdge exclusiveGateway__outgoing__outFlow = null;\n      EMoflonEdge outFlow__sourceRef__exclusiveGateway = null;\n      EMoflonEdge outFlowToFlow__target__flow = null;\n      EMoflonEdge process__flowElements__outFlow = null;\n      EMoflonEdge process__flowElements__exclusiveGateway = null;\n      EMoflonEdge __prevStep_next_normalStep = null;\n      EMoflonEdge inFlow__targetRef__exclusiveGateway = null;\n      EMoflonEdge outFlowToNormalStep__source__outFlow = null;\n      EMoflonEdge exclusiveGatewayToNormalStep__source__exclusiveGateway = null;\n      EMoflonEdge outFlowToFlow__source__outFlow = null;\n      EMoflonEdge exclusiveGateway__default__outFlow = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlow\"));\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToFlow\"));\n\n         // ensure correct type and really bound of object inFlowToFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToUCFlow );\n         inFlowToFlow = (SequenceFlowToUCFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"inFlowToPrevStep\"));\n\n         // ensure correct type and really bound of object inFlowToPrevStep\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n         inFlowToPrevStep = (SequenceFlowToStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"prevStep\"));\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"process\"));\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"processToActor\"));\n\n         // ensure correct type and really bound of object processToActor\n         JavaSDM.ensure ( _TmpObject instanceof ProcessToActor );\n         processToActor = (ProcessToActor) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object exclusiveGateway\n         exclusiveGateway = Bpmn2Factory.eINSTANCE.createExclusiveGateway();\n\n         // create object exclusiveGatewayToNormalStep\n         exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n         // create object outFlowToNormalStep\n         outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n         // create object outFlowToFlow\n         outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n         // create object outFlow\n         outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n         // assign attribute exclusiveGateway\n         exclusiveGateway.setId ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"id\").getValue());\n         // assign attribute exclusiveGateway\n         exclusiveGateway.setName ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"name\").getValue());\n         // assign attribute exclusiveGateway\n         exclusiveGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"exclusiveGateway\",\"gatewayDirection\").getValue());\n\n         // create link\n         outFlowToNormalStep.setSource( outFlow);\n\n\n         // create link\n         exclusiveGateway.getIncoming().add(inFlow);\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         outFlowToNormalStep.setTarget( normalStep);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,outFlow,\"source\");\n\n         // create link\n         \tprocess.getFlowElements().add(exclusiveGateway); // add link\n\n\n         // create link\n         \tprocess.getFlowElements().add(outFlow); // add link\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(exclusiveGateway,outFlow,\"default\");\n\n         // create link\n         outFlow.setSourceRef( exclusiveGateway);\n\n\n         // create link\n         exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,normalStep,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object exclusiveGateway is really bound\n         JavaSDM.ensure ( exclusiveGateway != null );\n         // check object exclusiveGatewayToNormalStep is really bound\n         JavaSDM.ensure ( exclusiveGatewayToNormalStep != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object inFlow is really bound\n         JavaSDM.ensure ( inFlow != null );\n         // check object inFlowToFlow is really bound\n         JavaSDM.ensure ( inFlowToFlow != null );\n         // check object inFlowToPrevStep is really bound\n         JavaSDM.ensure ( inFlowToPrevStep != null );\n         // check object normalStep is really bound\n         JavaSDM.ensure ( normalStep != null );\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n         // check object outFlowToFlow is really bound\n         JavaSDM.ensure ( outFlowToFlow != null );\n         // check object outFlowToNormalStep is really bound\n         JavaSDM.ensure ( outFlowToNormalStep != null );\n         // check object prevStep is really bound\n         JavaSDM.ensure ( prevStep != null );\n         // check object process is really bound\n         JavaSDM.ensure ( process != null );\n         // check object processToActor is really bound\n         JavaSDM.ensure ( processToActor != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects exclusiveGateway and actor \n         JavaSDM.ensure ( !exclusiveGateway.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and actor \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects inFlow and actor \n         JavaSDM.ensure ( !inFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToFlow and actor \n         JavaSDM.ensure ( !inFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and actor \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (actor) );\n\n         // check isomorphic binding between objects normalStep and actor \n         JavaSDM.ensure ( !normalStep.equals (actor) );\n\n         // check isomorphic binding between objects outFlow and actor \n         JavaSDM.ensure ( !outFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToFlow and actor \n         JavaSDM.ensure ( !outFlowToFlow.equals (actor) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and actor \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (actor) );\n\n         // check isomorphic binding between objects prevStep and actor \n         JavaSDM.ensure ( !prevStep.equals (actor) );\n\n         // check isomorphic binding between objects process and actor \n         JavaSDM.ensure ( !process.equals (actor) );\n\n         // check isomorphic binding between objects processToActor and actor \n         JavaSDM.ensure ( !processToActor.equals (actor) );\n\n         // check isomorphic binding between objects exclusiveGatewayToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !exclusiveGatewayToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGateway \n         JavaSDM.ensure ( !flow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and exclusiveGateway \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGateway \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGateway \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects prevStep and exclusiveGateway \n         JavaSDM.ensure ( !prevStep.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects process and exclusiveGateway \n         JavaSDM.ensure ( !process.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGateway \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGateway) );\n\n         // check isomorphic binding between objects flow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !flow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects normalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !normalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects prevStep and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects process and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !process.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and exclusiveGatewayToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (exclusiveGatewayToNormalStep) );\n\n         // check isomorphic binding between objects inFlow and flow \n         JavaSDM.ensure ( !inFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and flow \n         JavaSDM.ensure ( !inFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and flow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (flow) );\n\n         // check isomorphic binding between objects normalStep and flow \n         JavaSDM.ensure ( !normalStep.equals (flow) );\n\n         // check isomorphic binding between objects outFlow and flow \n         JavaSDM.ensure ( !outFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToFlow and flow \n         JavaSDM.ensure ( !outFlowToFlow.equals (flow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and flow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (flow) );\n\n         // check isomorphic binding between objects prevStep and flow \n         JavaSDM.ensure ( !prevStep.equals (flow) );\n\n         // check isomorphic binding between objects process and flow \n         JavaSDM.ensure ( !process.equals (flow) );\n\n         // check isomorphic binding between objects processToActor and flow \n         JavaSDM.ensure ( !processToActor.equals (flow) );\n\n         // check isomorphic binding between objects inFlowToFlow and inFlow \n         JavaSDM.ensure ( !inFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlow) );\n\n         // check isomorphic binding between objects process and inFlow \n         JavaSDM.ensure ( !process.equals (inFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlow) );\n\n         // check isomorphic binding between objects inFlowToPrevStep and inFlowToFlow \n         JavaSDM.ensure ( !inFlowToPrevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToFlow \n         JavaSDM.ensure ( !normalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and inFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects process and inFlowToFlow \n         JavaSDM.ensure ( !process.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and inFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (inFlowToFlow) );\n\n         // check isomorphic binding between objects normalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !normalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and inFlowToPrevStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects prevStep and inFlowToPrevStep \n         JavaSDM.ensure ( !prevStep.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects process and inFlowToPrevStep \n         JavaSDM.ensure ( !process.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects processToActor and inFlowToPrevStep \n         JavaSDM.ensure ( !processToActor.equals (inFlowToPrevStep) );\n\n         // check isomorphic binding between objects outFlow and normalStep \n         JavaSDM.ensure ( !outFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and normalStep \n         JavaSDM.ensure ( !outFlowToFlow.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and normalStep \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (normalStep) );\n\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // check isomorphic binding between objects process and normalStep \n         JavaSDM.ensure ( !process.equals (normalStep) );\n\n         // check isomorphic binding between objects processToActor and normalStep \n         JavaSDM.ensure ( !processToActor.equals (normalStep) );\n\n         // check isomorphic binding between objects outFlowToFlow and outFlow \n         JavaSDM.ensure ( !outFlowToFlow.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlow) );\n\n         // check isomorphic binding between objects process and outFlow \n         JavaSDM.ensure ( !process.equals (outFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlow) );\n\n         // check isomorphic binding between objects outFlowToNormalStep and outFlowToFlow \n         JavaSDM.ensure ( !outFlowToNormalStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToFlow \n         JavaSDM.ensure ( !prevStep.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects process and outFlowToFlow \n         JavaSDM.ensure ( !process.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects processToActor and outFlowToFlow \n         JavaSDM.ensure ( !processToActor.equals (outFlowToFlow) );\n\n         // check isomorphic binding between objects prevStep and outFlowToNormalStep \n         JavaSDM.ensure ( !prevStep.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and outFlowToNormalStep \n         JavaSDM.ensure ( !process.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects processToActor and outFlowToNormalStep \n         JavaSDM.ensure ( !processToActor.equals (outFlowToNormalStep) );\n\n         // check isomorphic binding between objects process and prevStep \n         JavaSDM.ensure ( !process.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and prevStep \n         JavaSDM.ensure ( !processToActor.equals (prevStep) );\n\n         // check isomorphic binding between objects processToActor and process \n         JavaSDM.ensure ( !processToActor.equals (process) );\n\n         // create object exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_normalStep\n         __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__incoming__inFlow\n         exclusiveGateway__incoming__inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__outgoing__outFlow\n         exclusiveGateway__outgoing__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlow__sourceRef__exclusiveGateway\n         outFlow__sourceRef__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__target__flow\n         outFlowToFlow__target__flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__outFlow\n         process__flowElements__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object process__flowElements__exclusiveGateway\n         process__flowElements__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __prevStep_next_normalStep\n         __prevStep_next_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object inFlow__targetRef__exclusiveGateway\n         inFlow__targetRef__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object exclusiveGateway__default__outFlow\n         exclusiveGateway__default__outFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __normalStep_actor_actor\n         __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ExclusiveGatewayToStepRule\");\n         // assign attribute __prevStep_next_normalStep\n         __prevStep_next_normalStep.setName (\"next\");\n         // assign attribute __normalStep_actor_actor\n         __normalStep_actor_actor.setName (\"actor\");\n         // assign attribute outFlowToFlow__source__outFlow\n         outFlowToFlow__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToFlow__target__flow\n         outFlowToFlow__target__flow.setName (\"target\");\n         // assign attribute process__flowElements__exclusiveGateway\n         process__flowElements__exclusiveGateway.setName (\"flowElements\");\n         // assign attribute process__flowElements__outFlow\n         process__flowElements__outFlow.setName (\"flowElements\");\n         // assign attribute inFlow__targetRef__exclusiveGateway\n         inFlow__targetRef__exclusiveGateway.setName (\"targetRef\");\n         // assign attribute exclusiveGateway__incoming__inFlow\n         exclusiveGateway__incoming__inFlow.setName (\"incoming\");\n         // assign attribute outFlow__sourceRef__exclusiveGateway\n         outFlow__sourceRef__exclusiveGateway.setName (\"sourceRef\");\n         // assign attribute exclusiveGateway__outgoing__outFlow\n         exclusiveGateway__outgoing__outFlow.setName (\"outgoing\");\n         // assign attribute exclusiveGateway__default__outFlow\n         exclusiveGateway__default__outFlow.setName (\"default\");\n         // assign attribute exclusiveGatewayToNormalStep__source__exclusiveGateway\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setName (\"source\");\n         // assign attribute exclusiveGatewayToNormalStep__target__normalStep\n         exclusiveGatewayToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute outFlowToNormalStep__source__outFlow\n         outFlowToNormalStep__source__outFlow.setName (\"source\");\n         // assign attribute outFlowToNormalStep__target__normalStep\n         outFlowToNormalStep__target__normalStep.setName (\"target\");\n         // assign attribute __flow_steps_normalStep\n         __flow_steps_normalStep.setName (\"steps\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__target__normalStep,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__incoming__inFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__outgoing__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlow__sourceRef__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__target__flow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,process__flowElements__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__prevStep_next_normalStep,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,inFlow__targetRef__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToNormalStep__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGatewayToNormalStep__source__exclusiveGateway,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,outFlowToFlow__source__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,exclusiveGateway__default__outFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__normalStep_actor_actor,\"translatedEdges\");\n\n         // create link\n         exclusiveGateway__incoming__inFlow.setTrg( inFlow);\n\n\n         // create link\n         inFlow__targetRef__exclusiveGateway.setSrc( inFlow);\n\n\n         // create link\n         __prevStep_next_normalStep.setSrc( prevStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setTrg( normalStep);\n\n\n         // create link\n         __normalStep_actor_actor.setSrc( normalStep);\n\n\n         // create link\n         __prevStep_next_normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setTrg( normalStep);\n\n\n         // create link\n         outFlowToFlow__target__flow.setSrc( outFlowToFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setSrc( outFlowToFlow);\n\n\n         // create link\n         process__flowElements__outFlow.setSrc( process);\n\n\n         // create link\n         process__flowElements__exclusiveGateway.setSrc( process);\n\n\n         // create link\n         inFlow__targetRef__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         exclusiveGateway__incoming__inFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         exclusiveGateway__outgoing__outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         exclusiveGateway__default__outFlow.setSrc( exclusiveGateway);\n\n\n         // create link\n         outFlow__sourceRef__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         process__flowElements__exclusiveGateway.setTrg( exclusiveGateway);\n\n\n         // create link\n         process__flowElements__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGateway__default__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlowToFlow__source__outFlow.setTrg( outFlow);\n\n\n         // create link\n         exclusiveGateway__outgoing__outFlow.setTrg( outFlow);\n\n\n         // create link\n         outFlow__sourceRef__exclusiveGateway.setSrc( outFlow);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__target__normalStep.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         exclusiveGatewayToNormalStep__source__exclusiveGateway.setSrc( exclusiveGatewayToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__target__normalStep.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         outFlowToNormalStep__source__outFlow.setSrc( outFlowToNormalStep);\n\n\n         // create link\n         __flow_steps_normalStep.setSrc( flow);\n\n\n         // create link\n         outFlowToFlow__target__flow.setTrg( flow);\n\n\n         // create link\n         __normalStep_actor_actor.setTrg( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,inFlow,prevStep,inFlowToPrevStep,normalStep,outFlowToFlow,inFlowToFlow,process,exclusiveGateway,outFlow,exclusiveGatewayToNormalStep,outFlowToNormalStep,flow,actor,processToActor);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      Flow flow = null;\n      NormalStep normalStep = null;\n      Step prevStep = null;\n      EMoflonEdge __inFlowToPrevStep_source_inFlow = null;\n      EMoflonEdge __inFlowToFlow_source_inFlow = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __process_flowElements_inFlow = null;\n      EMoflonEdge __inFlowToPrevStep_target_prevStep = null;\n      EMoflonEdge __prevStep_next_normalStep = null;\n      EMoflonEdge __flow_steps_normalStep = null;\n      EMoflonEdge __normalStep_actor_actor = null;\n      EMoflonEdge __inFlowToFlow_target_flow = null;\n      EMoflonEdge __processToActor_source_process = null;\n      EMoflonEdge __processToActor_target_actor = null;\n      CSP csp = null;\n      Process process = null;\n      Iterator fujaba__IterActorToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Iterator fujaba__IterPrevStepToInFlowToPrevStep = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ExclusiveGatewayToStepRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"normalStep\"));\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"prevStep\"));\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // iterate to-many link target from prevStep to inFlowToPrevStep\n         fujaba__Success = false;\n\n         fujaba__IterPrevStepToInFlowToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(prevStep,SequenceFlowToStep.class,\"target\")).iterator ();\n\n         while ( fujaba__IterPrevStepToInFlowToPrevStep.hasNext () )\n         {\n            try\n            {\n               inFlowToPrevStep = (SequenceFlowToStep) fujaba__IterPrevStepToInFlowToPrevStep.next ();\n\n               // check object inFlowToPrevStep is really bound\n               JavaSDM.ensure ( inFlowToPrevStep != null );\n               // iterate to-many link target from flow to inFlowToFlow\n               fujaba__Success = false;\n\n               fujaba__IterFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,SequenceFlowToUCFlow.class,\"target\")).iterator ();\n\n               while ( fujaba__IterFlowToInFlowToFlow.hasNext () )\n               {\n                  try\n                  {\n                     inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterFlowToInFlowToFlow.next ();\n\n                     // check object inFlowToFlow is really bound\n                     JavaSDM.ensure ( inFlowToFlow != null );\n                     // bind object\n                     inFlow = inFlowToFlow.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // check link source from inFlowToPrevStep to inFlow\n                     JavaSDM.ensure (inFlow.equals (inFlowToPrevStep.getSource ()\n                     ));\n\n                     // iterate to-many link target from actor to processToActor\n                     fujaba__Success = false;\n\n                     fujaba__IterActorToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ProcessToActor.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterActorToProcessToActor.hasNext () )\n                     {\n                        try\n                        {\n                           processToActor = (ProcessToActor) fujaba__IterActorToProcessToActor.next ();\n\n                           // check object processToActor is really bound\n                           JavaSDM.ensure ( processToActor != null );\n                           // bind object\n                           process = processToActor.getSource ();\n\n                           // check object process is really bound\n                           JavaSDM.ensure ( process != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object inFlow is really bound\n                              JavaSDM.ensure ( inFlow != null );\n                              // check object inFlowToFlow is really bound\n                              JavaSDM.ensure ( inFlowToFlow != null );\n                              // check object inFlowToPrevStep is really bound\n                              JavaSDM.ensure ( inFlowToPrevStep != null );\n                              // check object normalStep is really bound\n                              JavaSDM.ensure ( normalStep != null );\n                              // check object prevStep is really bound\n                              JavaSDM.ensure ( prevStep != null );\n                              // check object process is really bound\n                              JavaSDM.ensure ( process != null );\n                              // check object processToActor is really bound\n                              JavaSDM.ensure ( processToActor != null );\n                              // check isomorphic binding between objects prevStep and normalStep \n                              JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n                              // check link actor from normalStep to actor\n                              JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                              ));\n\n                              // check link next from prevStep to normalStep\n                              JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n                              ));\n\n                              // check link flowElements from inFlow to process\n                              JavaSDM.ensure (process.equals (inFlow.eContainer()\n                              ));\n\n                              // check link source from inFlowToFlow to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToFlow.getSource ()\n                              ));\n\n                              // check link source from inFlowToPrevStep to inFlow\n                              JavaSDM.ensure (inFlow.equals (inFlowToPrevStep.getSource ()\n                              ));\n\n                              // check link source from processToActor to process\n                              JavaSDM.ensure (process.equals (processToActor.getSource ()\n                              ));\n\n                              // check link steps from normalStep to flow\n                              JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                              ));\n\n                              // check link target from inFlowToFlow to flow\n                              JavaSDM.ensure (flow.equals (inFlowToFlow.getTarget ()\n                              ));\n\n                              // check link target from inFlowToPrevStep to prevStep\n                              JavaSDM.ensure (prevStep.equals (inFlowToPrevStep.getTarget ()\n                              ));\n\n                              // check link target from processToActor to actor\n                              JavaSDM.ensure (actor.equals (processToActor.getTarget ()\n                              ));\n\n                              // create object __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __process_flowElements_inFlow\n                              __process_flowElements_inFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __prevStep_next_normalStep\n                              __prevStep_next_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_normalStep\n                              __flow_steps_normalStep = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __normalStep_actor_actor\n                              __normalStep_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_source_process\n                              __processToActor_source_process = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __processToActor_target_actor\n                              __processToActor_target_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __prevStep_next_normalStep\n                              __prevStep_next_normalStep.setName (\"next\");\n                              // assign attribute __inFlowToPrevStep_source_inFlow\n                              __inFlowToPrevStep_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToPrevStep_target_prevStep\n                              __inFlowToPrevStep_target_prevStep.setName (\"target\");\n                              // assign attribute __normalStep_actor_actor\n                              __normalStep_actor_actor.setName (\"actor\");\n                              // assign attribute __inFlowToFlow_source_inFlow\n                              __inFlowToFlow_source_inFlow.setName (\"source\");\n                              // assign attribute __inFlowToFlow_target_flow\n                              __inFlowToFlow_target_flow.setName (\"target\");\n                              // assign attribute __process_flowElements_inFlow\n                              __process_flowElements_inFlow.setName (\"flowElements\");\n                              // assign attribute __flow_steps_normalStep\n                              __flow_steps_normalStep.setName (\"steps\");\n                              // assign attribute __processToActor_source_process\n                              __processToActor_source_process.setName (\"source\");\n                              // assign attribute __processToActor_target_actor\n                              __processToActor_target_actor.setName (\"target\");\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlow);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setTrg( inFlow);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setTrg( prevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(prevStep);\n\n\n                              // create link\n                              __prevStep_next_normalStep.setSrc( prevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_target_prevStep.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToPrevStep);\n\n\n                              // create link\n                              __inFlowToPrevStep_source_inFlow.setSrc( inFlowToPrevStep);\n\n\n                              // create link\n                              __flow_steps_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              __normalStep_actor_actor.setSrc( normalStep);\n\n\n                              // create link\n                              __prevStep_next_normalStep.setTrg( normalStep);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(normalStep);\n\n\n                              // create link\n                              __inFlowToFlow_source_inFlow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setSrc( inFlowToFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(inFlowToFlow);\n\n\n                              // create link\n                              __processToActor_source_process.setTrg( process);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(process);\n\n\n                              // create link\n                              __process_flowElements_inFlow.setSrc( process);\n\n\n                              // create link\n                              __inFlowToFlow_target_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_normalStep.setSrc( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __normalStep_actor_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __processToActor_target_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(processToActor);\n\n\n                              // create link\n                              __processToActor_source_process.setSrc( processToActor);\n\n\n                              // create link\n                              __processToActor_target_actor.setSrc( processToActor);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_target_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_target_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_target_prevStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__process_flowElements_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__processToActor_source_process,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__prevStep_next_normalStep,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToPrevStep_source_inFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__normalStep_actor_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__inFlowToFlow_source_inFlow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,inFlow,prevStep,inFlowToPrevStep,normalStep,inFlowToFlow,process,flow,actor,processToActor));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"ExclusiveGatewayToStepRule\");\n\n                                    // create link\n                                    isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"prevStep\", prevStep);\nmatch.registerObject(\"normalStep\", normalStep);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"actor\", actor);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Step prevStep,
			NormalStep normalStep, Flow flow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Step prevStep,
			NormalStep normalStep, Flow flow, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", true, csp);\r\nvar_normalStep_name.setValue(normalStep.getName());\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", true, csp);\r\nvar_normalStep_label.setValue(normalStep.getLabel());\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.id\", csp);\r\nVariable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.name\", csp);\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", csp);\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eqGatewayDirection);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_exclusiveGateway_id,var_normalStep_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_exclusiveGateway_name,var_normalStep_label);\r\neqGatewayDirection.setRuleName(\"\");\r\neqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"prevStep\",prevStep);\r\nisApplicableMatch.registerObject(\"inFlowToPrevStep\",inFlowToPrevStep);\r\nisApplicableMatch.registerObject(\"normalStep\",normalStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step prevStep,
			SequenceFlowToStep inFlowToPrevStep, NormalStep normalStep,
			SequenceFlowToUCFlow inFlowToFlow, bpmn2.Process process,
			Flow flow, Actor actor, ProcessToActor processToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"inFlow\", inFlow);\nruleresult.registerObject(\"prevStep\", prevStep);\nruleresult.registerObject(\"inFlowToPrevStep\", inFlowToPrevStep);\nruleresult.registerObject(\"normalStep\", normalStep);\nruleresult.registerObject(\"outFlowToFlow\", outFlowToFlow);\nruleresult.registerObject(\"inFlowToFlow\", inFlowToFlow);\nruleresult.registerObject(\"process\", process);\nruleresult.registerObject(\"exclusiveGateway\", exclusiveGateway);\nruleresult.registerObject(\"outFlow\", outFlow);\nruleresult.registerObject(\"exclusiveGatewayToNormalStep\", exclusiveGatewayToNormalStep);\nruleresult.registerObject(\"outFlowToNormalStep\", outFlowToNormalStep);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"processToActor\", processToActor);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject inFlow,
			EObject prevStep, EObject inFlowToPrevStep, EObject normalStep,
			EObject outFlowToFlow, EObject inFlowToFlow, EObject process,
			EObject exclusiveGateway, EObject outFlow,
			EObject exclusiveGatewayToNormalStep, EObject outFlowToNormalStep,
			EObject flow, EObject actor, EObject processToActor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"normalStep\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_526238 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_580082 = null;\n      Step __DEC_normalStep_next_580082 = null;\n      Match match = null;\n      Flow flow = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Step prevStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_next is really bound\n         JavaSDM.ensure ( _edge_next != null );\n         // bind object\n         _TmpObject = _edge_next.getSrc ();\n\n         // ensure correct type and really bound of object prevStep\n         JavaSDM.ensure ( _TmpObject instanceof Step );\n         prevStep = (Step) _TmpObject;\n\n         // bind object\n         _TmpObject = prevStep.getNext ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // check isomorphic binding between objects prevStep and normalStep \n         JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // check link trg from _edge_next to normalStep\n         JavaSDM.ensure (normalStep.equals (_edge_next.getTrg ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_normalStep_steps_526238 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n               // check object __DEC_normalStep_steps_526238 is really bound\n               JavaSDM.ensure ( __DEC_normalStep_steps_526238 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_normalStep_steps_526238.getSteps().contains(normalStep));\n\n               // check isomorphic binding between objects __DEC_normalStep_steps_526238 and flow \n               JavaSDM.ensure ( !__DEC_normalStep_steps_526238.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link next from normalStep to __DEC_normalStep_next_580082\n               fujaba__Success = false;\n\n               fujaba__IterNormalStepTo__DEC_normalStep_next_580082 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_580082.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_normalStep_next_580082 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_580082.next ();\n\n                     // check object __DEC_normalStep_next_580082 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_next_580082 != null );\n                     // check isomorphic binding between objects __DEC_normalStep_next_580082 and normalStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_580082.equals (normalStep) );\n\n                     // check isomorphic binding between objects __DEC_normalStep_next_580082 and prevStep \n                     JavaSDM.ensure ( !__DEC_normalStep_next_580082.equals (prevStep) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check link next from normalStep to normalStep\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n            .contains (normalStep)));\n\n            // check object _edge_next is really bound\n            JavaSDM.ensure ( _edge_next != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object normalStep is really bound\n            JavaSDM.ensure ( normalStep != null );\n            // check object prevStep is really bound\n            JavaSDM.ensure ( prevStep != null );\n            // check isomorphic binding between objects prevStep and normalStep \n            JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n            // check link actor from normalStep to actor\n            JavaSDM.ensure (actor.equals (normalStep.getActor ()\n            ));\n\n            // check link next from prevStep to normalStep\n            JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n            ));\n\n            // check link src from _edge_next to prevStep\n            JavaSDM.ensure (prevStep.equals (_edge_next.getSrc ()\n            ));\n\n            // check link steps from normalStep to flow\n            JavaSDM.ensure (flow.equals (normalStep.eContainer()\n            ));\n\n            // check link trg from _edge_next to normalStep\n            JavaSDM.ensure (normalStep.equals (_edge_next.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,prevStep,normalStep,flow,actor);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_84(EMoflonEdge _edge_next);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_925078 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_960228 = null;\n      Step __DEC_normalStep_next_960228 = null;\n      Match match = null;\n      Iterator fujaba__IterNormalStepToPrevStep = null;\n      Step prevStep = null;\n      Flow flow = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         flow = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(normalStep));\n\n         // check link trg from _edge_actor to actor\n         JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n         ));\n\n         // iterate to-many link next from normalStep to prevStep\n         fujaba__Success = false;\n\n         fujaba__IterNormalStepToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n         while ( fujaba__IterNormalStepToPrevStep.hasNext () )\n         {\n            try\n            {\n               prevStep = (Step) fujaba__IterNormalStepToPrevStep.next ();\n\n               // check object prevStep is really bound\n               JavaSDM.ensure ( prevStep != null );\n               // check isomorphic binding between objects prevStep and normalStep \n               JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_normalStep_steps_925078 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                     // check object __DEC_normalStep_steps_925078 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_steps_925078 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_normalStep_steps_925078.getSteps().contains(normalStep));\n\n                     // check isomorphic binding between objects __DEC_normalStep_steps_925078 and flow \n                     JavaSDM.ensure ( !__DEC_normalStep_steps_925078.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link next from normalStep to __DEC_normalStep_next_960228\n                     fujaba__Success = false;\n\n                     fujaba__IterNormalStepTo__DEC_normalStep_next_960228 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_960228.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_normalStep_next_960228 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_960228.next ();\n\n                           // check object __DEC_normalStep_next_960228 is really bound\n                           JavaSDM.ensure ( __DEC_normalStep_next_960228 != null );\n                           // check isomorphic binding between objects __DEC_normalStep_next_960228 and normalStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_960228.equals (normalStep) );\n\n                           // check isomorphic binding between objects __DEC_normalStep_next_960228 and prevStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_960228.equals (prevStep) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check object _edge_actor is really bound\n                  JavaSDM.ensure ( _edge_actor != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object prevStep is really bound\n                  JavaSDM.ensure ( prevStep != null );\n                  // check isomorphic binding between objects prevStep and normalStep \n                  JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n                  // check link actor from normalStep to actor\n                  JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                  ));\n\n                  // check link next from prevStep to normalStep\n                  JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n                  ));\n\n                  // check link src from _edge_actor to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_actor.getSrc ()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_actor to actor\n                  JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,prevStep,normalStep,flow,actor);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_85(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_176840 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_33063 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_554108 = null;\n      ExclusiveGateway __DEC_outFlow_default_554108 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_678966 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_678966 = null;\n      Match match = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link incoming from inFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_176840 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_176840 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_176840 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_176840.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_176840 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_176840.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_33063 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_33063 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_33063 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_33063.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_33063 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_33063.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_554108\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_554108 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_554108.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_554108 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_554108.next ();\n\n                           // check object __DEC_outFlow_default_554108 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_554108 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_554108 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_554108.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_678966\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_678966 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_678966.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_678966 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_678966.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_678966 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_678966 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_678966 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_678966.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_678966 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_678966.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link incoming from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link incoming from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link outgoing from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link trg from _edge_flowElements to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_205(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_388168 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_766868 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_104477 = null;\n      ExclusiveGateway __DEC_outFlow_default_104477 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_992778 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_992778 = null;\n      Match match = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Iterator fujaba__IterProcessToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flowElements is really bound\n         JavaSDM.ensure ( _edge_flowElements != null );\n         // bind object\n         _TmpObject = _edge_flowElements.getSrc ();\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // iterate to-many link flowElements from process to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterProcessToInFlow = new ArrayList(process.getFlowElements()).iterator ();\n\n         while ( fujaba__IterProcessToInFlow.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterProcessToInFlow.next ();\n\n               // ensure correct type and really bound of object inFlow\n               JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n               inFlow = (SequenceFlow) _TmpObject;\n               // bind object\n               _TmpObject = inFlow.getTargetRef ();\n\n               // ensure correct type and really bound of object exclusiveGateway\n               JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n               exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n               // bind object\n               outFlow = exclusiveGateway.getDefault ();\n\n               // check object outFlow is really bound\n               JavaSDM.ensure ( outFlow != null );\n\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from exclusiveGateway to process\n               JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n               ));\n\n               // check link flowElements from outFlow to process\n               JavaSDM.ensure (process.equals (outFlow.eContainer()\n               ));\n\n               // check link outgoing from outFlow to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n               ));\n\n               // check link trg from _edge_flowElements to outFlow\n               JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_388168 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_388168 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_388168 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_388168.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_388168 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_388168.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_766868 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_766868 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_766868 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_766868.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_766868 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_766868.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_104477\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_104477 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_104477.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_104477 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_104477.next ();\n\n                           // check object __DEC_outFlow_default_104477 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_104477 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_104477 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_104477.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_992778\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_992778 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_992778.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_992778 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_992778.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_992778 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_992778 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_992778 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_992778.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_992778 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_992778.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flowElements is really bound\n                  JavaSDM.ensure ( _edge_flowElements != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link incoming from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link incoming from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link outgoing from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_flowElements to process\n                  JavaSDM.ensure (process.equals (_edge_flowElements.getSrc ()\n                  ));\n\n                  // check link trg from _edge_flowElements to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_flowElements.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_206(
			EMoflonEdge _edge_flowElements);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_356514 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_513226 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_271538 = null;\n      ExclusiveGateway __DEC_outFlow_default_271538 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_293536 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_293536 = null;\n      Match match = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_targetRef is really bound\n         JavaSDM.ensure ( _edge_targetRef != null );\n         // bind object\n         _TmpObject = _edge_targetRef.getSrc ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // bind object\n         _TmpObject = _edge_targetRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link incoming from inFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_exclusiveGateway_flowElements_356514 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n               // check object __DEC_exclusiveGateway_flowElements_356514 is really bound\n               JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_356514 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_356514.getFlowElements().contains(exclusiveGateway));\n\n               // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_356514 and process \n               JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_356514.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_outFlow_flowElements_513226 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n               // check object __DEC_outFlow_flowElements_513226 is really bound\n               JavaSDM.ensure ( __DEC_outFlow_flowElements_513226 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_outFlow_flowElements_513226.getFlowElements().contains(outFlow));\n\n               // check isomorphic binding between objects __DEC_outFlow_flowElements_513226 and process \n               JavaSDM.ensure ( !__DEC_outFlow_flowElements_513226.equals (process) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link flowNodeRefs from exclusiveGateway\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link default from outFlow to __DEC_outFlow_default_271538\n               fujaba__Success = false;\n\n               fujaba__IterOutFlowTo__DEC_outFlow_default_271538 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_271538.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_outFlow_default_271538 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_271538.next ();\n\n                     // check object __DEC_outFlow_default_271538 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_default_271538 != null );\n                     // check isomorphic binding between objects __DEC_outFlow_default_271538 and exclusiveGateway \n                     JavaSDM.ensure ( !__DEC_outFlow_default_271538.equals (exclusiveGateway) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_293536\n               fujaba__Success = false;\n\n               fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_293536 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_293536.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_exclusiveGateway_targetRef_293536 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_293536.next ();\n\n                     // check object __DEC_exclusiveGateway_targetRef_293536 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_293536 != null );\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_293536 and inFlow \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_293536.equals (inFlow) );\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_293536 and outFlow \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_293536.equals (outFlow) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_targetRef is really bound\n            JavaSDM.ensure ( _edge_targetRef != null );\n            // check object exclusiveGateway is really bound\n            JavaSDM.ensure ( exclusiveGateway != null );\n            // check object inFlow is really bound\n            JavaSDM.ensure ( inFlow != null );\n            // check object outFlow is really bound\n            JavaSDM.ensure ( outFlow != null );\n            // check object process is really bound\n            JavaSDM.ensure ( process != null );\n            // check isomorphic binding between objects outFlow and inFlow \n            JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n            // check link default from exclusiveGateway to outFlow\n            JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n            ));\n\n            // check link flowElements from exclusiveGateway to process\n            JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n            ));\n\n            // check link flowElements from inFlow to process\n            JavaSDM.ensure (process.equals (inFlow.eContainer()\n            ));\n\n            // check link flowElements from outFlow to process\n            JavaSDM.ensure (process.equals (outFlow.eContainer()\n            ));\n\n            // check link incoming from inFlow to exclusiveGateway\n            JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n            ));\n\n            // check link incoming from outFlow to exclusiveGateway\n            JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n            )));\n\n            // check link outgoing from outFlow to exclusiveGateway\n            JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n            ));\n\n            // check link src from _edge_targetRef to inFlow\n            JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n            ));\n\n            // check link trg from _edge_targetRef to exclusiveGateway\n            JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_207(
			EMoflonEdge _edge_targetRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_674805 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_199066 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_967508 = null;\n      ExclusiveGateway __DEC_outFlow_default_967508 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_835263 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_835263 = null;\n      Match match = null;\n      Iterator fujaba__IterInFlowTo_edge_targetRef = null;\n      EMoflonEdge _edge_targetRef = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_incoming is really bound\n         JavaSDM.ensure ( _edge_incoming != null );\n         // bind object\n         _TmpObject = _edge_incoming.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // bind object\n         _TmpObject = _edge_incoming.getTrg ();\n\n         // ensure correct type and really bound of object inFlow\n         JavaSDM.ensure ( _TmpObject instanceof SequenceFlow );\n         inFlow = (SequenceFlow) _TmpObject;\n\n         // check isomorphic binding between objects outFlow and inFlow \n         JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n         // bind object\n         _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n         // check link flowElements from exclusiveGateway to process\n         JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n         ));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link incoming from inFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n         ));\n\n         // iterate to-many link src from inFlow to _edge_targetRef\n         fujaba__Success = false;\n\n         fujaba__IterInFlowTo_edge_targetRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,EMoflonEdge.class,\"src\")).iterator ();\n\n         while ( fujaba__IterInFlowTo_edge_targetRef.hasNext () )\n         {\n            try\n            {\n               _edge_targetRef = (EMoflonEdge) fujaba__IterInFlowTo_edge_targetRef.next ();\n\n               // check object _edge_targetRef is really bound\n               JavaSDM.ensure ( _edge_targetRef != null );\n               // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n               JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n               // check link trg from _edge_targetRef to exclusiveGateway\n               JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_674805 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_674805 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_674805 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_674805.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_674805 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_674805.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_199066 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_199066 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_199066 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_199066.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_199066 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_199066.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_967508\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_967508 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_967508.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_967508 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_967508.next ();\n\n                           // check object __DEC_outFlow_default_967508 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_967508 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_967508 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_967508.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_835263\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_835263 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_835263.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_835263 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_835263.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_835263 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_835263 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_835263 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_835263.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_835263 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_835263.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_incoming is really bound\n                  JavaSDM.ensure ( _edge_incoming != null );\n                  // check object _edge_targetRef is really bound\n                  JavaSDM.ensure ( _edge_targetRef != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects _edge_targetRef and _edge_incoming \n                  JavaSDM.ensure ( !_edge_targetRef.equals (_edge_incoming) );\n\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link incoming from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link incoming from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link outgoing from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_incoming to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_incoming.getSrc ()\n                  ));\n\n                  // check link src from _edge_targetRef to inFlow\n                  JavaSDM.ensure (inFlow.equals (_edge_targetRef.getSrc ()\n                  ));\n\n                  // check link trg from _edge_incoming to inFlow\n                  JavaSDM.ensure (inFlow.equals (_edge_incoming.getTrg ()\n                  ));\n\n                  // check link trg from _edge_targetRef to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_targetRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_208(
			EMoflonEdge _edge_incoming);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_898020 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_516274 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_539030 = null;\n      ExclusiveGateway __DEC_outFlow_default_539030 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_422228 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_422228 = null;\n      Match match = null;\n      Iterator fujaba__IterExclusiveGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sourceRef is really bound\n         JavaSDM.ensure ( _edge_sourceRef != null );\n         // bind object\n         _TmpObject = _edge_sourceRef.getTrg ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // check link src from _edge_sourceRef to outFlow\n         JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n         ));\n\n         // iterate to-many link incoming from exclusiveGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToInFlow = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterExclusiveGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_898020 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_898020 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_898020 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_898020.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_898020 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_898020.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_516274 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_516274 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_516274 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_516274.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_516274 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_516274.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_539030\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_539030 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_539030.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_539030 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_539030.next ();\n\n                           // check object __DEC_outFlow_default_539030 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_539030 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_539030 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_539030.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_422228\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_422228 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_422228.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_422228 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_422228.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_422228 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_422228 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_422228 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_422228.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_422228 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_422228.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_sourceRef is really bound\n                  JavaSDM.ensure ( _edge_sourceRef != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link incoming from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link incoming from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link outgoing from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_sourceRef to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                  ));\n\n                  // check link trg from _edge_sourceRef to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_209(
			EMoflonEdge _edge_sourceRef);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_550398 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_914835 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_786566 = null;\n      ExclusiveGateway __DEC_outFlow_default_786566 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_396923 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_396923 = null;\n      Match match = null;\n      Iterator fujaba__IterExclusiveGatewayTo_edge_sourceRef = null;\n      EMoflonEdge _edge_sourceRef = null;\n      Iterator fujaba__IterExclusiveGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      Process process = null;\n      SequenceFlow outFlow = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_outgoing is really bound\n         JavaSDM.ensure ( _edge_outgoing != null );\n         // bind object\n         _TmpObject = _edge_outgoing.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // check link trg from _edge_outgoing to outFlow\n         JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n         ));\n\n         // iterate to-many link incoming from exclusiveGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToInFlow = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterExclusiveGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // iterate to-many link trg from exclusiveGateway to _edge_sourceRef\n               fujaba__Success = false;\n\n               fujaba__IterExclusiveGatewayTo_edge_sourceRef = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,EMoflonEdge.class,\"trg\")).iterator ();\n\n               while ( fujaba__IterExclusiveGatewayTo_edge_sourceRef.hasNext () )\n               {\n                  try\n                  {\n                     _edge_sourceRef = (EMoflonEdge) fujaba__IterExclusiveGatewayTo_edge_sourceRef.next ();\n\n                     // check object _edge_sourceRef is really bound\n                     JavaSDM.ensure ( _edge_sourceRef != null );\n                     // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                     JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                     // check link src from _edge_sourceRef to outFlow\n                     JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_exclusiveGateway_flowElements_550398 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                           // check object __DEC_exclusiveGateway_flowElements_550398 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_550398 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_550398.getFlowElements().contains(exclusiveGateway));\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_550398 and process \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_550398.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // bind object\n                           __DEC_outFlow_flowElements_914835 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                           // check object __DEC_outFlow_flowElements_914835 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_flowElements_914835 != null );\n\n                           // check if contained via correct reference\n                           JavaSDM.ensure(__DEC_outFlow_flowElements_914835.getFlowElements().contains(outFlow));\n\n                           // check isomorphic binding between objects __DEC_outFlow_flowElements_914835 and process \n                           JavaSDM.ensure ( !__DEC_outFlow_flowElements_914835.equals (process) );\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // negative check for link flowNodeRefs from exclusiveGateway\n                        JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link default from outFlow to __DEC_outFlow_default_786566\n                           fujaba__Success = false;\n\n                           fujaba__IterOutFlowTo__DEC_outFlow_default_786566 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_786566.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_outFlow_default_786566 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_786566.next ();\n\n                                 // check object __DEC_outFlow_default_786566 is really bound\n                                 JavaSDM.ensure ( __DEC_outFlow_default_786566 != null );\n                                 // check isomorphic binding between objects __DEC_outFlow_default_786566 and exclusiveGateway \n                                 JavaSDM.ensure ( !__DEC_outFlow_default_786566.equals (exclusiveGateway) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_396923\n                           fujaba__Success = false;\n\n                           fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_396923 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_396923.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_exclusiveGateway_targetRef_396923 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_396923.next ();\n\n                                 // check object __DEC_exclusiveGateway_targetRef_396923 is really bound\n                                 JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_396923 != null );\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_396923 and inFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_396923.equals (inFlow) );\n\n                                 // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_396923 and outFlow \n                                 JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_396923.equals (outFlow) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_outgoing is really bound\n                        JavaSDM.ensure ( _edge_outgoing != null );\n                        // check object _edge_sourceRef is really bound\n                        JavaSDM.ensure ( _edge_sourceRef != null );\n                        // check object exclusiveGateway is really bound\n                        JavaSDM.ensure ( exclusiveGateway != null );\n                        // check object inFlow is really bound\n                        JavaSDM.ensure ( inFlow != null );\n                        // check object outFlow is really bound\n                        JavaSDM.ensure ( outFlow != null );\n                        // check object process is really bound\n                        JavaSDM.ensure ( process != null );\n                        // check isomorphic binding between objects _edge_sourceRef and _edge_outgoing \n                        JavaSDM.ensure ( !_edge_sourceRef.equals (_edge_outgoing) );\n\n                        // check isomorphic binding between objects outFlow and inFlow \n                        JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                        // check link default from exclusiveGateway to outFlow\n                        JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                        ));\n\n                        // check link flowElements from exclusiveGateway to process\n                        JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                        ));\n\n                        // check link flowElements from inFlow to process\n                        JavaSDM.ensure (process.equals (inFlow.eContainer()\n                        ));\n\n                        // check link flowElements from outFlow to process\n                        JavaSDM.ensure (process.equals (outFlow.eContainer()\n                        ));\n\n                        // check link incoming from inFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                        ));\n\n                        // check link incoming from outFlow to exclusiveGateway\n                        JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                        )));\n\n                        // check link outgoing from outFlow to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                        ));\n\n                        // check link src from _edge_outgoing to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_outgoing.getSrc ()\n                        ));\n\n                        // check link src from _edge_sourceRef to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_sourceRef.getSrc ()\n                        ));\n\n                        // check link trg from _edge_outgoing to outFlow\n                        JavaSDM.ensure (outFlow.equals (_edge_outgoing.getTrg ()\n                        ));\n\n                        // check link trg from _edge_sourceRef to exclusiveGateway\n                        JavaSDM.ensure (exclusiveGateway.equals (_edge_sourceRef.getTrg ()\n                        ));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'\'\n                           fujaba__Success = this.checkTypes_FWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_210(
			EMoflonEdge _edge_outgoing);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      FlowElementsContainer __DEC_exclusiveGateway_flowElements_604415 = null;\n      FlowElementsContainer __DEC_outFlow_flowElements_236560 = null;\n      Iterator fujaba__IterOutFlowTo__DEC_outFlow_default_937288 = null;\n      ExclusiveGateway __DEC_outFlow_default_937288 = null;\n      Iterator fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_987438 = null;\n      SequenceFlow __DEC_exclusiveGateway_targetRef_987438 = null;\n      Match match = null;\n      Iterator fujaba__IterExclusiveGatewayToInFlow = null;\n      SequenceFlow inFlow = null;\n      SequenceFlow outFlow = null;\n      Process process = null;\n      ExclusiveGateway exclusiveGateway = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_default is really bound\n         JavaSDM.ensure ( _edge_default != null );\n         // bind object\n         _TmpObject = _edge_default.getSrc ();\n\n         // ensure correct type and really bound of object exclusiveGateway\n         JavaSDM.ensure ( _TmpObject instanceof ExclusiveGateway );\n         exclusiveGateway = (ExclusiveGateway) _TmpObject;\n\n         // bind object\n         _TmpObject = exclusiveGateway.eContainer() instanceof Process ? (Process) exclusiveGateway.eContainer() : null;\n\n         // ensure correct type and really bound of object process\n         JavaSDM.ensure ( _TmpObject instanceof Process );\n         process = (Process) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(process.getFlowElements().contains(exclusiveGateway));\n\n         // bind object\n         outFlow = exclusiveGateway.getDefault ();\n\n         // check object outFlow is really bound\n         JavaSDM.ensure ( outFlow != null );\n\n         // check link flowElements from outFlow to process\n         JavaSDM.ensure (process.equals (outFlow.eContainer()\n         ));\n\n         // check link outgoing from outFlow to exclusiveGateway\n         JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n         ));\n\n         // check link trg from _edge_default to outFlow\n         JavaSDM.ensure (outFlow.equals (_edge_default.getTrg ()\n         ));\n\n         // iterate to-many link incoming from exclusiveGateway to inFlow\n         fujaba__Success = false;\n\n         fujaba__IterExclusiveGatewayToInFlow = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n         while ( fujaba__IterExclusiveGatewayToInFlow.hasNext () )\n         {\n            try\n            {\n               inFlow = (SequenceFlow) fujaba__IterExclusiveGatewayToInFlow.next ();\n\n               // check object inFlow is really bound\n               JavaSDM.ensure ( inFlow != null );\n               // check isomorphic binding between objects outFlow and inFlow \n               JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n               // check link flowElements from inFlow to process\n               JavaSDM.ensure (process.equals (inFlow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_exclusiveGateway_flowElements_604415 = exclusiveGateway.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) exclusiveGateway.eContainer() : null;\n\n                     // check object __DEC_exclusiveGateway_flowElements_604415 is really bound\n                     JavaSDM.ensure ( __DEC_exclusiveGateway_flowElements_604415 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_exclusiveGateway_flowElements_604415.getFlowElements().contains(exclusiveGateway));\n\n                     // check isomorphic binding between objects __DEC_exclusiveGateway_flowElements_604415 and process \n                     JavaSDM.ensure ( !__DEC_exclusiveGateway_flowElements_604415.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_outFlow_flowElements_236560 = outFlow.eContainer() instanceof FlowElementsContainer ? (FlowElementsContainer) outFlow.eContainer() : null;\n\n                     // check object __DEC_outFlow_flowElements_236560 is really bound\n                     JavaSDM.ensure ( __DEC_outFlow_flowElements_236560 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_outFlow_flowElements_236560.getFlowElements().contains(outFlow));\n\n                     // check isomorphic binding between objects __DEC_outFlow_flowElements_236560 and process \n                     JavaSDM.ensure ( !__DEC_outFlow_flowElements_236560.equals (process) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link flowNodeRefs from exclusiveGateway\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(exclusiveGateway,Lane.class,\"flowNodeRefs\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link default from outFlow to __DEC_outFlow_default_937288\n                     fujaba__Success = false;\n\n                     fujaba__IterOutFlowTo__DEC_outFlow_default_937288 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(outFlow,ExclusiveGateway.class,\"default\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterOutFlowTo__DEC_outFlow_default_937288.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_outFlow_default_937288 = (ExclusiveGateway) fujaba__IterOutFlowTo__DEC_outFlow_default_937288.next ();\n\n                           // check object __DEC_outFlow_default_937288 is really bound\n                           JavaSDM.ensure ( __DEC_outFlow_default_937288 != null );\n                           // check isomorphic binding between objects __DEC_outFlow_default_937288 and exclusiveGateway \n                           JavaSDM.ensure ( !__DEC_outFlow_default_937288.equals (exclusiveGateway) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link incoming from exclusiveGateway to __DEC_exclusiveGateway_targetRef_987438\n                     fujaba__Success = false;\n\n                     fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_987438 = new ArrayList(exclusiveGateway.getIncoming()).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_987438.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_exclusiveGateway_targetRef_987438 = (SequenceFlow) fujaba__IterExclusiveGatewayTo__DEC_exclusiveGateway_targetRef_987438.next ();\n\n                           // check object __DEC_exclusiveGateway_targetRef_987438 is really bound\n                           JavaSDM.ensure ( __DEC_exclusiveGateway_targetRef_987438 != null );\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_987438 and inFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_987438.equals (inFlow) );\n\n                           // check isomorphic binding between objects __DEC_exclusiveGateway_targetRef_987438 and outFlow \n                           JavaSDM.ensure ( !__DEC_exclusiveGateway_targetRef_987438.equals (outFlow) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_default is really bound\n                  JavaSDM.ensure ( _edge_default != null );\n                  // check object exclusiveGateway is really bound\n                  JavaSDM.ensure ( exclusiveGateway != null );\n                  // check object inFlow is really bound\n                  JavaSDM.ensure ( inFlow != null );\n                  // check object outFlow is really bound\n                  JavaSDM.ensure ( outFlow != null );\n                  // check object process is really bound\n                  JavaSDM.ensure ( process != null );\n                  // check isomorphic binding between objects outFlow and inFlow \n                  JavaSDM.ensure ( !outFlow.equals (inFlow) );\n\n                  // check link default from exclusiveGateway to outFlow\n                  JavaSDM.ensure (outFlow.equals (exclusiveGateway.getDefault ()\n                  ));\n\n                  // check link flowElements from exclusiveGateway to process\n                  JavaSDM.ensure (process.equals (exclusiveGateway.eContainer()\n                  ));\n\n                  // check link flowElements from inFlow to process\n                  JavaSDM.ensure (process.equals (inFlow.eContainer()\n                  ));\n\n                  // check link flowElements from outFlow to process\n                  JavaSDM.ensure (process.equals (outFlow.eContainer()\n                  ));\n\n                  // check link incoming from inFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (inFlow.getTargetRef ()\n                  ));\n\n                  // check link incoming from outFlow to exclusiveGateway\n                  JavaSDM.ensure (!(exclusiveGateway.equals (outFlow.getTargetRef ()\n                  )));\n\n                  // check link outgoing from outFlow to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (outFlow.getSourceRef ()\n                  ));\n\n                  // check link src from _edge_default to exclusiveGateway\n                  JavaSDM.ensure (exclusiveGateway.equals (_edge_default.getSrc ()\n                  ));\n\n                  // check link trg from _edge_default to outFlow\n                  JavaSDM.ensure (outFlow.equals (_edge_default.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,inFlow,process,exclusiveGateway,outFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_211(EMoflonEdge _edge_default);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_normalStep_steps_596058 = null;\n      Iterator fujaba__IterNormalStepTo__DEC_normalStep_next_291194 = null;\n      Step __DEC_normalStep_next_291194 = null;\n      Match match = null;\n      Iterator fujaba__IterNormalStepToPrevStep = null;\n      Step prevStep = null;\n      Actor actor = null;\n      NormalStep normalStep = null;\n      Flow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object normalStep\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         normalStep = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = normalStep.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link steps from normalStep to flow\n         JavaSDM.ensure (flow.equals (normalStep.eContainer()\n         ));\n\n         // iterate to-many link next from normalStep to prevStep\n         fujaba__Success = false;\n\n         fujaba__IterNormalStepToPrevStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n         while ( fujaba__IterNormalStepToPrevStep.hasNext () )\n         {\n            try\n            {\n               prevStep = (Step) fujaba__IterNormalStepToPrevStep.next ();\n\n               // check object prevStep is really bound\n               JavaSDM.ensure ( prevStep != null );\n               // check isomorphic binding between objects prevStep and normalStep \n               JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_normalStep_steps_596058 = normalStep.eContainer() instanceof Flow ? (Flow) normalStep.eContainer() : null;\n\n                     // check object __DEC_normalStep_steps_596058 is really bound\n                     JavaSDM.ensure ( __DEC_normalStep_steps_596058 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_normalStep_steps_596058.getSteps().contains(normalStep));\n\n                     // check isomorphic binding between objects __DEC_normalStep_steps_596058 and flow \n                     JavaSDM.ensure ( !__DEC_normalStep_steps_596058.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link next from normalStep to __DEC_normalStep_next_291194\n                     fujaba__Success = false;\n\n                     fujaba__IterNormalStepTo__DEC_normalStep_next_291194 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,Step.class,\"next\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterNormalStepTo__DEC_normalStep_next_291194.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_normalStep_next_291194 = (Step) fujaba__IterNormalStepTo__DEC_normalStep_next_291194.next ();\n\n                           // check object __DEC_normalStep_next_291194 is really bound\n                           JavaSDM.ensure ( __DEC_normalStep_next_291194 != null );\n                           // check isomorphic binding between objects __DEC_normalStep_next_291194 and normalStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_291194.equals (normalStep) );\n\n                           // check isomorphic binding between objects __DEC_normalStep_next_291194 and prevStep \n                           JavaSDM.ensure ( !__DEC_normalStep_next_291194.equals (prevStep) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check link next from normalStep to normalStep\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(normalStep,NormalStep.class,\"next\")\n                  .contains (normalStep)));\n\n                  // check object _edge_steps is really bound\n                  JavaSDM.ensure ( _edge_steps != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object normalStep is really bound\n                  JavaSDM.ensure ( normalStep != null );\n                  // check object prevStep is really bound\n                  JavaSDM.ensure ( prevStep != null );\n                  // check isomorphic binding between objects prevStep and normalStep \n                  JavaSDM.ensure ( !prevStep.equals (normalStep) );\n\n                  // check link actor from normalStep to actor\n                  JavaSDM.ensure (actor.equals (normalStep.getActor ()\n                  ));\n\n                  // check link next from prevStep to normalStep\n                  JavaSDM.ensure (normalStep.equals (prevStep.getNext ()\n                  ));\n\n                  // check link src from _edge_steps to flow\n                  JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n                  ));\n\n                  // check link steps from normalStep to flow\n                  JavaSDM.ensure (flow.equals (normalStep.eContainer()\n                  ));\n\n                  // check link trg from _edge_steps to normalStep\n                  JavaSDM.ensure (normalStep.equals (_edge_steps.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,prevStep,normalStep,flow,actor);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_86(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      ExclusiveGateway exclusiveGateway = null;\n      NormalStep normalStep = null;\n      FlowNodeToStep exclusiveGatewayToNormalStep = null;\n      SequenceFlowToStep outFlowToNormalStep = null;\n      SequenceFlowToUCFlow outFlowToFlow = null;\n      SequenceFlow outFlow = null;\n      Actor actor = null;\n      Iterator fujaba__IterProcessToProcessToActor = null;\n      ProcessToActor processToActor = null;\n      Flow flow = null;\n      Iterator fujaba__IterInFlowToInFlowToFlow = null;\n      SequenceFlowToUCFlow inFlowToFlow = null;\n      Step prevStep = null;\n      Process process = null;\n      SequenceFlow inFlow = null;\n      Iterator fujaba__IterInFlowToPrevStepListToInFlowToPrevStep = null;\n      SequenceFlowToStep inFlowToPrevStep = null;\n      Iterator fujaba__IterRuleEntryContainerToInFlowToPrevStepList = null;\n      RuleEntryList inFlowToPrevStepList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to inFlowToPrevStepList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToInFlowToPrevStepList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToInFlowToPrevStepList.hasNext () )\n         {\n            try\n            {\n               inFlowToPrevStepList = (RuleEntryList) fujaba__IterRuleEntryContainerToInFlowToPrevStepList.next ();\n\n               // check object inFlowToPrevStepList is really bound\n               JavaSDM.ensure ( inFlowToPrevStepList != null );\n               // iterate to-many link entryObjects from inFlowToPrevStepList to inFlowToPrevStep\n               fujaba__Success = false;\n\n               fujaba__IterInFlowToPrevStepListToInFlowToPrevStep = new ArrayList(inFlowToPrevStepList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterInFlowToPrevStepListToInFlowToPrevStep.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInFlowToPrevStepListToInFlowToPrevStep.next ();\n\n                     // ensure correct type and really bound of object inFlowToPrevStep\n                     JavaSDM.ensure ( _TmpObject instanceof SequenceFlowToStep );\n                     inFlowToPrevStep = (SequenceFlowToStep) _TmpObject;\n                     // bind object\n                     inFlow = inFlowToPrevStep.getSource ();\n\n                     // check object inFlow is really bound\n                     JavaSDM.ensure ( inFlow != null );\n\n                     // bind object\n                     _TmpObject = inFlow.eContainer() instanceof Process ? (Process) inFlow.eContainer() : null;\n\n                     // ensure correct type and really bound of object process\n                     JavaSDM.ensure ( _TmpObject instanceof Process );\n                     process = (Process) _TmpObject;\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(process.getFlowElements().contains(inFlow));\n\n                     // bind object\n                     prevStep = inFlowToPrevStep.getTarget ();\n\n                     // check object prevStep is really bound\n                     JavaSDM.ensure ( prevStep != null );\n\n                     // iterate to-many link source from inFlow to inFlowToFlow\n                     fujaba__Success = false;\n\n                     fujaba__IterInFlowToInFlowToFlow = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(inFlow,SequenceFlowToUCFlow.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterInFlowToInFlowToFlow.hasNext () )\n                     {\n                        try\n                        {\n                           inFlowToFlow = (SequenceFlowToUCFlow) fujaba__IterInFlowToInFlowToFlow.next ();\n\n                           // check object inFlowToFlow is really bound\n                           JavaSDM.ensure ( inFlowToFlow != null );\n                           // bind object\n                           flow = inFlowToFlow.getTarget ();\n\n                           // check object flow is really bound\n                           JavaSDM.ensure ( flow != null );\n\n                           // iterate to-many link source from process to processToActor\n                           fujaba__Success = false;\n\n                           fujaba__IterProcessToProcessToActor = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(process,ProcessToActor.class,\"source\")).iterator ();\n\n                           while ( fujaba__IterProcessToProcessToActor.hasNext () )\n                           {\n                              try\n                              {\n                                 processToActor = (ProcessToActor) fujaba__IterProcessToProcessToActor.next ();\n\n                                 // check object processToActor is really bound\n                                 JavaSDM.ensure ( processToActor != null );\n                                 // bind object\n                                 actor = processToActor.getTarget ();\n\n                                 // check object actor is really bound\n                                 JavaSDM.ensure ( actor != null );\n\n                                 // story node \'solve CSP\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,inFlow,prevStep,inFlowToPrevStep,normalStep,outFlowToFlow,inFlowToFlow,process,exclusiveGateway,outFlow,exclusiveGatewayToNormalStep,outFlowToNormalStep,flow,actor,processToActor,ruleResult));\n\n                                    // ensure correct type and really bound of object csp\n                                    JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                    csp = (CSP) _TmpObject;\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n                                 // statement node \'check CSP\'\n                                 fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'perform\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object actor is really bound\n                                       JavaSDM.ensure ( actor != null );\n                                       // check object flow is really bound\n                                       JavaSDM.ensure ( flow != null );\n                                       // check object inFlow is really bound\n                                       JavaSDM.ensure ( inFlow != null );\n                                       // check object inFlowToFlow is really bound\n                                       JavaSDM.ensure ( inFlowToFlow != null );\n                                       // check object inFlowToPrevStep is really bound\n                                       JavaSDM.ensure ( inFlowToPrevStep != null );\n                                       // check object prevStep is really bound\n                                       JavaSDM.ensure ( prevStep != null );\n                                       // check object process is really bound\n                                       JavaSDM.ensure ( process != null );\n                                       // check object processToActor is really bound\n                                       JavaSDM.ensure ( processToActor != null );\n                                       // check object ruleResult is really bound\n                                       JavaSDM.ensure ( ruleResult != null );\n                                       // create object exclusiveGateway\n                                       exclusiveGateway = Bpmn2Factory.eINSTANCE.createExclusiveGateway();\n\n                                       // create object normalStep\n                                       normalStep = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n                                       // create object exclusiveGatewayToNormalStep\n                                       exclusiveGatewayToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createFlowNodeToStep();\n\n                                       // create object outFlowToNormalStep\n                                       outFlowToNormalStep = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToStep();\n\n                                       // create object outFlowToFlow\n                                       outFlowToFlow = BpmnToUseCaseIntegrationFactory.eINSTANCE.createSequenceFlowToUCFlow();\n\n                                       // create object outFlow\n                                       outFlow = Bpmn2Factory.eINSTANCE.createSequenceFlow();\n\n                                       // assign attribute normalStep\n                                       normalStep.setName ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"name\").getValue());\n                                       // assign attribute normalStep\n                                       normalStep.setLabel ((java.lang.String)csp.getAttributeVariable(\"normalStep\",\"label\").getValue());\n                                       // assign attribute exclusiveGateway\n                                       exclusiveGateway.setId ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"id\").getValue());\n                                       // assign attribute exclusiveGateway\n                                       exclusiveGateway.setName ((java.lang.String)csp.getAttributeVariable(\"exclusiveGateway\",\"name\").getValue());\n                                       // assign attribute exclusiveGateway\n                                       exclusiveGateway.setGatewayDirection ((bpmn2.GatewayDirection)csp.getAttributeVariable(\"exclusiveGateway\",\"gatewayDirection\").getValue());\n                                       // assign attribute ruleResult\n                                       ruleResult.setSuccess (true);\n\n                                       // create link\n                                       exclusiveGateway.getIncoming().add(inFlow);\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(prevStep,normalStep,\"next\");\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(normalStep,actor,\"actor\");\n\n                                       // create link\n                                       flow.getSteps().add(normalStep);\n\n\n                                       // create link\n                                       exclusiveGatewayToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       ruleResult.getTargetObjects().add(normalStep);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setTarget( normalStep);\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,outFlow,\"source\");\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(outFlowToFlow,flow,\"target\");\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToFlow);\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(outFlow); // add link\n\n\n                                       // create link\n                                       \tprocess.getFlowElements().add(exclusiveGateway); // add link\n\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(exclusiveGateway,outFlow,\"default\");\n\n                                       // create link\n                                       outFlow.setSourceRef( exclusiveGateway);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(exclusiveGateway);\n\n\n                                       // create link\n                                       exclusiveGatewayToNormalStep.setSource( exclusiveGateway);\n\n\n                                       // create link\n                                       ruleResult.getSourceObjects().add(outFlow);\n\n\n                                       // create link\n                                       outFlowToNormalStep.setSource( outFlow);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(exclusiveGatewayToNormalStep);\n\n\n                                       // create link\n                                       ruleResult.getCorrObjects().add(outFlowToNormalStep);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    return ruleResult;\n\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			SequenceFlowToStep inFlowToPrevStepDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"Diverging\");\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.id\", csp);\r\nVariable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.name\", csp);\r\nVariable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.name\", csp);\r\nVariable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(\"normalStep.label\", csp);\r\nVariable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(\"exclusiveGateway.gatewayDirection\", csp);\r\n\r\n// Create constraints\r\nEq_modelgenGatewayDirection eq_modelgenGatewayDirection = new Eq_modelgenGatewayDirection();Eq_modelgen eq_modelgen = new Eq_modelgen();Eq_modelgen eq_modelgen_0 = new Eq_modelgen();\r\n\r\ncsp.getConstraints().add(eq_modelgenGatewayDirection);\r\ncsp.getConstraints().add(eq_modelgen);\r\ncsp.getConstraints().add(eq_modelgen_0);\r\n\r\n// Solve CSP\r\neq_modelgenGatewayDirection.setRuleName(\"\");\r\neq_modelgenGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);\r\neq_modelgen.setRuleName(\"\");\r\neq_modelgen.solve(var_exclusiveGateway_id,var_normalStep_name);\r\neq_modelgen_0.setRuleName(\"\");\r\neq_modelgen_0.solve(var_exclusiveGateway_name,var_normalStep_label);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"inFlow\",inFlow);\r\nisApplicableMatch.registerObject(\"prevStep\",prevStep);\r\nisApplicableMatch.registerObject(\"inFlowToPrevStep\",inFlowToPrevStep);\r\nisApplicableMatch.registerObject(\"inFlowToFlow\",inFlowToFlow);\r\nisApplicableMatch.registerObject(\"process\",process);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"processToActor\",processToActor);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			SequenceFlow inFlow, Step prevStep,
			SequenceFlowToStep inFlowToPrevStep, NormalStep normalStep,
			SequenceFlowToUCFlow outFlowToFlow,
			SequenceFlowToUCFlow inFlowToFlow, bpmn2.Process process,
			ExclusiveGateway exclusiveGateway, SequenceFlow outFlow,
			FlowNodeToStep exclusiveGatewayToNormalStep,
			SequenceFlowToStep outFlowToNormalStep, Flow flow, Actor actor,
			ProcessToActor processToActor, ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ExclusiveGatewayToStepRule
