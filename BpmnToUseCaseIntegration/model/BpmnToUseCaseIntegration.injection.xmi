<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;documentRoot&quot;, documentRoot);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;documentRoot&quot;,documentRoot);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;documentRoot&quot;, documentRoot);&#xA;ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;docRootToUCModel&quot;, docRootToUCModel);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;documentRoot&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getDocumentRoot());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;documentRoot&quot;, documentRoot);&#xA;ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;docRootToUCModel&quot;, docRootToUCModel);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCasesModel&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCasesModel());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;definitions&quot;, definitions);&#xA;match.registerObject(&quot;documentRoot&quot;, documentRoot);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;http://&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_definitions_targetNamespace = CSPFactoryHelper.eINSTANCE.createVariable(&quot;definitions.targetNamespace&quot;, true, csp);&#xD;&#xA;var_definitions_targetNamespace.setValue(definitions.getTargetNamespace());&#xD;&#xA;var_definitions_targetNamespace.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;packageDeclaration.name&quot;, csp);&#xD;&#xA;var_packageDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_packageDeclaration_name,var_definitions_targetNamespace);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitions&quot;,definitions);&#xD;&#xA;isApplicableMatch.registerObject(&quot;documentRoot&quot;,documentRoot);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;documentRootToUseCasesModel&quot;,documentRootToUseCasesModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;definitions&quot;, definitions);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;definitionsToPackage&quot;, definitionsToPackage);&#xA;ruleresult.registerObject(&quot;documentRoot&quot;, documentRoot);&#xA;ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;documentRootToUseCasesModel&quot;, documentRootToUseCasesModel);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;definitions&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getDefinitions());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;http://&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_packageDeclaration_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;packageDeclaration.name&quot;, true, csp);&#xD;&#xA;var_packageDeclaration_name.setValue(packageDeclaration.getName());&#xD;&#xA;var_packageDeclaration_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_definitions_targetNamespace = CSPFactoryHelper.eINSTANCE.createVariable(&quot;definitions.targetNamespace&quot;, csp);&#xD;&#xA;var_definitions_targetNamespace.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;AddPrefix addPrefix = new AddPrefix();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(addPrefix);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;addPrefix.setRuleName(&quot;&quot;);&#xD;&#xA;addPrefix.solve(literal0,var_packageDeclaration_name,var_definitions_targetNamespace);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;documentRoot&quot;,documentRoot);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesModel&quot;,useCasesModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;documentRootToUseCasesModel&quot;,documentRootToUseCasesModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;definitions&quot;, definitions);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;definitionsToPackage&quot;, definitionsToPackage);&#xA;ruleresult.registerObject(&quot;documentRoot&quot;, documentRoot);&#xA;ruleresult.registerObject(&quot;useCasesModel&quot;, useCasesModel);&#xA;ruleresult.registerObject(&quot;documentRootToUseCasesModel&quot;, documentRootToUseCasesModel);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;packageDeclaration&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getPackageDeclaration());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;definitions&quot;, definitions);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;startEvent&quot;, startEvent);&#xA;match.registerObject(&quot;sequenceFlow&quot;, sequenceFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;sys&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;SYSTEM&quot;);&#xD;&#xA;literal1.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process.id&quot;, true, csp);&#xD;&#xA;var_process_id.setValue(process.getId());&#xD;&#xA;var_process_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_process_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process.name&quot;, true, csp);&#xD;&#xA;var_process_name.setValue(process.getName());&#xD;&#xA;var_process_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_startEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;startEvent.name&quot;, true, csp);&#xD;&#xA;var_startEvent_name.setValue(startEvent.getName());&#xD;&#xA;var_startEvent_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, csp);&#xD;&#xA;var_useCase_description.setType(&quot;&quot;);&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, csp);&#xD;&#xA;var_useCase_preConditions.setType(&quot;&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, csp);&#xD;&#xA;var_actor_type.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();Eq eq_2 = new Eq();EqActorType eqActorType = new EqActorType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;csp.getConstraints().add(eq_2);&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_process_id,var_useCase_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_process_name,var_useCase_description);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_startEvent_name,var_useCase_preConditions);&#xD;&#xA;eq_2.setRuleName(&quot;&quot;);&#xD;&#xA;eq_2.solve(var_actor_name,literal0);&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal1);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitions&quot;,definitions);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitionsToPackage&quot;,definitionsToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;startEvent&quot;,startEvent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sequenceFlow&quot;,sequenceFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;definitions&quot;, definitions);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;definitionsToPackage&quot;, definitionsToPackage);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;startEvent&quot;, startEvent);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;startEventToBasicFlow&quot;, startEventToBasicFlow);&#xA;ruleresult.registerObject(&quot;sequenceFlow&quot;, sequenceFlow);&#xA;ruleresult.registerObject(&quot;sequenceFlowToBasicFlow&quot;, sequenceFlowToBasicFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;process&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getProcess()) &amp;&amp; match.getObject(&quot;startEvent&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getStartEvent()) &amp;&amp; match.getObject(&quot;sequenceFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;sys&quot;);&#xD;&#xA;literal0.setType(&quot;&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;SYSTEM&quot;);&#xD;&#xA;literal1.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();EqActorType eqActorType = new EqActorType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actor_name,literal0);&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, true, csp);&#xD;&#xA;var_useCase_name.setValue(useCase.getName());&#xD;&#xA;var_useCase_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, true, csp);&#xD;&#xA;var_useCase_description.setValue(useCase.getDescription());&#xD;&#xA;var_useCase_description.setType(&quot;&quot;);&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, true, csp);&#xD;&#xA;var_useCase_preConditions.setValue(useCase.getPreConditions());&#xD;&#xA;var_useCase_preConditions.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process.id&quot;, csp);&#xD;&#xA;var_process_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_process_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process.name&quot;, csp);&#xD;&#xA;var_process_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_startEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;startEvent.name&quot;, csp);&#xD;&#xA;var_startEvent_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_process_id,var_useCase_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_process_name,var_useCase_description);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_startEvent_name,var_useCase_preConditions);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitions&quot;,definitions);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitionsToPackage&quot;,definitionsToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;basicFlow&quot;,basicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;definitions&quot;, definitions);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;definitionsToPackage&quot;, definitionsToPackage);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;startEvent&quot;, startEvent);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;startEventToBasicFlow&quot;, startEventToBasicFlow);&#xA;ruleresult.registerObject(&quot;sequenceFlow&quot;, sequenceFlow);&#xA;ruleresult.registerObject(&quot;sequenceFlowToBasicFlow&quot;, sequenceFlowToBasicFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase()) &amp;&amp; match.getObject(&quot;basicFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getBasicFlow()) &amp;&amp; match.getObject(&quot;actor&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;laneSet&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getLaneSet());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;definitions&quot;, definitions);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;PERSON&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_lane_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lane.id&quot;, true, csp);&#xD;&#xA;var_lane_id.setValue(lane.getId());&#xD;&#xA;var_lane_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_lane_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lane.name&quot;, true, csp);&#xD;&#xA;var_lane_name.setValue(lane.getName());&#xD;&#xA;var_lane_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.description&quot;, csp);&#xD;&#xA;var_actor_description.setType(&quot;&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, csp);&#xD;&#xA;var_actor_type.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqActorType eqActorType = new EqActorType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_lane_id,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_lane_name,var_actor_description);&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitions&quot;,definitions);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitionsToPackage&quot;,definitionsToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;definitions&quot;, definitions);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;definitionsToPackage&quot;, definitionsToPackage);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;lane&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getLane());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;PERSON&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.description&quot;, true, csp);&#xD;&#xA;var_actor_description.setValue(actor.getDescription());&#xD;&#xA;var_actor_description.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_lane_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lane.id&quot;, csp);&#xD;&#xA;var_lane_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_lane_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;lane.name&quot;, csp);&#xD;&#xA;var_lane_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_lane_id,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_lane_name,var_actor_description);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitions&quot;,definitions);&#xD;&#xA;isApplicableMatch.registerObject(&quot;packageDeclaration&quot;,packageDeclaration);&#xD;&#xA;isApplicableMatch.registerObject(&quot;definitionsToPackage&quot;,definitionsToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;definitions&quot;, definitions);&#xA;ruleresult.registerObject(&quot;packageDeclaration&quot;, packageDeclaration);&#xA;ruleresult.registerObject(&quot;definitionsToPackage&quot;, definitionsToPackage);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actor&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getServiceTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateThrowEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;endEvent&quot;, endEvent);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_endEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;endEvent.name&quot;, true, csp);&#xD;&#xA;var_endEvent_name.setValue(endEvent.getName());&#xD;&#xA;var_endEvent_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_flow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.finalState&quot;, true, csp);&#xD;&#xA;var_flow_finalState.setValue(flow.getFinalState());&#xD;&#xA;var_flow_finalState.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;SetCheckEqStr setCheckEqStr = new SetCheckEqStr();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(setCheckEqStr);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;setCheckEqStr.setRuleName(&quot;&quot;);&#xD;&#xA;setCheckEqStr.solve(var_endEvent_name,var_flow_finalState);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;endEvent&quot;,endEvent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;endEvent&quot;, endEvent);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;endEventToFlow&quot;, endEventToFlow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;endEvent&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getEndEvent());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.id&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_id.setValue(exclusiveGateway.getId());&#xD;&#xA;var_exclusiveGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.name&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_name.setValue(exclusiveGateway.getName());&#xD;&#xA;var_exclusiveGateway_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_exclusiveGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_exclusiveGateway_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGateway&quot;,exclusiveGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGatewayToNormalStep&quot;, exclusiveGatewayToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;exclusiveGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.id&quot;, csp);&#xD;&#xA;var_exclusiveGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.name&quot;, csp);&#xD;&#xA;var_exclusiveGateway_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.gatewayDirection&quot;, csp);&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_exclusiveGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_exclusiveGateway_name,var_normalStep_label);&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGatewayToNormalStep&quot;, exclusiveGatewayToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateThrowEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.id&quot;, true, csp);&#xD;&#xA;var_parallelGateway_id.setValue(parallelGateway.getId());&#xD;&#xA;var_parallelGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.name&quot;, true, csp);&#xD;&#xA;var_parallelGateway_name.setValue(parallelGateway.getName());&#xD;&#xA;var_parallelGateway_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.name&quot;, csp);&#xD;&#xA;var_parallelStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.label&quot;, csp);&#xD;&#xA;var_parallelStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parallelGateway_id,var_parallelStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_parallelGateway_name,var_parallelStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGateway&quot;,parallelGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;parallelGatewayToParallelStep&quot;, parallelGatewayToParallelStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.name&quot;, true, csp);&#xD;&#xA;var_parallelStep_name.setValue(parallelStep.getName());&#xD;&#xA;var_parallelStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.label&quot;, true, csp);&#xD;&#xA;var_parallelStep_label.setValue(parallelStep.getLabel());&#xD;&#xA;var_parallelStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.id&quot;, csp);&#xD;&#xA;var_parallelGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.name&quot;, csp);&#xD;&#xA;var_parallelGateway_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parallelGateway_id,var_parallelStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_parallelGateway_name,var_parallelStep_label);&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelStep&quot;,parallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;parallelGatewayToParallelStep&quot;, parallelGatewayToParallelStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eventBasedGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.id&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_id.setValue(eventBasedGateway.getId());&#xD;&#xA;var_eventBasedGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.name&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_name.setValue(eventBasedGateway.getName());&#xD;&#xA;var_eventBasedGateway_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eventBasedGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eventBasedGateway_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventBasedGateway&quot;,eventBasedGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;ebgToNormalStep&quot;, ebgToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;eventBasedGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getEventBasedGateway());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eventBasedGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.id&quot;, csp);&#xD;&#xA;var_eventBasedGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.name&quot;, csp);&#xD;&#xA;var_eventBasedGateway_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.gatewayDirection&quot;, csp);&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eventBasedGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eventBasedGateway_name,var_normalStep_label);&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;ebgToNormalStep&quot;, ebgToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal1.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelConvGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelConvGateway_gatewayDirection.setValue(parallelConvGateway.getGatewayDirection());&#xD;&#xA;var_parallelConvGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();EqGatewayDirection eqGatewayDirection_0 = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelConvGateway_gatewayDirection,literal0);&#xD;&#xA;eqGatewayDirection_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection_0.solve(var_parallelGateway_gatewayDirection,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;parallelConvGateway&quot;, parallelConvGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;match.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelConvGateway&quot;,parallelConvGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToStep&quot;,inFlowToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;initFlow&quot;,initFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelStep&quot;,parallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGateway&quot;,parallelGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgwToParallelStep&quot;,pgwToParallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow&quot;,divergeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToFlow&quot;,divergeFlowToFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;parallelConvGateway&quot;, parallelConvGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;inFlowToStep&quot;, inFlowToStep);&#xA;ruleresult.registerObject(&quot;initFlow&quot;, initFlow);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;pcgwToParStep&quot;, pcgwToParStep);&#xA;ruleresult.registerObject(&quot;outFlowToInitFlow&quot;, outFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;outFlowToParallelStep&quot;, outFlowToParallelStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;pgwToParallelStep&quot;, pgwToParallelStep);&#xA;ruleresult.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;ruleresult.registerObject(&quot;divergeFlowToFlow&quot;, divergeFlowToFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelConvGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;match.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_outFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outFlow.id&quot;, true, csp);&#xD;&#xA;var_outFlow_id.setValue(outFlow.getId());&#xD;&#xA;var_outFlow_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_outFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outFlow.name&quot;, true, csp);&#xD;&#xA;var_outFlow_name.setValue(outFlow.getName());&#xD;&#xA;var_outFlow_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alternativeFlow.name&quot;, csp);&#xD;&#xA;var_alternativeFlow_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_outFlow_id,var_alternativeFlow_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_outFlow_name,var_alt_condition);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlow&quot;,defaultFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlowToFlow&quot;,defaultFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGatewayToNormalStep&quot;,exclusiveGatewayToNormalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGateway&quot;,exclusiveGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;defaultFlowToFlow&quot;, defaultFlowToFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;exclusiveGatewayToNormalStep&quot;, exclusiveGatewayToNormalStep);&#xA;ruleresult.registerObject(&quot;alternativeFlow&quot;, alternativeFlow);&#xA;ruleresult.registerObject(&quot;outFlowToAlternativeFlow&quot;, outFlowToAlternativeFlow);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;outFlowToAlt&quot;, outFlowToAlt);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;alternativeFlow&quot;, alternativeFlow);&#xA;match.registerObject(&quot;alt&quot;, alt);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alternativeFlow.name&quot;, true, csp);&#xD;&#xA;var_alternativeFlow_name.setValue(alternativeFlow.getName());&#xD;&#xA;var_alternativeFlow_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_outFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outFlow.id&quot;, csp);&#xD;&#xA;var_outFlow_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_outFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;outFlow.name&quot;, csp);&#xD;&#xA;var_outFlow_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_outFlow_id,var_alternativeFlow_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_outFlow_name,var_alt_condition);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlow&quot;,defaultFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlowToFlow&quot;,defaultFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGatewayToNormalStep&quot;,exclusiveGatewayToNormalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alternativeFlow&quot;,alternativeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGateway&quot;,exclusiveGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;defaultFlowToFlow&quot;, defaultFlowToFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;exclusiveGatewayToNormalStep&quot;, exclusiveGatewayToNormalStep);&#xA;ruleresult.registerObject(&quot;alternativeFlow&quot;, alternativeFlow);&#xA;ruleresult.registerObject(&quot;outFlowToAlternativeFlow&quot;, outFlowToAlternativeFlow);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;outFlowToAlt&quot;, outFlowToAlt);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;alternativeFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow()) &amp;&amp; match.getObject(&quot;alt&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;match.registerObject(&quot;sequenceFlow&quot;, sequenceFlow);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sequenceFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sequenceFlow.id&quot;, true, csp);&#xD;&#xA;var_sequenceFlow_id.setValue(sequenceFlow.getId());&#xD;&#xA;var_sequenceFlow_id.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, csp);&#xD;&#xA;var_parallelFlow_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sequenceFlow_id,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGateway&quot;,parallelGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sequenceFlow&quot;,sequenceFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelStep&quot;,parallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGatewayToParallelStep&quot;,parallelGatewayToParallelStep);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;sequenceFlow&quot;, sequenceFlow);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;parallelGatewayToParallelStep&quot;, parallelGatewayToParallelStep);&#xA;ruleresult.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;ruleresult.registerObject(&quot;sequenceFlowToParallelFlow&quot;, sequenceFlowToParallelFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sequenceFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;match.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, true, csp);&#xD;&#xA;var_parallelFlow_name.setValue(parallelFlow.getName());&#xD;&#xA;var_parallelFlow_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sequenceFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sequenceFlow.id&quot;, csp);&#xD;&#xA;var_sequenceFlow_id.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sequenceFlow_id,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGateway&quot;,parallelGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelStep&quot;,parallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGatewayToParallelStep&quot;,parallelGatewayToParallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelFlow&quot;,parallelFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;sequenceFlow&quot;, sequenceFlow);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;parallelGatewayToParallelStep&quot;, parallelGatewayToParallelStep);&#xA;ruleresult.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;ruleresult.registerObject(&quot;sequenceFlowToParallelFlow&quot;, sequenceFlowToParallelFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;intermediateCatchEvent&quot;, intermediateCatchEvent);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;ceFlow&quot;, ceFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;intermediateCatchEvent.id&quot;, true, csp);&#xD;&#xA;var_intermediateCatchEvent_id.setValue(intermediateCatchEvent.getId());&#xD;&#xA;var_intermediateCatchEvent_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;intermediateCatchEvent.name&quot;, true, csp);&#xD;&#xA;var_intermediateCatchEvent_name.setValue(intermediateCatchEvent.getName());&#xD;&#xA;var_intermediateCatchEvent_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alternativeFlow.name&quot;, csp);&#xD;&#xA;var_alternativeFlow_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_intermediateCatchEvent_name,var_alt_condition);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventBasedGateway&quot;,eventBasedGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;intermediateCatchEvent&quot;,intermediateCatchEvent);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ebgToNormalStep&quot;,ebgToNormalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ceFlow&quot;,ceFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;intermediateCatchEvent&quot;, intermediateCatchEvent);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;ebgToNormalStep&quot;, ebgToNormalStep);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;outFlowToAlt&quot;, outFlowToAlt);&#xA;ruleresult.registerObject(&quot;alternativeFlow&quot;, alternativeFlow);&#xA;ruleresult.registerObject(&quot;iceToAltFlow&quot;, iceToAltFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;ceFlow&quot;, ceFlow);&#xA;ruleresult.registerObject(&quot;ceFlowToAlternativeFlow&quot;, ceFlowToAlternativeFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;intermediateCatchEvent&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;ceFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;alternativeFlow&quot;, alternativeFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_alternativeFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alternativeFlow.name&quot;, true, csp);&#xD;&#xA;var_alternativeFlow_name.setValue(alternativeFlow.getName());&#xD;&#xA;var_alternativeFlow_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_intermediateCatchEvent_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;intermediateCatchEvent.id&quot;, csp);&#xD;&#xA;var_intermediateCatchEvent_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_intermediateCatchEvent_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;intermediateCatchEvent.name&quot;, csp);&#xD;&#xA;var_intermediateCatchEvent_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_intermediateCatchEvent_id,var_alternativeFlow_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_intermediateCatchEvent_name,var_alt_condition);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventBasedGateway&quot;,eventBasedGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToUseCase&quot;,processToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ebgToNormalStep&quot;,ebgToNormalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alternativeFlow&quot;,alternativeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;intermediateCatchEvent&quot;, intermediateCatchEvent);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;processToUseCase&quot;, processToUseCase);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;ebgToNormalStep&quot;, ebgToNormalStep);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;outFlowToAlt&quot;, outFlowToAlt);&#xA;ruleresult.registerObject(&quot;alternativeFlow&quot;, alternativeFlow);&#xA;ruleresult.registerObject(&quot;iceToAltFlow&quot;, iceToAltFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;ceFlow&quot;, ceFlow);&#xA;ruleresult.registerObject(&quot;ceFlowToAlternativeFlow&quot;, ceFlowToAlternativeFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;alt&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative()) &amp;&amp; match.getObject(&quot;alternativeFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.id&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_id.setValue(exclusiveGateway.getId());&#xD;&#xA;var_exclusiveGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.name&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_name.setValue(exclusiveGateway.getName());&#xD;&#xA;var_exclusiveGateway_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_exclusiveGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_exclusiveGateway_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGateway&quot;,exclusiveGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGatewayToNormalStep&quot;, exclusiveGatewayToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;exclusiveGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_exclusiveGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.id&quot;, csp);&#xD;&#xA;var_exclusiveGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_exclusiveGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.name&quot;, csp);&#xD;&#xA;var_exclusiveGateway_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.gatewayDirection&quot;, csp);&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_exclusiveGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_exclusiveGateway_name,var_normalStep_label);&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGatewayToNormalStep&quot;, exclusiveGatewayToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.id&quot;, true, csp);&#xD;&#xA;var_parallelGateway_id.setValue(parallelGateway.getId());&#xD;&#xA;var_parallelGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.name&quot;, true, csp);&#xD;&#xA;var_parallelGateway_name.setValue(parallelGateway.getName());&#xD;&#xA;var_parallelGateway_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.name&quot;, csp);&#xD;&#xA;var_parallelStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.label&quot;, csp);&#xD;&#xA;var_parallelStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parallelGateway_id,var_parallelStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_parallelGateway_name,var_parallelStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToStep&quot;,inFlowToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGateway&quot;,parallelGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;inFlowToStep&quot;, inFlowToStep);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;parallelGatewayToParallelStep&quot;, parallelGatewayToParallelStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.name&quot;, true, csp);&#xD;&#xA;var_parallelStep_name.setValue(parallelStep.getName());&#xD;&#xA;var_parallelStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelStep.label&quot;, true, csp);&#xD;&#xA;var_parallelStep_label.setValue(parallelStep.getLabel());&#xD;&#xA;var_parallelStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.id&quot;, csp);&#xD;&#xA;var_parallelGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.name&quot;, csp);&#xD;&#xA;var_parallelGateway_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_parallelGateway_id,var_parallelStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_parallelGateway_name,var_parallelStep_label);&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelGateway_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToStep&quot;,inFlowToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelStep&quot;,parallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;inFlowToStep&quot;, inFlowToStep);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;parallelGatewayToParallelStep&quot;, parallelGatewayToParallelStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setValue(eventBasedGateway.getGatewayDirection());&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_eventBasedGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.id&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_id.setValue(eventBasedGateway.getId());&#xD;&#xA;var_eventBasedGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.name&quot;, true, csp);&#xD;&#xA;var_eventBasedGateway_name.setValue(eventBasedGateway.getName());&#xD;&#xA;var_eventBasedGateway_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eventBasedGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eventBasedGateway_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventBasedGateway&quot;,eventBasedGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;ebgToNormalStep&quot;, ebgToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;eventBasedGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getEventBasedGateway());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_eventBasedGateway_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.id&quot;, csp);&#xD;&#xA;var_eventBasedGateway_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.name&quot;, csp);&#xD;&#xA;var_eventBasedGateway_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_eventBasedGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;eventBasedGateway.gatewayDirection&quot;, csp);&#xD;&#xA;var_eventBasedGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_eventBasedGateway_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_eventBasedGateway_name,var_normalStep_label);&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_eventBasedGateway_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;eventBasedGateway&quot;, eventBasedGateway);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;ebgToNormalStep&quot;, ebgToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exConvGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exConvGateway_gatewayDirection.setValue(exConvGateway.getGatewayDirection());&#xD;&#xA;var_exConvGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exConvGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;eventGw&quot;, eventGw);&#xA;match.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;match.registerObject(&quot;ice&quot;, ice);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventGw&quot;,eventGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow&quot;,divergeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ice&quot;,ice);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventGwToNormalStep&quot;,eventGwToNormalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToAlt&quot;,divergeFlowToAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;iceToFlow&quot;,iceToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exConvGateway&quot;,exConvGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;initFlow&quot;,initFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;eventGw&quot;, eventGw);&#xA;ruleresult.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;ruleresult.registerObject(&quot;ice&quot;, ice);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventGwToNormalStep&quot;, eventGwToNormalStep);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;divergeFlowToAlt&quot;, divergeFlowToAlt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;iceToFlow&quot;, iceToFlow);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;ruleresult.registerObject(&quot;initFlow&quot;, initFlow);&#xA;ruleresult.registerObject(&quot;outFlowToInitFlow&quot;, outFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;exConvGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;Converging&quot;);&#xD;&#xA;literal1.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_exConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exConvGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exConvGateway_gatewayDirection.setValue(exConvGateway.getGatewayDirection());&#xD;&#xA;var_exConvGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();EqGatewayDirection eqGatewayDirection_0 = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);&#xD;&#xA;eqGatewayDirection_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection_0.solve(var_exConvGateway_gatewayDirection,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;match.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;match.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlow&quot;,defaultFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exConvGateway&quot;,exConvGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToStep&quot;,inFlowToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGateway&quot;,exclusiveGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow&quot;,divergeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;initFlow&quot;,initFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlowToInitFlow&quot;,defaultFlowToInitFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egwToStep&quot;,egwToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToAlt&quot;,divergeFlowToAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToFlow&quot;,divergeFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;ruleresult.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;inFlowToStep&quot;, inFlowToStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;initFlow&quot;, initFlow);&#xA;ruleresult.registerObject(&quot;defaultFlowToInitFlow&quot;, defaultFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;divergeFlowToAlt&quot;, divergeFlowToAlt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;divergeFlowToFlow&quot;, divergeFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;ruleresult.registerObject(&quot;outFlowToInitFlow&quot;, outFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;exConvGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal1.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelConvGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelConvGateway_gatewayDirection.setValue(parallelConvGateway.getGatewayDirection());&#xD;&#xA;var_parallelConvGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_parallelGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_parallelGateway_gatewayDirection.setValue(parallelGateway.getGatewayDirection());&#xD;&#xA;var_parallelGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();EqGatewayDirection eqGatewayDirection_0 = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_parallelConvGateway_gatewayDirection,literal0);&#xD;&#xA;eqGatewayDirection_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection_0.solve(var_parallelGateway_gatewayDirection,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow1&quot;, inFlow1);&#xA;match.registerObject(&quot;parallelConvGateway&quot;, parallelConvGateway);&#xA;match.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;match.registerObject(&quot;divergeFlow1&quot;, divergeFlow1);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow1&quot;,inFlow1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelConvGateway&quot;,parallelConvGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelGateway&quot;,parallelGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow1&quot;,divergeFlow1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow1&quot;,flow1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow1ToFlow1&quot;,inFlow1ToFlow1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step1&quot;,step1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow1ToStep1&quot;,inFlow1ToStep1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelStep&quot;,parallelStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow1ToFlow1&quot;,divergeFlow1ToFlow1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToStep&quot;,inFlowToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;initFlow&quot;,initFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow&quot;,divergeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToFlow&quot;,divergeFlowToFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow1&quot;, inFlow1);&#xA;ruleresult.registerObject(&quot;parallelConvGateway&quot;, parallelConvGateway);&#xA;ruleresult.registerObject(&quot;parallelGateway&quot;, parallelGateway);&#xA;ruleresult.registerObject(&quot;divergeFlow1&quot;, divergeFlow1);&#xA;ruleresult.registerObject(&quot;flow1&quot;, flow1);&#xA;ruleresult.registerObject(&quot;inFlow1ToFlow1&quot;, inFlow1ToFlow1);&#xA;ruleresult.registerObject(&quot;step1&quot;, step1);&#xA;ruleresult.registerObject(&quot;inFlow1ToStep1&quot;, inFlow1ToStep1);&#xA;ruleresult.registerObject(&quot;parallelStep&quot;, parallelStep);&#xA;ruleresult.registerObject(&quot;divergeFlow1ToFlow1&quot;, divergeFlow1ToFlow1);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;inFlowToStep&quot;, inFlowToStep);&#xA;ruleresult.registerObject(&quot;initFlow&quot;, initFlow);&#xA;ruleresult.registerObject(&quot;outFlowToInitFlow&quot;, outFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;outFlowToParallelStep&quot;, outFlowToParallelStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;ruleresult.registerObject(&quot;divergeFlowToFlow&quot;, divergeFlowToFlow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelConvGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal1&quot;, true, csp);&#xD;&#xA;literal1.setValue(&quot;Converging&quot;);&#xD;&#xA;literal1.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exclusiveGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exclusiveGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setValue(exclusiveGateway.getGatewayDirection());&#xD;&#xA;var_exclusiveGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_exConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exConvGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exConvGateway_gatewayDirection.setValue(exConvGateway.getGatewayDirection());&#xD;&#xA;var_exConvGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();EqGatewayDirection eqGatewayDirection_0 = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exclusiveGateway_gatewayDirection,literal0);&#xD;&#xA;eqGatewayDirection_0.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection_0.solve(var_exConvGateway_gatewayDirection,literal1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;match.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;match.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;match.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToStep&quot;,inFlowToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlow&quot;,defaultFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exclusiveGateway&quot;,exclusiveGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow&quot;,divergeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;initFlow&quot;,initFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;defaultFlowToInitFlow&quot;,defaultFlowToInitFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egwToStep&quot;,egwToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToAlt&quot;,divergeFlowToAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToFlow&quot;,divergeFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exConvGateway&quot;,exConvGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;inFlowToStep&quot;, inFlowToStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;defaultFlow&quot;, defaultFlow);&#xA;ruleresult.registerObject(&quot;exclusiveGateway&quot;, exclusiveGateway);&#xA;ruleresult.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;initFlow&quot;, initFlow);&#xA;ruleresult.registerObject(&quot;defaultFlowToInitFlow&quot;, defaultFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;divergeFlowToAlt&quot;, divergeFlowToAlt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;divergeFlowToFlow&quot;, divergeFlowToFlow);&#xA;ruleresult.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;ruleresult.registerObject(&quot;outFlowToInitFlow&quot;, outFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;exConvGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_exConvGateway_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;exConvGateway.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_exConvGateway_gatewayDirection.setValue(exConvGateway.getGatewayDirection());&#xD;&#xA;var_exConvGateway_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_exConvGateway_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ice&quot;, ice);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;eventGw&quot;, eventGw);&#xA;match.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;match.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ice&quot;,ice);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventGw&quot;,eventGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlow&quot;,divergeFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eventGwToNormalStep&quot;,eventGwToNormalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;divergeFlowToAlt&quot;,divergeFlowToAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;iceToFlow&quot;,iceToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;exConvGateway&quot;,exConvGateway);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;initFlow&quot;,initFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ice&quot;, ice);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;eventGw&quot;, eventGw);&#xA;ruleresult.registerObject(&quot;divergeFlow&quot;, divergeFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventGwToNormalStep&quot;, eventGwToNormalStep);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;divergeFlowToAlt&quot;, divergeFlowToAlt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;iceToFlow&quot;, iceToFlow);&#xA;ruleresult.registerObject(&quot;exConvGateway&quot;, exConvGateway);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;ruleresult.registerObject(&quot;initFlow&quot;, initFlow);&#xA;ruleresult.registerObject(&quot;outFlowToInitFlow&quot;, outFlowToInitFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;exConvGateway&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;nextStep&quot;, nextStep);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_excConvGw_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;excConvGw.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_excConvGw_gatewayDirection.setValue(excConvGw.getGatewayDirection());&#xD;&#xA;var_excConvGw_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_excConvGw_gatewayDirection,literal0);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;excConvGw&quot;,excConvGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nextNode&quot;,nextNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;excConvGwToStep&quot;,excConvGwToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nextStep&quot;,nextStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nextNodeToNextStep&quot;,nextNodeToNextStep);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;excConvGw&quot;, excConvGw);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;nextNode&quot;, nextNode);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;excConvGwToStep&quot;, excConvGwToStep);&#xA;ruleresult.registerObject(&quot;nextStep&quot;, nextStep);&#xA;ruleresult.registerObject(&quot;nextNodeToNextStep&quot;, nextNodeToNextStep);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, true, csp);&#xD;&#xA;var_event_name.setValue(event.getName());&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getIntermediateCatchEvent()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Converging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_event_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.name&quot;, csp);&#xD;&#xA;var_event_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_event_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToPrevStep&quot;,inFlowToPrevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;inFlowToPrevStep&quot;, inFlowToPrevStep);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;eventToNormalStep&quot;, eventToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getServiceTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getServiceTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getServiceTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;iceInFlow&quot;, iceInFlow);&#xA;match.registerObject(&quot;evGw&quot;, evGw);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;iceInFlow&quot;,iceInFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;evGw&quot;,evGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;iceInFlow&quot;, iceInFlow);&#xA;ruleresult.registerObject(&quot;evGw&quot;, evGw);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getServiceTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;iceInFlow&quot;,iceInFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;evGw&quot;,evGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;processToActor&quot;,processToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;iceInFlow&quot;, iceInFlow);&#xA;ruleresult.registerObject(&quot;evGw&quot;, evGw);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;processToActor&quot;, processToActor);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;Diverging&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowNode_gatewayDirection = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowNode.gatewayDirection&quot;, true, csp);&#xD;&#xA;var_flowNode_gatewayDirection.setValue(flowNode.getGatewayDirection());&#xD;&#xA;var_flowNode_gatewayDirection.setType(&quot;EObject&quot;);&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqGatewayDirection eqGatewayDirection = new EqGatewayDirection();Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqGatewayDirection);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqGatewayDirection.setRuleName(&quot;&quot;);&#xD;&#xA;eqGatewayDirection.solve(var_flowNode_gatewayDirection,literal0);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;iceInFlow&quot;, iceInFlow);&#xA;match.registerObject(&quot;evGw&quot;, evGw);&#xA;match.registerObject(&quot;lane&quot;, lane);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;outFlow&quot;, outFlow);&#xA;match.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, true, csp);&#xD;&#xA;var_task_name.setValue(task.getName());&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, csp);&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, csp);&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;iceInFlow&quot;,iceInFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;evGw&quot;,evGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;outFlow&quot;,outFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;iceInFlow&quot;, iceInFlow);&#xA;ruleresult.registerObject(&quot;evGw&quot;, evGw);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getUserTask()) &amp;&amp; match.getObject(&quot;outFlow&quot;).eClass().equals(bpmn2.Bpmn2Package.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;normalStep&quot;, normalStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_normalStep_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.name&quot;, true, csp);&#xD;&#xA;var_normalStep_name.setValue(normalStep.getName());&#xD;&#xA;var_normalStep_name.setType(&quot;&quot;);&#xD;&#xA;Variable var_normalStep_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;normalStep.label&quot;, true, csp);&#xD;&#xA;var_normalStep_label.setValue(normalStep.getLabel());&#xD;&#xA;var_normalStep_label.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create explicit parameters&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;&quot;);&#xD;&#xA;Variable var_task_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.name&quot;, csp);&#xD;&#xA;var_task_name.setType(&quot;&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_normalStep_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_name,var_normalStep_label);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;iceInFlow&quot;,iceInFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;evGw&quot;,evGw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lane&quot;,lane);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneToActor&quot;,laneToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;normalStep&quot;,normalStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlowToFlow&quot;,inFlowToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;laneSet&quot;,laneSet);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;iceInFlow&quot;, iceInFlow);&#xA;ruleresult.registerObject(&quot;evGw&quot;, evGw);&#xA;ruleresult.registerObject(&quot;lane&quot;, lane);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;laneToActor&quot;, laneToActor);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;outFlow&quot;, outFlow);&#xA;ruleresult.registerObject(&quot;normalStep&quot;, normalStep);&#xA;ruleresult.registerObject(&quot;taskToNormalStep&quot;, taskToNormalStep);&#xA;ruleresult.registerObject(&quot;outFlowToFlow&quot;, outFlowToFlow);&#xA;ruleresult.registerObject(&quot;outFlowToNormalStep&quot;, outFlowToNormalStep);&#xA;ruleresult.registerObject(&quot;inFlowToFlow&quot;, inFlowToFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;laneSet&quot;, laneSet);&#xA;">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;normalStep&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/BpModelToUseCaseModelRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/DefinitionsToPackageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ProcessToUseCaseRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneSetRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneToActorRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ITEToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EndEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/FirstInterThrowEventToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepCoreRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterEGToAltFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/SeqFlowAfterPGToParallelFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/CatchEventAfterEBGToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExclusiveGatewayToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelGatewayToParallelStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/EventBasedGatewayToStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/LaneStartEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterEventGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwDefaultSeqFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ParallelConvergingGatewayTwoInputsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExcConvGwAfterExDivGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ExConvGwAfterEventGwIceSeqFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ContinuationRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterTaskRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterEventRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterExConvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ICEToStepAfterPConvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/ServiceTaskToStepAfterEvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterSERule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterExGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterPGRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/BpmnToUseCaseIntegration/model/BpmnToUseCaseIntegration.ecore#//Rules/UserTaskToStepAfterEvGwRule"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
