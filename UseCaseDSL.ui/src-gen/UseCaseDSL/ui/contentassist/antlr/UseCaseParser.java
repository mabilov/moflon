/*
* generated by Xtext
*/
package UseCaseDSL.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import UseCaseDSL.services.UseCaseGrammarAccess;

public class UseCaseParser extends AbstractContentAssistParser {
	
	@Inject
	private UseCaseGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected UseCaseDSL.ui.contentassist.antlr.internal.InternalUseCaseParser createParser() {
		UseCaseDSL.ui.contentassist.antlr.internal.InternalUseCaseParser result = new UseCaseDSL.ui.contentassist.antlr.internal.InternalUseCaseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
					put(grammarAccess.getFlowAccess().getAlternatives(), "rule__Flow__Alternatives");
					put(grammarAccess.getNamedFlowAccess().getAlternatives(), "rule__NamedFlow__Alternatives");
					put(grammarAccess.getStepAlternativeAccess().getAlternatives(), "rule__StepAlternative__Alternatives");
					put(grammarAccess.getLocalAlternativeAccess().getAlternatives_3(), "rule__LocalAlternative__Alternatives_3");
					put(grammarAccess.getNormalStepAccess().getAlternatives_6(), "rule__NormalStep__Alternatives_6");
					put(grammarAccess.getActorTypeAccess().getAlternatives(), "rule__ActorType__Alternatives");
					put(grammarAccess.getCustomStepTypeAccess().getAlternatives(), "rule__CustomStepType__Alternatives");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getGroup_3(), "rule__PackageDeclaration__Group_3__0");
					put(grammarAccess.getUseCaseAccess().getGroup(), "rule__UseCase__Group__0");
					put(grammarAccess.getUseCaseAccess().getGroup_3(), "rule__UseCase__Group_3__0");
					put(grammarAccess.getUseCaseAccess().getGroup_4_0(), "rule__UseCase__Group_4_0__0");
					put(grammarAccess.getUseCaseAccess().getGroup_4_1(), "rule__UseCase__Group_4_1__0");
					put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
					put(grammarAccess.getActorAccess().getGroup_4(), "rule__Actor__Group_4__0");
					put(grammarAccess.getBasicFlowAccess().getGroup(), "rule__BasicFlow__Group__0");
					put(grammarAccess.getBasicFlowAccess().getGroup_4(), "rule__BasicFlow__Group_4__0");
					put(grammarAccess.getExceptionFlowAccess().getGroup(), "rule__ExceptionFlow__Group__0");
					put(grammarAccess.getExceptionFlowAccess().getGroup_7(), "rule__ExceptionFlow__Group_7__0");
					put(grammarAccess.getAlternativeFlowAccess().getGroup(), "rule__AlternativeFlow__Group__0");
					put(grammarAccess.getAlternativeFlowAccess().getGroup_4(), "rule__AlternativeFlow__Group_4__0");
					put(grammarAccess.getParallelFlowAccess().getGroup(), "rule__ParallelFlow__Group__0");
					put(grammarAccess.getParallelFlowAccess().getGroup_4(), "rule__ParallelFlow__Group_4__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getConditionAccess().getGroup_3(), "rule__Condition__Group_3__0");
					put(grammarAccess.getLocalAlternativeAccess().getGroup(), "rule__LocalAlternative__Group__0");
					put(grammarAccess.getLocalAlternativeAccess().getGroup_3_1(), "rule__LocalAlternative__Group_3_1__0");
					put(grammarAccess.getLocalAlternativeAccess().getGroup_4(), "rule__LocalAlternative__Group_4__0");
					put(grammarAccess.getAlternativeFlowAlternativeAccess().getGroup(), "rule__AlternativeFlowAlternative__Group__0");
					put(grammarAccess.getAlternativeFlowAlternativeAccess().getGroup_5(), "rule__AlternativeFlowAlternative__Group_5__0");
					put(grammarAccess.getParallelStepAccess().getGroup(), "rule__ParallelStep__Group__0");
					put(grammarAccess.getParallelStepAccess().getGroup_4(), "rule__ParallelStep__Group_4__0");
					put(grammarAccess.getNormalStepAccess().getGroup(), "rule__NormalStep__Group__0");
					put(grammarAccess.getNormalStepAccess().getGroup_5(), "rule__NormalStep__Group_5__0");
					put(grammarAccess.getNormalStepAccess().getGroup_6_0(), "rule__NormalStep__Group_6_0__0");
					put(grammarAccess.getNormalStepAccess().getGroup_6_1(), "rule__NormalStep__Group_6_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getUseCasesModelAccess().getPackagesAssignment(), "rule__UseCasesModel__PackagesAssignment");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1(), "rule__PackageDeclaration__NameAssignment_1");
					put(grammarAccess.getPackageDeclarationAccess().getDescriptionAssignment_2(), "rule__PackageDeclaration__DescriptionAssignment_2");
					put(grammarAccess.getPackageDeclarationAccess().getActorsAssignment_3_1(), "rule__PackageDeclaration__ActorsAssignment_3_1");
					put(grammarAccess.getPackageDeclarationAccess().getUseCasesAssignment_4(), "rule__PackageDeclaration__UseCasesAssignment_4");
					put(grammarAccess.getUseCaseAccess().getNameAssignment_1(), "rule__UseCase__NameAssignment_1");
					put(grammarAccess.getUseCaseAccess().getDescriptionAssignment_2(), "rule__UseCase__DescriptionAssignment_2");
					put(grammarAccess.getUseCaseAccess().getSuperCaseAssignment_3_1(), "rule__UseCase__SuperCaseAssignment_3_1");
					put(grammarAccess.getUseCaseAccess().getPreConditionsAssignment_4_0_1(), "rule__UseCase__PreConditionsAssignment_4_0_1");
					put(grammarAccess.getUseCaseAccess().getPostconditionAssignment_4_1_1(), "rule__UseCase__PostconditionAssignment_4_1_1");
					put(grammarAccess.getUseCaseAccess().getFlowsAssignment_5(), "rule__UseCase__FlowsAssignment_5");
					put(grammarAccess.getActorAccess().getNameAssignment_0(), "rule__Actor__NameAssignment_0");
					put(grammarAccess.getActorAccess().getTypeAssignment_2(), "rule__Actor__TypeAssignment_2");
					put(grammarAccess.getActorAccess().getDescriptionAssignment_3(), "rule__Actor__DescriptionAssignment_3");
					put(grammarAccess.getActorAccess().getExtendsAssignment_4_1(), "rule__Actor__ExtendsAssignment_4_1");
					put(grammarAccess.getBasicFlowAccess().getStepsAssignment_2(), "rule__BasicFlow__StepsAssignment_2");
					put(grammarAccess.getBasicFlowAccess().getFinalStateAssignment_4_1(), "rule__BasicFlow__FinalStateAssignment_4_1");
					put(grammarAccess.getExceptionFlowAccess().getNameAssignment_1(), "rule__ExceptionFlow__NameAssignment_1");
					put(grammarAccess.getExceptionFlowAccess().getConditionAssignment_3(), "rule__ExceptionFlow__ConditionAssignment_3");
					put(grammarAccess.getExceptionFlowAccess().getStepsAssignment_5(), "rule__ExceptionFlow__StepsAssignment_5");
					put(grammarAccess.getExceptionFlowAccess().getFinalStateAssignment_7_1(), "rule__ExceptionFlow__FinalStateAssignment_7_1");
					put(grammarAccess.getAlternativeFlowAccess().getNameAssignment_1(), "rule__AlternativeFlow__NameAssignment_1");
					put(grammarAccess.getAlternativeFlowAccess().getStepsAssignment_2(), "rule__AlternativeFlow__StepsAssignment_2");
					put(grammarAccess.getAlternativeFlowAccess().getFinalStateAssignment_4_1(), "rule__AlternativeFlow__FinalStateAssignment_4_1");
					put(grammarAccess.getParallelFlowAccess().getNameAssignment_1(), "rule__ParallelFlow__NameAssignment_1");
					put(grammarAccess.getParallelFlowAccess().getStepsAssignment_2(), "rule__ParallelFlow__StepsAssignment_2");
					put(grammarAccess.getParallelFlowAccess().getFinalStateAssignment_4_1(), "rule__ParallelFlow__FinalStateAssignment_4_1");
					put(grammarAccess.getConditionAccess().getConditionAssignment_1(), "rule__Condition__ConditionAssignment_1");
					put(grammarAccess.getConditionAccess().getContinuationAssignment_3_1(), "rule__Condition__ContinuationAssignment_3_1");
					put(grammarAccess.getLocalAlternativeAccess().getConditionAssignment_1(), "rule__LocalAlternative__ConditionAssignment_1");
					put(grammarAccess.getLocalAlternativeAccess().getDescriptionAssignment_3_0(), "rule__LocalAlternative__DescriptionAssignment_3_0");
					put(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseAssignment_3_1_1(), "rule__LocalAlternative__InvokedUseCaseAssignment_3_1_1");
					put(grammarAccess.getLocalAlternativeAccess().getContinuationAssignment_4_1(), "rule__LocalAlternative__ContinuationAssignment_4_1");
					put(grammarAccess.getAlternativeFlowAlternativeAccess().getConditionAssignment_1(), "rule__AlternativeFlowAlternative__ConditionAssignment_1");
					put(grammarAccess.getAlternativeFlowAlternativeAccess().getRefAssignment_4(), "rule__AlternativeFlowAlternative__RefAssignment_4");
					put(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationAssignment_5_1(), "rule__AlternativeFlowAlternative__ContinuationAssignment_5_1");
					put(grammarAccess.getParallelStepAccess().getNameAssignment_1(), "rule__ParallelStep__NameAssignment_1");
					put(grammarAccess.getParallelStepAccess().getLabelAssignment_2(), "rule__ParallelStep__LabelAssignment_2");
					put(grammarAccess.getParallelStepAccess().getInvokedFlowsAssignment_3(), "rule__ParallelStep__InvokedFlowsAssignment_3");
					put(grammarAccess.getParallelStepAccess().getInvokedFlowsAssignment_4_1(), "rule__ParallelStep__InvokedFlowsAssignment_4_1");
					put(grammarAccess.getParallelStepAccess().getNextAssignment_5(), "rule__ParallelStep__NextAssignment_5");
					put(grammarAccess.getNormalStepAccess().getNameAssignment_1(), "rule__NormalStep__NameAssignment_1");
					put(grammarAccess.getNormalStepAccess().getLabelAssignment_2(), "rule__NormalStep__LabelAssignment_2");
					put(grammarAccess.getNormalStepAccess().getActorAssignment_4(), "rule__NormalStep__ActorAssignment_4");
					put(grammarAccess.getNormalStepAccess().getCustomStepTypeAssignment_5_1(), "rule__NormalStep__CustomStepTypeAssignment_5_1");
					put(grammarAccess.getNormalStepAccess().getStepAlternativeAssignment_6_0_1(), "rule__NormalStep__StepAlternativeAssignment_6_0_1");
					put(grammarAccess.getNormalStepAccess().getInvokedUseCaseAssignment_6_1_1(), "rule__NormalStep__InvokedUseCaseAssignment_6_1_1");
					put(grammarAccess.getNormalStepAccess().getNextAssignment_7(), "rule__NormalStep__NextAssignment_7");
					put(grammarAccess.getUseCaseAccess().getUnorderedGroup_4(), "rule__UseCase__UnorderedGroup_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			UseCaseDSL.ui.contentassist.antlr.internal.InternalUseCaseParser typedParser = (UseCaseDSL.ui.contentassist.antlr.internal.InternalUseCaseParser) parser;
			typedParser.entryRuleUseCasesModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public UseCaseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(UseCaseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
