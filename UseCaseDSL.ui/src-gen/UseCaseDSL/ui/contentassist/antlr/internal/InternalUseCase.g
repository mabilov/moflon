/*
* generated by Xtext
*/
grammar InternalUseCase;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package UseCaseDSL.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package UseCaseDSL.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import UseCaseDSL.services.UseCaseGrammarAccess;

}

@parser::members {
 
 	private UseCaseGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(UseCaseGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleUseCasesModel
entryRuleUseCasesModel 
:
{ before(grammarAccess.getUseCasesModelRule()); }
	 ruleUseCasesModel
{ after(grammarAccess.getUseCasesModelRule()); } 
	 EOF 
;

// Rule UseCasesModel
ruleUseCasesModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUseCasesModelAccess().getPackagesAssignment()); }
(rule__UseCasesModel__PackagesAssignment)*
{ after(grammarAccess.getUseCasesModelAccess().getPackagesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration 
:
{ before(grammarAccess.getPackageDeclarationRule()); }
	 rulePackageDeclaration
{ after(grammarAccess.getPackageDeclarationRule()); } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup()); }
(rule__PackageDeclaration__Group__0)
{ after(grammarAccess.getPackageDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUseCase
entryRuleUseCase 
:
{ before(grammarAccess.getUseCaseRule()); }
	 ruleUseCase
{ after(grammarAccess.getUseCaseRule()); } 
	 EOF 
;

// Rule UseCase
ruleUseCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUseCaseAccess().getGroup()); }
(rule__UseCase__Group__0)
{ after(grammarAccess.getUseCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActor
entryRuleActor 
:
{ before(grammarAccess.getActorRule()); }
	 ruleActor
{ after(grammarAccess.getActorRule()); } 
	 EOF 
;

// Rule Actor
ruleActor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActorAccess().getGroup()); }
(rule__Actor__Group__0)
{ after(grammarAccess.getActorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStep
entryRuleStep 
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAccess().getAlternatives()); }
(rule__Step__Alternatives)
{ after(grammarAccess.getStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFlow
entryRuleFlow 
:
{ before(grammarAccess.getFlowRule()); }
	 ruleFlow
{ after(grammarAccess.getFlowRule()); } 
	 EOF 
;

// Rule Flow
ruleFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFlowAccess().getAlternatives()); }
(rule__Flow__Alternatives)
{ after(grammarAccess.getFlowAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicFlow
entryRuleBasicFlow 
:
{ before(grammarAccess.getBasicFlowRule()); }
	 ruleBasicFlow
{ after(grammarAccess.getBasicFlowRule()); } 
	 EOF 
;

// Rule BasicFlow
ruleBasicFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicFlowAccess().getGroup()); }
(rule__BasicFlow__Group__0)
{ after(grammarAccess.getBasicFlowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedFlow
entryRuleNamedFlow 
:
{ before(grammarAccess.getNamedFlowRule()); }
	 ruleNamedFlow
{ after(grammarAccess.getNamedFlowRule()); } 
	 EOF 
;

// Rule NamedFlow
ruleNamedFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedFlowAccess().getAlternatives()); }
(rule__NamedFlow__Alternatives)
{ after(grammarAccess.getNamedFlowAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExceptionFlow
entryRuleExceptionFlow 
:
{ before(grammarAccess.getExceptionFlowRule()); }
	 ruleExceptionFlow
{ after(grammarAccess.getExceptionFlowRule()); } 
	 EOF 
;

// Rule ExceptionFlow
ruleExceptionFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionFlowAccess().getGroup()); }
(rule__ExceptionFlow__Group__0)
{ after(grammarAccess.getExceptionFlowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternativeFlow
entryRuleAlternativeFlow 
:
{ before(grammarAccess.getAlternativeFlowRule()); }
	 ruleAlternativeFlow
{ after(grammarAccess.getAlternativeFlowRule()); } 
	 EOF 
;

// Rule AlternativeFlow
ruleAlternativeFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativeFlowAccess().getGroup()); }
(rule__AlternativeFlow__Group__0)
{ after(grammarAccess.getAlternativeFlowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParallelFlow
entryRuleParallelFlow 
:
{ before(grammarAccess.getParallelFlowRule()); }
	 ruleParallelFlow
{ after(grammarAccess.getParallelFlowRule()); } 
	 EOF 
;

// Rule ParallelFlow
ruleParallelFlow
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParallelFlowAccess().getGroup()); }
(rule__ParallelFlow__Group__0)
{ after(grammarAccess.getParallelFlowAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepAlternative
entryRuleStepAlternative 
:
{ before(grammarAccess.getStepAlternativeRule()); }
	 ruleStepAlternative
{ after(grammarAccess.getStepAlternativeRule()); } 
	 EOF 
;

// Rule StepAlternative
ruleStepAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAlternativeAccess().getAlternatives()); }
(rule__StepAlternative__Alternatives)
{ after(grammarAccess.getStepAlternativeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalAlternative
entryRuleLocalAlternative 
:
{ before(grammarAccess.getLocalAlternativeRule()); }
	 ruleLocalAlternative
{ after(grammarAccess.getLocalAlternativeRule()); } 
	 EOF 
;

// Rule LocalAlternative
ruleLocalAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalAlternativeAccess().getGroup()); }
(rule__LocalAlternative__Group__0)
{ after(grammarAccess.getLocalAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternativeFlowAlternative
entryRuleAlternativeFlowAlternative 
:
{ before(grammarAccess.getAlternativeFlowAlternativeRule()); }
	 ruleAlternativeFlowAlternative
{ after(grammarAccess.getAlternativeFlowAlternativeRule()); } 
	 EOF 
;

// Rule AlternativeFlowAlternative
ruleAlternativeFlowAlternative
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getGroup()); }
(rule__AlternativeFlowAlternative__Group__0)
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParallelStep
entryRuleParallelStep 
:
{ before(grammarAccess.getParallelStepRule()); }
	 ruleParallelStep
{ after(grammarAccess.getParallelStepRule()); } 
	 EOF 
;

// Rule ParallelStep
ruleParallelStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParallelStepAccess().getGroup()); }
(rule__ParallelStep__Group__0)
{ after(grammarAccess.getParallelStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNormalStep
entryRuleNormalStep 
:
{ before(grammarAccess.getNormalStepRule()); }
	 ruleNormalStep
{ after(grammarAccess.getNormalStepRule()); } 
	 EOF 
;

// Rule NormalStep
ruleNormalStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNormalStepAccess().getGroup()); }
(rule__NormalStep__Group__0)
{ after(grammarAccess.getNormalStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ActorType
ruleActorType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorTypeAccess().getAlternatives()); }
(rule__ActorType__Alternatives)
{ after(grammarAccess.getActorTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CustomStepType
ruleCustomStepType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomStepTypeAccess().getAlternatives()); }
(rule__CustomStepType__Alternatives)
{ after(grammarAccess.getCustomStepTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Step__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getNormalStepParserRuleCall_0()); }
	ruleNormalStep
{ after(grammarAccess.getStepAccess().getNormalStepParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStepAccess().getParallelStepParserRuleCall_1()); }
	ruleParallelStep
{ after(grammarAccess.getStepAccess().getParallelStepParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Flow__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFlowAccess().getBasicFlowParserRuleCall_0()); }
	ruleBasicFlow
{ after(grammarAccess.getFlowAccess().getBasicFlowParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFlowAccess().getNamedFlowParserRuleCall_1()); }
	ruleNamedFlow
{ after(grammarAccess.getFlowAccess().getNamedFlowParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedFlow__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedFlowAccess().getExceptionFlowParserRuleCall_0()); }
	ruleExceptionFlow
{ after(grammarAccess.getNamedFlowAccess().getExceptionFlowParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNamedFlowAccess().getAlternativeFlowParserRuleCall_1()); }
	ruleAlternativeFlow
{ after(grammarAccess.getNamedFlowAccess().getAlternativeFlowParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNamedFlowAccess().getParallelFlowParserRuleCall_2()); }
	ruleParallelFlow
{ after(grammarAccess.getNamedFlowAccess().getParallelFlowParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StepAlternative__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAlternativeAccess().getConditionParserRuleCall_0()); }
	ruleCondition
{ after(grammarAccess.getStepAlternativeAccess().getConditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStepAlternativeAccess().getLocalAlternativeParserRuleCall_1()); }
	ruleLocalAlternative
{ after(grammarAccess.getStepAlternativeAccess().getLocalAlternativeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStepAlternativeAccess().getAlternativeFlowAlternativeParserRuleCall_2()); }
	ruleAlternativeFlowAlternative
{ after(grammarAccess.getStepAlternativeAccess().getAlternativeFlowAlternativeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getDescriptionAssignment_3_0()); }
(rule__LocalAlternative__DescriptionAssignment_3_0)
{ after(grammarAccess.getLocalAlternativeAccess().getDescriptionAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getLocalAlternativeAccess().getGroup_3_1()); }
(rule__LocalAlternative__Group_3_1__0)
{ after(grammarAccess.getLocalAlternativeAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Alternatives_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getGroup_6_0()); }
(rule__NormalStep__Group_6_0__0)
{ after(grammarAccess.getNormalStepAccess().getGroup_6_0()); }
)

    |(
{ before(grammarAccess.getNormalStepAccess().getGroup_6_1()); }
(rule__NormalStep__Group_6_1__0)
{ after(grammarAccess.getNormalStepAccess().getGroup_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActorType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorTypeAccess().getPERSONEnumLiteralDeclaration_0()); }
(	'person' 
)
{ after(grammarAccess.getActorTypeAccess().getPERSONEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getActorTypeAccess().getSYSTEMEnumLiteralDeclaration_1()); }
(	'system' 
)
{ after(grammarAccess.getActorTypeAccess().getSYSTEMEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getActorTypeAccess().getORGANIZATIONEnumLiteralDeclaration_2()); }
(	'organization' 
)
{ after(grammarAccess.getActorTypeAccess().getORGANIZATIONEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomStepType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomStepTypeAccess().getINPUTEnumLiteralDeclaration_0()); }
(	'input' 
)
{ after(grammarAccess.getCustomStepTypeAccess().getINPUTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCustomStepTypeAccess().getOUTPUTEnumLiteralDeclaration_1()); }
(	'output' 
)
{ after(grammarAccess.getCustomStepTypeAccess().getOUTPUTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCustomStepTypeAccess().getPROCESSEnumLiteralDeclaration_2()); }
(	'process' 
)
{ after(grammarAccess.getCustomStepTypeAccess().getPROCESSEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCustomStepTypeAccess().getMIXEnumLiteralDeclaration_3()); }
(	'mix' 
)
{ after(grammarAccess.getCustomStepTypeAccess().getMIXEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__PackageDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__0__Impl
	rule__PackageDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__1__Impl
	rule__PackageDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
(rule__PackageDeclaration__NameAssignment_1)
{ after(grammarAccess.getPackageDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__2__Impl
	rule__PackageDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getDescriptionAssignment_2()); }
(rule__PackageDeclaration__DescriptionAssignment_2)?
{ after(grammarAccess.getPackageDeclarationAccess().getDescriptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__3__Impl
	rule__PackageDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getGroup_3()); }
(rule__PackageDeclaration__Group_3__0)?
{ after(grammarAccess.getPackageDeclarationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__4__Impl
	rule__PackageDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getUseCasesAssignment_4()); }
(rule__PackageDeclaration__UseCasesAssignment_4)*
{ after(grammarAccess.getPackageDeclarationAccess().getUseCasesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getEndPackageKeyword_5()); }

	'end package' 

{ after(grammarAccess.getPackageDeclarationAccess().getEndPackageKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PackageDeclaration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group_3__0__Impl
	rule__PackageDeclaration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getActorsKeyword_3_0()); }

	'actors' 

{ after(grammarAccess.getPackageDeclarationAccess().getActorsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PackageDeclaration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PackageDeclaration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPackageDeclarationAccess().getActorsAssignment_3_1()); }
(rule__PackageDeclaration__ActorsAssignment_3_1)
{ after(grammarAccess.getPackageDeclarationAccess().getActorsAssignment_3_1()); }
)
(
{ before(grammarAccess.getPackageDeclarationAccess().getActorsAssignment_3_1()); }
(rule__PackageDeclaration__ActorsAssignment_3_1)*
{ after(grammarAccess.getPackageDeclarationAccess().getActorsAssignment_3_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UseCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__0__Impl
	rule__UseCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getUsecaseKeyword_0()); }

	'usecase' 

{ after(grammarAccess.getUseCaseAccess().getUsecaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__1__Impl
	rule__UseCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getNameAssignment_1()); }
(rule__UseCase__NameAssignment_1)
{ after(grammarAccess.getUseCaseAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__2__Impl
	rule__UseCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getDescriptionAssignment_2()); }
(rule__UseCase__DescriptionAssignment_2)?
{ after(grammarAccess.getUseCaseAccess().getDescriptionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__3__Impl
	rule__UseCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getGroup_3()); }
(rule__UseCase__Group_3__0)?
{ after(grammarAccess.getUseCaseAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__4__Impl
	rule__UseCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getUnorderedGroup_4()); }
(rule__UseCase__UnorderedGroup_4)
{ after(grammarAccess.getUseCaseAccess().getUnorderedGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__5__Impl
	rule__UseCase__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getFlowsAssignment_5()); }
(rule__UseCase__FlowsAssignment_5)*
{ after(grammarAccess.getUseCaseAccess().getFlowsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getEndUsecaseKeyword_6()); }

	'end usecase' 

{ after(grammarAccess.getUseCaseAccess().getEndUsecaseKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__UseCase__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group_3__0__Impl
	rule__UseCase__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getExtendsKeyword_3_0()); }

	'extends' 

{ after(grammarAccess.getUseCaseAccess().getExtendsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getSuperCaseAssignment_3_1()); }
(rule__UseCase__SuperCaseAssignment_3_1)
{ after(grammarAccess.getUseCaseAccess().getSuperCaseAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UseCase__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group_4_0__0__Impl
	rule__UseCase__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getPreconditionsKeyword_4_0_0()); }

	'preconditions' 

{ after(grammarAccess.getUseCaseAccess().getPreconditionsKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getPreConditionsAssignment_4_0_1()); }
(rule__UseCase__PreConditionsAssignment_4_0_1)
{ after(grammarAccess.getUseCaseAccess().getPreConditionsAssignment_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UseCase__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group_4_1__0__Impl
	rule__UseCase__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getPostconditionKeyword_4_1_0()); }

	'postcondition' 

{ after(grammarAccess.getUseCaseAccess().getPostconditionKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getPostconditionAssignment_4_1_1()); }
(rule__UseCase__PostconditionAssignment_4_1_1)
{ after(grammarAccess.getUseCaseAccess().getPostconditionAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Actor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group__0__Impl
	rule__Actor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getNameAssignment_0()); }
(rule__Actor__NameAssignment_0)
{ after(grammarAccess.getActorAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group__1__Impl
	rule__Actor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getAsKeyword_1()); }

	'as' 

{ after(grammarAccess.getActorAccess().getAsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group__2__Impl
	rule__Actor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getTypeAssignment_2()); }
(rule__Actor__TypeAssignment_2)
{ after(grammarAccess.getActorAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group__3__Impl
	rule__Actor__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getDescriptionAssignment_3()); }
(rule__Actor__DescriptionAssignment_3)?
{ after(grammarAccess.getActorAccess().getDescriptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getGroup_4()); }
(rule__Actor__Group_4__0)?
{ after(grammarAccess.getActorAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Actor__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group_4__0__Impl
	rule__Actor__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getExtendsKeyword_4_0()); }

	'extends' 

{ after(grammarAccess.getActorAccess().getExtendsKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actor__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actor__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getExtendsAssignment_4_1()); }
(rule__Actor__ExtendsAssignment_4_1)
{ after(grammarAccess.getActorAccess().getExtendsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicFlow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group__0__Impl
	rule__BasicFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getBasicFlowKeyword_0()); }

	'basic flow' 

{ after(grammarAccess.getBasicFlowAccess().getBasicFlowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicFlow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group__1__Impl
	rule__BasicFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getBasicFlowAction_1()); }
(

)
{ after(grammarAccess.getBasicFlowAccess().getBasicFlowAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicFlow__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group__2__Impl
	rule__BasicFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getStepsAssignment_2()); }
(rule__BasicFlow__StepsAssignment_2)*
{ after(grammarAccess.getBasicFlowAccess().getStepsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicFlow__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group__3__Impl
	rule__BasicFlow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getEndFlowKeyword_3()); }

	'end flow' 

{ after(grammarAccess.getBasicFlowAccess().getEndFlowKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicFlow__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getGroup_4()); }
(rule__BasicFlow__Group_4__0)?
{ after(grammarAccess.getBasicFlowAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BasicFlow__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group_4__0__Impl
	rule__BasicFlow__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getWithPostconditionKeyword_4_0()); }

	'with postcondition' 

{ after(grammarAccess.getBasicFlowAccess().getWithPostconditionKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicFlow__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicFlow__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getFinalStateAssignment_4_1()); }
(rule__BasicFlow__FinalStateAssignment_4_1)
{ after(grammarAccess.getBasicFlowAccess().getFinalStateAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExceptionFlow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__0__Impl
	rule__ExceptionFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getExceptionFlowKeyword_0()); }

	'exception flow' 

{ after(grammarAccess.getExceptionFlowAccess().getExceptionFlowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__1__Impl
	rule__ExceptionFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getNameAssignment_1()); }
(rule__ExceptionFlow__NameAssignment_1)
{ after(grammarAccess.getExceptionFlowAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__2__Impl
	rule__ExceptionFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getIfKeyword_2()); }

	'if' 

{ after(grammarAccess.getExceptionFlowAccess().getIfKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__3__Impl
	rule__ExceptionFlow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getConditionAssignment_3()); }
(rule__ExceptionFlow__ConditionAssignment_3)
{ after(grammarAccess.getExceptionFlowAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__4__Impl
	rule__ExceptionFlow__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getExceptionFlowAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__5__Impl
	rule__ExceptionFlow__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getStepsAssignment_5()); }
(rule__ExceptionFlow__StepsAssignment_5)*
{ after(grammarAccess.getExceptionFlowAccess().getStepsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__6__Impl
	rule__ExceptionFlow__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getEndFlowKeyword_6()); }

	'end flow' 

{ after(grammarAccess.getExceptionFlowAccess().getEndFlowKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getGroup_7()); }
(rule__ExceptionFlow__Group_7__0)?
{ after(grammarAccess.getExceptionFlowAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ExceptionFlow__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group_7__0__Impl
	rule__ExceptionFlow__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getWithPostconditionKeyword_7_0()); }

	'with postcondition' 

{ after(grammarAccess.getExceptionFlowAccess().getWithPostconditionKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionFlow__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionFlow__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getFinalStateAssignment_7_1()); }
(rule__ExceptionFlow__FinalStateAssignment_7_1)
{ after(grammarAccess.getExceptionFlowAccess().getFinalStateAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AlternativeFlow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group__0__Impl
	rule__AlternativeFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getAlternativeFlowKeyword_0()); }

	'alternative flow' 

{ after(grammarAccess.getAlternativeFlowAccess().getAlternativeFlowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group__1__Impl
	rule__AlternativeFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getNameAssignment_1()); }
(rule__AlternativeFlow__NameAssignment_1)
{ after(grammarAccess.getAlternativeFlowAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlow__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group__2__Impl
	rule__AlternativeFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getStepsAssignment_2()); }
(rule__AlternativeFlow__StepsAssignment_2)*
{ after(grammarAccess.getAlternativeFlowAccess().getStepsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlow__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group__3__Impl
	rule__AlternativeFlow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getEndFlowKeyword_3()); }

	'end flow' 

{ after(grammarAccess.getAlternativeFlowAccess().getEndFlowKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlow__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getGroup_4()); }
(rule__AlternativeFlow__Group_4__0)?
{ after(grammarAccess.getAlternativeFlowAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__AlternativeFlow__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group_4__0__Impl
	rule__AlternativeFlow__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getWithPostconditionKeyword_4_0()); }

	'with postcondition' 

{ after(grammarAccess.getAlternativeFlowAccess().getWithPostconditionKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlow__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlow__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getFinalStateAssignment_4_1()); }
(rule__AlternativeFlow__FinalStateAssignment_4_1)
{ after(grammarAccess.getAlternativeFlowAccess().getFinalStateAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParallelFlow__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group__0__Impl
	rule__ParallelFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getParallelFlowKeyword_0()); }

	'parallel flow' 

{ after(grammarAccess.getParallelFlowAccess().getParallelFlowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelFlow__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group__1__Impl
	rule__ParallelFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getNameAssignment_1()); }
(rule__ParallelFlow__NameAssignment_1)
{ after(grammarAccess.getParallelFlowAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelFlow__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group__2__Impl
	rule__ParallelFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getStepsAssignment_2()); }
(rule__ParallelFlow__StepsAssignment_2)*
{ after(grammarAccess.getParallelFlowAccess().getStepsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelFlow__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group__3__Impl
	rule__ParallelFlow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getEndFlowKeyword_3()); }

	'end flow' 

{ after(grammarAccess.getParallelFlowAccess().getEndFlowKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelFlow__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getGroup_4()); }
(rule__ParallelFlow__Group_4__0)?
{ after(grammarAccess.getParallelFlowAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ParallelFlow__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group_4__0__Impl
	rule__ParallelFlow__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getWithPostconditionKeyword_4_0()); }

	'with postcondition' 

{ after(grammarAccess.getParallelFlowAccess().getWithPostconditionKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelFlow__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelFlow__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getFinalStateAssignment_4_1()); }
(rule__ParallelFlow__FinalStateAssignment_4_1)
{ after(grammarAccess.getParallelFlowAccess().getFinalStateAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getConditionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionAssignment_1()); }
(rule__Condition__ConditionAssignment_1)
{ after(grammarAccess.getConditionAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__2__Impl
	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getConditionAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getGroup_3()); }
(rule__Condition__Group_3__0)?
{ after(grammarAccess.getConditionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Condition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_3__0__Impl
	rule__Condition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getContinueWithStepKeyword_3_0()); }

	'continue with step' 

{ after(grammarAccess.getConditionAccess().getContinueWithStepKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getContinuationAssignment_3_1()); }
(rule__Condition__ContinuationAssignment_3_1)
{ after(grammarAccess.getConditionAccess().getContinuationAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalAlternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group__0__Impl
	rule__LocalAlternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getLocalAlternativeAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalAlternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group__1__Impl
	rule__LocalAlternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getConditionAssignment_1()); }
(rule__LocalAlternative__ConditionAssignment_1)
{ after(grammarAccess.getLocalAlternativeAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalAlternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group__2__Impl
	rule__LocalAlternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getLocalAlternativeAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalAlternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group__3__Impl
	rule__LocalAlternative__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getAlternatives_3()); }
(rule__LocalAlternative__Alternatives_3)
{ after(grammarAccess.getLocalAlternativeAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalAlternative__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getGroup_4()); }
(rule__LocalAlternative__Group_4__0)?
{ after(grammarAccess.getLocalAlternativeAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LocalAlternative__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group_3_1__0__Impl
	rule__LocalAlternative__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getInvokeUsecaseKeyword_3_1_0()); }

	'invoke usecase' 

{ after(grammarAccess.getLocalAlternativeAccess().getInvokeUsecaseKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalAlternative__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseAssignment_3_1_1()); }
(rule__LocalAlternative__InvokedUseCaseAssignment_3_1_1)
{ after(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalAlternative__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group_4__0__Impl
	rule__LocalAlternative__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getContinueWithStepKeyword_4_0()); }

	'continue with step' 

{ after(grammarAccess.getLocalAlternativeAccess().getContinueWithStepKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalAlternative__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalAlternative__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getContinuationAssignment_4_1()); }
(rule__LocalAlternative__ContinuationAssignment_4_1)
{ after(grammarAccess.getLocalAlternativeAccess().getContinuationAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AlternativeFlowAlternative__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group__0__Impl
	rule__AlternativeFlowAlternative__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlowAlternative__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group__1__Impl
	rule__AlternativeFlowAlternative__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getConditionAssignment_1()); }
(rule__AlternativeFlowAlternative__ConditionAssignment_1)
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlowAlternative__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group__2__Impl
	rule__AlternativeFlowAlternative__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlowAlternative__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group__3__Impl
	rule__AlternativeFlowAlternative__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getAlternativeFlowKeyword_3()); }

	'alternative flow' 

{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getAlternativeFlowKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlowAlternative__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group__4__Impl
	rule__AlternativeFlowAlternative__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getRefAssignment_4()); }
(rule__AlternativeFlowAlternative__RefAssignment_4)
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getRefAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlowAlternative__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getGroup_5()); }
(rule__AlternativeFlowAlternative__Group_5__0)?
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__AlternativeFlowAlternative__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group_5__0__Impl
	rule__AlternativeFlowAlternative__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getContinueWithStepKeyword_5_0()); }

	'continue with step' 

{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getContinueWithStepKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AlternativeFlowAlternative__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AlternativeFlowAlternative__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationAssignment_5_1()); }
(rule__AlternativeFlowAlternative__ContinuationAssignment_5_1)
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParallelStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group__0__Impl
	rule__ParallelStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getParallelStepKeyword_0()); }

	'parallel step' 

{ after(grammarAccess.getParallelStepAccess().getParallelStepKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group__1__Impl
	rule__ParallelStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getNameAssignment_1()); }
(rule__ParallelStep__NameAssignment_1)
{ after(grammarAccess.getParallelStepAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group__2__Impl
	rule__ParallelStep__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getLabelAssignment_2()); }
(rule__ParallelStep__LabelAssignment_2)?
{ after(grammarAccess.getParallelStepAccess().getLabelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group__3__Impl
	rule__ParallelStep__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getInvokedFlowsAssignment_3()); }
(rule__ParallelStep__InvokedFlowsAssignment_3)
{ after(grammarAccess.getParallelStepAccess().getInvokedFlowsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group__4__Impl
	rule__ParallelStep__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getGroup_4()); }
(rule__ParallelStep__Group_4__0)*
{ after(grammarAccess.getParallelStepAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getGroup_5()); }
(rule__ParallelStep__Group_5__0)?
{ after(grammarAccess.getParallelStepAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ParallelStep__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group_4__0__Impl
	rule__ParallelStep__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getParallelStepAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getInvokedFlowsAssignment_4_1()); }
(rule__ParallelStep__InvokedFlowsAssignment_4_1)
{ after(grammarAccess.getParallelStepAccess().getInvokedFlowsAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParallelStep__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group_5__0__Impl
	rule__ParallelStep__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getNextKeyword_5_0()); }

	'next' 

{ after(grammarAccess.getParallelStepAccess().getNextKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStep__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStep__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getNextAssignment_5_1()); }
(rule__ParallelStep__NextAssignment_5_1)
{ after(grammarAccess.getParallelStepAccess().getNextAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__0__Impl
	rule__NormalStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getStepKeyword_0()); }

	'step' 

{ after(grammarAccess.getNormalStepAccess().getStepKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__1__Impl
	rule__NormalStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getNameAssignment_1()); }
(rule__NormalStep__NameAssignment_1)
{ after(grammarAccess.getNormalStepAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__2__Impl
	rule__NormalStep__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getLabelAssignment_2()); }
(rule__NormalStep__LabelAssignment_2)?
{ after(grammarAccess.getNormalStepAccess().getLabelAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__3__Impl
	rule__NormalStep__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getByKeyword_3()); }

	'by' 

{ after(grammarAccess.getNormalStepAccess().getByKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__4__Impl
	rule__NormalStep__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getActorAssignment_4()); }
(rule__NormalStep__ActorAssignment_4)
{ after(grammarAccess.getNormalStepAccess().getActorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__5__Impl
	rule__NormalStep__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getGroup_5()); }
(rule__NormalStep__Group_5__0)?
{ after(grammarAccess.getNormalStepAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__6__Impl
	rule__NormalStep__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getAlternatives_6()); }
(rule__NormalStep__Alternatives_6)?
{ after(grammarAccess.getNormalStepAccess().getAlternatives_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getGroup_7()); }
(rule__NormalStep__Group_7__0)?
{ after(grammarAccess.getNormalStepAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__NormalStep__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_5__0__Impl
	rule__NormalStep__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getTypeKeyword_5_0()); }

	'type' 

{ after(grammarAccess.getNormalStepAccess().getTypeKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getCustomStepTypeAssignment_5_1()); }
(rule__NormalStep__CustomStepTypeAssignment_5_1)
{ after(grammarAccess.getNormalStepAccess().getCustomStepTypeAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalStep__Group_6_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_6_0__0__Impl
	rule__NormalStep__Group_6_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_6_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getAlternativesKeyword_6_0_0()); }

	'alternatives' 

{ after(grammarAccess.getNormalStepAccess().getAlternativesKeyword_6_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group_6_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_6_0__1__Impl
	rule__NormalStep__Group_6_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_6_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getNormalStepAccess().getStepAlternativeAssignment_6_0_1()); }
(rule__NormalStep__StepAlternativeAssignment_6_0_1)
{ after(grammarAccess.getNormalStepAccess().getStepAlternativeAssignment_6_0_1()); }
)
(
{ before(grammarAccess.getNormalStepAccess().getStepAlternativeAssignment_6_0_1()); }
(rule__NormalStep__StepAlternativeAssignment_6_0_1)*
{ after(grammarAccess.getNormalStepAccess().getStepAlternativeAssignment_6_0_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group_6_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_6_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_6_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getElseKeyword_6_0_2()); }

	'else' 

{ after(grammarAccess.getNormalStepAccess().getElseKeyword_6_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NormalStep__Group_6_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_6_1__0__Impl
	rule__NormalStep__Group_6_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_6_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getInvokeUsecaseKeyword_6_1_0()); }

	'invoke usecase' 

{ after(grammarAccess.getNormalStepAccess().getInvokeUsecaseKeyword_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group_6_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_6_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_6_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getInvokedUseCaseAssignment_6_1_1()); }
(rule__NormalStep__InvokedUseCaseAssignment_6_1_1)
{ after(grammarAccess.getNormalStepAccess().getInvokedUseCaseAssignment_6_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NormalStep__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_7__0__Impl
	rule__NormalStep__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getNextKeyword_7_0()); }

	'next' 

{ after(grammarAccess.getNormalStepAccess().getNextKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NormalStep__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NormalStep__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getNextAssignment_7_1()); }
(rule__NormalStep__NextAssignment_7_1)
{ after(grammarAccess.getNormalStepAccess().getNextAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__UseCase__UnorderedGroup_4
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getUseCaseAccess().getUnorderedGroup_4());
    }
:
	rule__UseCase__UnorderedGroup_4__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getUseCaseAccess().getUnorderedGroup_4());
	restoreStackSize(stackSize);
}


rule__UseCase__UnorderedGroup_4__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUseCaseAccess().getUnorderedGroup_4(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getUseCaseAccess().getUnorderedGroup_4(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getUseCaseAccess().getGroup_4_0()); }
						(rule__UseCase__Group_4_0__0)
						{ after(grammarAccess.getUseCaseAccess().getGroup_4_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getUseCaseAccess().getUnorderedGroup_4(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getUseCaseAccess().getUnorderedGroup_4(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getUseCaseAccess().getGroup_4_1()); }
						(rule__UseCase__Group_4_1__0)
						{ after(grammarAccess.getUseCaseAccess().getGroup_4_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getUseCaseAccess().getUnorderedGroup_4());
	restoreStackSize(stackSize);
}


rule__UseCase__UnorderedGroup_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__UnorderedGroup_4__Impl
	rule__UseCase__UnorderedGroup_4__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__UnorderedGroup_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UseCase__UnorderedGroup_4__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__UseCasesModel__PackagesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCasesModelAccess().getPackagesPackageDeclarationParserRuleCall_0()); }
	rulePackageDeclaration{ after(grammarAccess.getUseCasesModelAccess().getPackagesPackageDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__DescriptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getPackageDeclarationAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__ActorsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getActorsActorParserRuleCall_3_1_0()); }
	ruleActor{ after(grammarAccess.getPackageDeclarationAccess().getActorsActorParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PackageDeclaration__UseCasesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageDeclarationAccess().getUseCasesUseCaseParserRuleCall_4_0()); }
	ruleUseCase{ after(grammarAccess.getPackageDeclarationAccess().getUseCasesUseCaseParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__DescriptionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getUseCaseAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__SuperCaseAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getSuperCaseUseCaseCrossReference_3_1_0()); }
(
{ before(grammarAccess.getUseCaseAccess().getSuperCaseUseCaseIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getUseCaseAccess().getSuperCaseUseCaseIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getUseCaseAccess().getSuperCaseUseCaseCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__PreConditionsAssignment_4_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getPreConditionsSTRINGTerminalRuleCall_4_0_1_0()); }
	RULE_STRING{ after(grammarAccess.getUseCaseAccess().getPreConditionsSTRINGTerminalRuleCall_4_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__PostconditionAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getPostconditionSTRINGTerminalRuleCall_4_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getUseCaseAccess().getPostconditionSTRINGTerminalRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__FlowsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUseCaseAccess().getFlowsFlowParserRuleCall_5_0()); }
	ruleFlow{ after(grammarAccess.getUseCaseAccess().getFlowsFlowParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getActorAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getTypeActorTypeEnumRuleCall_2_0()); }
	ruleActorType{ after(grammarAccess.getActorAccess().getTypeActorTypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__DescriptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getActorAccess().getDescriptionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actor__ExtendsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActorAccess().getExtendsActorCrossReference_4_1_0()); }
(
{ before(grammarAccess.getActorAccess().getExtendsActorIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getActorAccess().getExtendsActorIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getActorAccess().getExtendsActorCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__StepsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getStepsStepParserRuleCall_2_0()); }
	ruleStep{ after(grammarAccess.getBasicFlowAccess().getStepsStepParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicFlow__FinalStateAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicFlowAccess().getFinalStateSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getBasicFlowAccess().getFinalStateSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getExceptionFlowAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getExceptionFlowAccess().getConditionSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__StepsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getStepsStepParserRuleCall_5_0()); }
	ruleStep{ after(grammarAccess.getExceptionFlowAccess().getStepsStepParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionFlow__FinalStateAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionFlowAccess().getFinalStateSTRINGTerminalRuleCall_7_1_0()); }
	RULE_STRING{ after(grammarAccess.getExceptionFlowAccess().getFinalStateSTRINGTerminalRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAlternativeFlowAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__StepsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getStepsStepParserRuleCall_2_0()); }
	ruleStep{ after(grammarAccess.getAlternativeFlowAccess().getStepsStepParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlow__FinalStateAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAccess().getFinalStateSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getAlternativeFlowAccess().getFinalStateSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParallelFlowAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__StepsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getStepsStepParserRuleCall_2_0()); }
	ruleStep{ after(grammarAccess.getParallelFlowAccess().getStepsStepParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelFlow__FinalStateAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelFlowAccess().getFinalStateSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getParallelFlowAccess().getFinalStateSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ContinuationAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getContinuationStepCrossReference_3_1_0()); }
(
{ before(grammarAccess.getConditionAccess().getContinuationStepIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getConditionAccess().getContinuationStepIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getConditionAccess().getContinuationStepCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getLocalAlternativeAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__DescriptionAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getDescriptionSTRINGTerminalRuleCall_3_0_0()); }
	RULE_STRING{ after(grammarAccess.getLocalAlternativeAccess().getDescriptionSTRINGTerminalRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__InvokedUseCaseAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseUseCaseCrossReference_3_1_1_0()); }
(
{ before(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseUseCaseIDTerminalRuleCall_3_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseUseCaseIDTerminalRuleCall_3_1_1_0_1()); }
)
{ after(grammarAccess.getLocalAlternativeAccess().getInvokedUseCaseUseCaseCrossReference_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalAlternative__ContinuationAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalAlternativeAccess().getContinuationStepCrossReference_4_1_0()); }
(
{ before(grammarAccess.getLocalAlternativeAccess().getContinuationStepIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getLocalAlternativeAccess().getContinuationStepIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getLocalAlternativeAccess().getContinuationStepCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getConditionSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__RefAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getRefNamedFlowCrossReference_4_0()); }
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getRefNamedFlowIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getRefNamedFlowIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getRefNamedFlowCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AlternativeFlowAlternative__ContinuationAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationStepCrossReference_5_1_0()); }
(
{ before(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationStepIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationStepIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getAlternativeFlowAlternativeAccess().getContinuationStepCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getParallelStepAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__LabelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getParallelStepAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__InvokedFlowsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowCrossReference_3_0()); }
(
{ before(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__InvokedFlowsAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowCrossReference_4_1_0()); }
(
{ before(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getParallelStepAccess().getInvokedFlowsParallelFlowCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStep__NextAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStepAccess().getNextStepCrossReference_5_1_0()); }
(
{ before(grammarAccess.getParallelStepAccess().getNextStepIDTerminalRuleCall_5_1_0_1()); }
	RULE_ID{ after(grammarAccess.getParallelStepAccess().getNextStepIDTerminalRuleCall_5_1_0_1()); }
)
{ after(grammarAccess.getParallelStepAccess().getNextStepCrossReference_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNormalStepAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__LabelAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getNormalStepAccess().getLabelSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__ActorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getActorActorCrossReference_4_0()); }
(
{ before(grammarAccess.getNormalStepAccess().getActorActorIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getNormalStepAccess().getActorActorIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getNormalStepAccess().getActorActorCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__CustomStepTypeAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getCustomStepTypeCustomStepTypeEnumRuleCall_5_1_0()); }
	ruleCustomStepType{ after(grammarAccess.getNormalStepAccess().getCustomStepTypeCustomStepTypeEnumRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__StepAlternativeAssignment_6_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getStepAlternativeStepAlternativeParserRuleCall_6_0_1_0()); }
	ruleStepAlternative{ after(grammarAccess.getNormalStepAccess().getStepAlternativeStepAlternativeParserRuleCall_6_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__InvokedUseCaseAssignment_6_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getInvokedUseCaseUseCaseCrossReference_6_1_1_0()); }
(
{ before(grammarAccess.getNormalStepAccess().getInvokedUseCaseUseCaseIDTerminalRuleCall_6_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNormalStepAccess().getInvokedUseCaseUseCaseIDTerminalRuleCall_6_1_1_0_1()); }
)
{ after(grammarAccess.getNormalStepAccess().getInvokedUseCaseUseCaseCrossReference_6_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NormalStep__NextAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNormalStepAccess().getNextStepCrossReference_7_1_0()); }
(
{ before(grammarAccess.getNormalStepAccess().getNextStepIDTerminalRuleCall_7_1_0_1()); }
	RULE_ID{ after(grammarAccess.getNormalStepAccess().getNextStepIDTerminalRuleCall_7_1_0_1()); }
)
{ after(grammarAccess.getNormalStepAccess().getNextStepCrossReference_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


