<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;file&quot;, file);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;ucModel&quot;, ucModel);&#xA;ruleresult.registerObject(&quot;fileToUcModel&quot;, fileToUcModel);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;file&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.File&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ucModel&quot;, ucModel);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ucModel&quot;,ucModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;ucModel&quot;, ucModel);&#xA;ruleresult.registerObject(&quot;fileToUcModel&quot;, fileToUcModel);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;ucModel&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCasesModel());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;file&quot;, file);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_rootNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootNode.name&quot;, true, csp);&#xD;&#xA;var_rootNode_name.setValue(rootNode.getName());&#xD;&#xA;var_rootNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.name&quot;, csp);&#xD;&#xA;var_p_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_rootNode_name,var_p_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ucModel&quot;,ucModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToUcModel&quot;,fileToUcModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ucModel&quot;, ucModel);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;fileToUcModel&quot;, fileToUcModel);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;rootNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;ucModel&quot;, ucModel);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.name&quot;, true, csp);&#xD;&#xA;var_p_name.setValue(p.getName());&#xD;&#xA;var_p_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_rootNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootNode.name&quot;, csp);&#xD;&#xA;var_rootNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_rootNode_name,var_p_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ucModel&quot;,ucModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToUcModel&quot;,fileToUcModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;ucModel&quot;, ucModel);&#xA;ruleresult.registerObject(&quot;file&quot;, file);&#xA;ruleresult.registerObject(&quot;fileToUcModel&quot;, fileToUcModel);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;p&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getPackageDeclaration());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;match.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actorsNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;match.registerObject(&quot;actorNode&quot;, actorNode);&#xA;match.registerObject(&quot;typeNode&quot;, typeNode);&#xA;match.registerObject(&quot;typeNodeVal&quot;, typeNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_typeNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;typeNodeVal.name&quot;, true, csp);&#xD;&#xA;var_typeNodeVal_name.setValue(typeNodeVal.getName());&#xD;&#xA;var_typeNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actorNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actorNode.name&quot;, true, csp);&#xD;&#xA;var_actorNode_name.setValue(actorNode.getName());&#xD;&#xA;var_actorNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, csp);&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,var_typeNodeVal_name);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actorNode_name,var_actor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNode&quot;,actorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeNode&quot;,typeNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeNodeVal&quot;,typeNodeVal);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorNode&quot;, actorNode);&#xA;ruleresult.registerObject(&quot;actorNodeToActor&quot;, actorNodeToActor);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;ruleresult.registerObject(&quot;typeNodeVal&quot;, typeNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actorNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;typeNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;typeNodeVal&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_typeNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;typeNodeVal.name&quot;, csp);&#xD;&#xA;var_typeNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actorNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actorNode.name&quot;, csp);&#xD;&#xA;var_actorNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,var_typeNodeVal_name);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actorNode_name,var_actor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorNode&quot;, actorNode);&#xA;ruleresult.registerObject(&quot;actorNodeToActor&quot;, actorNodeToActor);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;ruleresult.registerObject(&quot;typeNodeVal&quot;, typeNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actor&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actorNode&quot;, actorNode);&#xA;match.registerObject(&quot;descNode&quot;, descNode);&#xA;match.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;match.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;match.registerObject(&quot;typeNode&quot;, typeNode);&#xA;match.registerObject(&quot;typeNodeVal&quot;, typeNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, true, csp);&#xD;&#xA;var_descValueNode_name.setValue(descValueNode.getName());&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_typeNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;typeNodeVal.name&quot;, true, csp);&#xD;&#xA;var_typeNodeVal_name.setValue(typeNodeVal.getName());&#xD;&#xA;var_typeNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actorNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actorNode.name&quot;, true, csp);&#xD;&#xA;var_actorNode_name.setValue(actorNode.getName());&#xD;&#xA;var_actorNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.description&quot;, csp);&#xD;&#xA;var_actor_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, csp);&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();EqActorType eqActorType = new EqActorType();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_actor_description);&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,var_typeNodeVal_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_actorNode_name,var_actor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNode&quot;,actorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descNode&quot;,descNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descValueNode&quot;,descValueNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeNode&quot;,typeNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;typeNodeVal&quot;,typeNodeVal);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actorNode&quot;, actorNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;ruleresult.registerObject(&quot;typeNodeVal&quot;, typeNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actorNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descValueNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;typeNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;typeNodeVal&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.description&quot;, true, csp);&#xD;&#xA;var_actor_description.setValue(actor.getDescription());&#xD;&#xA;var_actor_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, true, csp);&#xD;&#xA;var_actor_type.setValue(actor.getType());&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_typeNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;typeNodeVal.name&quot;, csp);&#xD;&#xA;var_typeNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actorNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actorNode.name&quot;, csp);&#xD;&#xA;var_actorNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();EqActorType eqActorType = new EqActorType();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_actor_description);&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,var_typeNodeVal_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_actorNode_name,var_actor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;actorNode&quot;, actorNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;typeNode&quot;, typeNode);&#xA;ruleresult.registerObject(&quot;typeNodeVal&quot;, typeNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;actor&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;superUseCaseNode&quot;, superUseCaseNode);&#xA;match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;extendsNode&quot;, extendsNode);&#xA;match.registerObject(&quot;extendsValNode&quot;, extendsValNode);&#xA;match.registerObject(&quot;useCasesNode&quot;, useCasesNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_extendsValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;extendsValNode.name&quot;, true, csp);&#xD;&#xA;var_extendsValNode_name.setValue(extendsValNode.getName());&#xD;&#xA;var_extendsValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_superUseCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;superUseCase.name&quot;, true, csp);&#xD;&#xA;var_superUseCase_name.setValue(superUseCase.getName());&#xD;&#xA;var_superUseCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_extendsValNode_name,var_superUseCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCaseNode&quot;,superUseCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCase&quot;,superUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;extendsNode&quot;,extendsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;extendsValNode&quot;,extendsValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCaseNodeToSuperUseCase&quot;,superUseCaseNodeToSuperUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesNode&quot;,useCasesNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;superUseCaseNode&quot;, superUseCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;superUseCase&quot;, superUseCase);&#xA;ruleresult.registerObject(&quot;extendsNode&quot;, extendsNode);&#xA;ruleresult.registerObject(&quot;extendsValNode&quot;, extendsValNode);&#xA;ruleresult.registerObject(&quot;superUseCaseNodeToSuperUseCase&quot;, superUseCaseNodeToSuperUseCase);&#xA;ruleresult.registerObject(&quot;useCasesNode&quot;, useCasesNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;extendsNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;extendsValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;superUseCase&quot;, superUseCase);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_superUseCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;superUseCase.name&quot;, true, csp);&#xD;&#xA;var_superUseCase_name.setValue(superUseCase.getName());&#xD;&#xA;var_superUseCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_extendsValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;extendsValNode.name&quot;, csp);&#xD;&#xA;var_extendsValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_extendsValNode_name,var_superUseCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCaseNode&quot;,superUseCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCase&quot;,superUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCaseNodeToSuperUseCase&quot;,superUseCaseNodeToSuperUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesNode&quot;,useCasesNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;superUseCaseNode&quot;, superUseCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;superUseCase&quot;, superUseCase);&#xA;ruleresult.registerObject(&quot;extendsNode&quot;, extendsNode);&#xA;ruleresult.registerObject(&quot;extendsValNode&quot;, extendsValNode);&#xA;ruleresult.registerObject(&quot;superUseCaseNodeToSuperUseCase&quot;, superUseCaseNodeToSuperUseCase);&#xA;ruleresult.registerObject(&quot;useCasesNode&quot;, useCasesNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;match.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCaseRootNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, true, csp);&#xD;&#xA;var_useCaseNode_name.setValue(useCaseNode.getName());&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCaseNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, true, csp);&#xD;&#xA;var_useCase_name.setValue(useCase.getName());&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;descNode&quot;, descNode);&#xA;match.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;match.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, true, csp);&#xD;&#xA;var_descValueNode_name.setValue(descValueNode.getName());&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, true, csp);&#xD;&#xA;var_useCaseNode_name.setValue(useCaseNode.getName());&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, csp);&#xD;&#xA;var_useCase_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_useCase_description);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descNode&quot;,descNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descValueNode&quot;,descValueNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCaseNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descValueNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, true, csp);&#xD;&#xA;var_useCase_description.setValue(useCase.getDescription());&#xD;&#xA;var_useCase_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, true, csp);&#xD;&#xA;var_useCase_name.setValue(useCase.getName());&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_useCase_description);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;preCondNode&quot;, preCondNode);&#xA;match.registerObject(&quot;preCondValNode&quot;, preCondValNode);&#xA;match.registerObject(&quot;descNode&quot;, descNode);&#xA;match.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;match.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_preCondValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;preCondValNode.name&quot;, true, csp);&#xD;&#xA;var_preCondValNode_name.setValue(preCondValNode.getName());&#xD;&#xA;var_preCondValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, true, csp);&#xD;&#xA;var_descValueNode_name.setValue(descValueNode.getName());&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, true, csp);&#xD;&#xA;var_useCaseNode_name.setValue(useCaseNode.getName());&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, csp);&#xD;&#xA;var_useCase_preConditions.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, csp);&#xD;&#xA;var_useCase_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_preCondValNode_name,var_useCase_preConditions);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_descValueNode_name,var_useCase_description);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;preCondNode&quot;,preCondNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;preCondValNode&quot;,preCondValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descNode&quot;,descNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descValueNode&quot;,descValueNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;preCondNode&quot;, preCondNode);&#xA;ruleresult.registerObject(&quot;preCondValNode&quot;, preCondValNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCaseNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;preCondNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;preCondValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descValueNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, true, csp);&#xD;&#xA;var_useCase_preConditions.setValue(useCase.getPreConditions());&#xD;&#xA;var_useCase_preConditions.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, true, csp);&#xD;&#xA;var_useCase_description.setValue(useCase.getDescription());&#xD;&#xA;var_useCase_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, true, csp);&#xD;&#xA;var_useCase_name.setValue(useCase.getName());&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_preCondValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;preCondValNode.name&quot;, csp);&#xD;&#xA;var_preCondValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_preCondValNode_name,var_useCase_preConditions);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_descValueNode_name,var_useCase_description);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;preCondNode&quot;, preCondNode);&#xA;ruleresult.registerObject(&quot;preCondValNode&quot;, preCondValNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, true, csp);&#xD;&#xA;var_nameValNode_name.setValue(nameValNode.getName());&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameValNode&quot;,nameValNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;stepNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;preCondValNode&quot;, preCondValNode);&#xA;match.registerObject(&quot;preCondNode&quot;, preCondNode);&#xA;match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;match.registerObject(&quot;rootNode&quot;, rootNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_preCondValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;preCondValNode.name&quot;, true, csp);&#xD;&#xA;var_preCondValNode_name.setValue(preCondValNode.getName());&#xD;&#xA;var_preCondValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, true, csp);&#xD;&#xA;var_useCaseNode_name.setValue(useCaseNode.getName());&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, csp);&#xD;&#xA;var_useCase_preConditions.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_preCondValNode_name,var_useCase_preConditions);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;preCondValNode&quot;,preCondValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;preCondNode&quot;,preCondNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;preCondValNode&quot;, preCondValNode);&#xA;ruleresult.registerObject(&quot;preCondNode&quot;, preCondNode);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;preCondValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;preCondNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;useCaseNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, true, csp);&#xD;&#xA;var_useCase_preConditions.setValue(useCase.getPreConditions());&#xD;&#xA;var_useCase_preConditions.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, true, csp);&#xD;&#xA;var_useCase_name.setValue(useCase.getName());&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_preCondValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;preCondValNode.name&quot;, csp);&#xD;&#xA;var_preCondValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_preCondValNode_name,var_useCase_preConditions);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;preCondValNode&quot;, preCondValNode);&#xA;ruleresult.registerObject(&quot;preCondNode&quot;, preCondNode);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseRootNode&quot;, useCaseRootNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;rootNode&quot;, rootNode);&#xA;ruleresult.registerObject(&quot;rootNodeToPackage&quot;, rootNodeToPackage);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;basicFlowNode&quot;, basicFlowNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;basicFlowNode&quot;,basicFlowNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;basicFlowNode&quot;, basicFlowNode);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;basicFlowNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;basicFlow&quot;,basicFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;basicFlowNode&quot;, basicFlowNode);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;basicFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getBasicFlow());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;altFlowNode&quot;, altFlowNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, true, csp);&#xD;&#xA;var_nameNodeVal_name.setValue(nameNodeVal.getName());&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, csp);&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameNodeVal_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowNode&quot;,altFlowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNodeVal&quot;,nameNodeVal);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;altFlowNode&quot;, altFlowNode);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;nodeToAltFlow&quot;, nodeToAltFlow);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;altFlowNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNodeVal&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, true, csp);&#xD;&#xA;var_altFlow_name.setValue(altFlow.getName());&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameNodeVal_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;altFlowNode&quot;, altFlowNode);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;nodeToAltFlow&quot;, nodeToAltFlow);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;altFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;parallelFlowNode&quot;, parallelFlowNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, true, csp);&#xD;&#xA;var_nameNodeVal_name.setValue(nameNodeVal.getName());&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, csp);&#xD;&#xA;var_parallelFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameNodeVal_name,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelFlowNode&quot;,parallelFlowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNodeVal&quot;,nameNodeVal);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;parallelFlowNode&quot;, parallelFlowNode);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;ruleresult.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;ruleresult.registerObject(&quot;nodeToFlow&quot;, nodeToFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelFlowNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNodeVal&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, true, csp);&#xD;&#xA;var_parallelFlow_name.setValue(parallelFlow.getName());&#xD;&#xA;var_parallelFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameNodeVal_name,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelFlow&quot;,parallelFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;parallelFlowNode&quot;, parallelFlowNode);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;ruleresult.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;ruleresult.registerObject(&quot;nodeToFlow&quot;, nodeToFlow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelFlow());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;basicFlowNode&quot;, basicFlowNode);&#xA;match.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;match.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, true, csp);&#xD;&#xA;var_finalStateValNode_name.setValue(finalStateValNode.getName());&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_basicFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;basicFlow.finalState&quot;, csp);&#xD;&#xA;var_basicFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_basicFlow_finalState);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;basicFlowNode&quot;,basicFlowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;finalStateNode&quot;,finalStateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;finalStateValNode&quot;,finalStateValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;basicFlowNode&quot;, basicFlowNode);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;ruleresult.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;basicFlowNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;finalStateNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;finalStateValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_basicFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;basicFlow.finalState&quot;, true, csp);&#xD;&#xA;var_basicFlow_finalState.setValue(basicFlow.getFinalState());&#xD;&#xA;var_basicFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, csp);&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_basicFlow_finalState);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;basicFlow&quot;,basicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;basicFlowNode&quot;, basicFlowNode);&#xA;ruleresult.registerObject(&quot;basicFlow&quot;, basicFlow);&#xA;ruleresult.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;ruleresult.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;basicFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getBasicFlow());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;superActorNode&quot;, superActorNode);&#xA;match.registerObject(&quot;extendsValNode&quot;, extendsValNode);&#xA;match.registerObject(&quot;extendsNode&quot;, extendsNode);&#xA;match.registerObject(&quot;actorNode&quot;, actorNode);&#xA;match.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_extendsValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;extendsValNode.name&quot;, true, csp);&#xD;&#xA;var_extendsValNode_name.setValue(extendsValNode.getName());&#xD;&#xA;var_extendsValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_superActor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;superActor.name&quot;, true, csp);&#xD;&#xA;var_superActor_name.setValue(superActor.getName());&#xD;&#xA;var_superActor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_extendsValNode_name,var_superActor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActorNode&quot;,superActorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActorNodeToSuperActor&quot;,superActorNodeToSuperActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;extendsValNode&quot;,extendsValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;extendsNode&quot;,extendsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNode&quot;,actorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActor&quot;,superActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNodeToActor&quot;,actorNodeToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;superActorNode&quot;, superActorNode);&#xA;ruleresult.registerObject(&quot;superActorNodeToSuperActor&quot;, superActorNodeToSuperActor);&#xA;ruleresult.registerObject(&quot;extendsValNode&quot;, extendsValNode);&#xA;ruleresult.registerObject(&quot;extendsNode&quot;, extendsNode);&#xA;ruleresult.registerObject(&quot;actorNode&quot;, actorNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;superActor&quot;, superActor);&#xA;ruleresult.registerObject(&quot;actorNodeToActor&quot;, actorNodeToActor);&#xA;ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;extendsValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;extendsNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;superActor&quot;, superActor);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_superActor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;superActor.name&quot;, true, csp);&#xD;&#xA;var_superActor_name.setValue(superActor.getName());&#xD;&#xA;var_superActor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_extendsValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;extendsValNode.name&quot;, csp);&#xD;&#xA;var_extendsValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_extendsValNode_name,var_superActor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActorNode&quot;,superActorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActorNodeToSuperActor&quot;,superActorNodeToSuperActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNode&quot;,actorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActor&quot;,superActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNodeToActor&quot;,actorNodeToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;superActorNode&quot;, superActorNode);&#xA;ruleresult.registerObject(&quot;superActorNodeToSuperActor&quot;, superActorNodeToSuperActor);&#xA;ruleresult.registerObject(&quot;extendsValNode&quot;, extendsValNode);&#xA;ruleresult.registerObject(&quot;extendsNode&quot;, extendsNode);&#xA;ruleresult.registerObject(&quot;actorNode&quot;, actorNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;superActor&quot;, superActor);&#xA;ruleresult.registerObject(&quot;actorNodeToActor&quot;, actorNodeToActor);&#xA;ruleresult.registerObject(&quot;actorsNode&quot;, actorsNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;with postcondition&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_finalStateNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateNode.name&quot;, true, csp);&#xD;&#xA;var_finalStateNode_name.setValue(finalStateNode.getName());&#xD;&#xA;var_finalStateNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateNode_name,literal0);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;match.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;match.registerObject(&quot;altFlowNode&quot;, altFlowNode);&#xA;match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, true, csp);&#xD;&#xA;var_finalStateValNode_name.setValue(finalStateValNode.getName());&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, true, csp);&#xD;&#xA;var_nameNodeVal_name.setValue(nameNodeVal.getName());&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_altFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.finalState&quot;, csp);&#xD;&#xA;var_altFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, csp);&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_altFlow_finalState);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameNodeVal_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;finalStateValNode&quot;,finalStateValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;finalStateNode&quot;,finalStateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowNode&quot;,altFlowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNodeVal&quot;,nameNodeVal);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;ruleresult.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;altFlowNode&quot;, altFlowNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;finalStateValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;finalStateNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;altFlowNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNodeVal&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;with postcondition&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_altFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.finalState&quot;, true, csp);&#xD;&#xA;var_altFlow_finalState.setValue(altFlow.getFinalState());&#xD;&#xA;var_altFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, true, csp);&#xD;&#xA;var_altFlow_name.setValue(altFlow.getName());&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, csp);&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_finalStateNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateNode.name&quot;, csp);&#xD;&#xA;var_finalStateNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_altFlow_finalState);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_finalStateNode_name,literal0);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_nameNodeVal_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;ruleresult.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;altFlowNode&quot;, altFlowNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;altFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;match.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;match.registerObject(&quot;parallelFlowNode&quot;, parallelFlowNode);&#xA;match.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, true, csp);&#xD;&#xA;var_finalStateValNode_name.setValue(finalStateValNode.getName());&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, true, csp);&#xD;&#xA;var_nameNodeVal_name.setValue(nameNodeVal.getName());&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_parallelFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.finalState&quot;, csp);&#xD;&#xA;var_parallelFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, csp);&#xD;&#xA;var_parallelFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_parallelFlow_finalState);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameNodeVal_name,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;finalStateValNode&quot;,finalStateValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;finalStateNode&quot;,finalStateNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelFlowNode&quot;,parallelFlowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNodeVal&quot;,nameNodeVal);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;ruleresult.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;ruleresult.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;ruleresult.registerObject(&quot;parallelFlowNode&quot;, parallelFlowNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;finalStateValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;finalStateNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;parallelFlowNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNodeVal&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_parallelFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.finalState&quot;, true, csp);&#xD;&#xA;var_parallelFlow_finalState.setValue(parallelFlow.getFinalState());&#xD;&#xA;var_parallelFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, true, csp);&#xD;&#xA;var_parallelFlow_name.setValue(parallelFlow.getName());&#xD;&#xA;var_parallelFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, csp);&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_parallelFlow_finalState);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameNodeVal_name,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;parallelFlow&quot;,parallelFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;finalStateValNode&quot;, finalStateValNode);&#xA;ruleresult.registerObject(&quot;finalStateNode&quot;, finalStateNode);&#xA;ruleresult.registerObject(&quot;parallelFlow&quot;, parallelFlow);&#xA;ruleresult.registerObject(&quot;parallelFlowNode&quot;, parallelFlowNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;useCaseNode&quot;, useCaseNode);&#xA;ruleresult.registerObject(&quot;useCaseNodeToUseCase&quot;, useCaseNodeToUseCase);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameNodeVal&quot;, nameNodeVal);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;parallelFlow&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelFlow());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;byValNode&quot;, byValNode);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;match.registerObject(&quot;byNode&quot;, byNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_byValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;byValNode.name&quot;, true, csp);&#xD;&#xA;var_byValNode_name.setValue(byValNode.getName());&#xD;&#xA;var_byValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, true, csp);&#xD;&#xA;var_nameValNode_name.setValue(nameValNode.getName());&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_byValNode_name,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;byValNode&quot;,byValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameValNode&quot;,nameValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;byNode&quot;,byNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;byValNode&quot;, byValNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;ruleresult.registerObject(&quot;byNode&quot;, byNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;byValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;stepNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;byNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_byValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;byValNode.name&quot;, csp);&#xD;&#xA;var_byValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_byValNode_name,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;byValNode&quot;, byValNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;ruleresult.registerObject(&quot;byNode&quot;, byNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;match.registerObject(&quot;descNode&quot;, descNode);&#xA;match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;byValNode&quot;, byValNode);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;match.registerObject(&quot;byNode&quot;, byNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, true, csp);&#xD;&#xA;var_descValueNode_name.setValue(descValueNode.getName());&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_byValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;byValNode.name&quot;, true, csp);&#xD;&#xA;var_byValNode_name.setValue(byValNode.getName());&#xD;&#xA;var_byValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, true, csp);&#xD;&#xA;var_nameValNode_name.setValue(nameValNode.getName());&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.label&quot;, csp);&#xD;&#xA;var_step_label.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_byValNode_name,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_descValueNode_name,var_step_label);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;descValueNode&quot;,descValueNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descNode&quot;,descNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;byValNode&quot;,byValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameValNode&quot;,nameValNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;byNode&quot;,byNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;byValNode&quot;, byValNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;ruleresult.registerObject(&quot;byNode&quot;, byNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;descValueNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;stepNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;byValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;byNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;actor&quot;, actor);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;p&quot;, p);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.label&quot;, true, csp);&#xD;&#xA;var_step_label.setValue(step.getLabel());&#xD;&#xA;var_step_label.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_byValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;byValNode.name&quot;, csp);&#xD;&#xA;var_byValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_step_label);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_byValNode_name,var_actor_name);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;byValNode&quot;, byValNode);&#xA;ruleresult.registerObject(&quot;actor&quot;, actor);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;ruleresult.registerObject(&quot;byNode&quot;, byNode);&#xA;ruleresult.registerObject(&quot;p&quot;, p);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;match.registerObject(&quot;descNode&quot;, descNode);&#xA;match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;flowNode&quot;, flowNode);&#xA;match.registerObject(&quot;nameNode&quot;, nameNode);&#xA;match.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, true, csp);&#xD;&#xA;var_descValueNode_name.setValue(descValueNode.getName());&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, true, csp);&#xD;&#xA;var_nameValNode_name.setValue(nameValNode.getName());&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.label&quot;, csp);&#xD;&#xA;var_step_label.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_step_label);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;descValueNode&quot;,descValueNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;descNode&quot;,descNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameNode&quot;,nameNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nameValNode&quot;,nameValNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;descValueNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;descNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;stepNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;nameValNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.label&quot;, true, csp);&#xD;&#xA;var_step_label.setValue(step.getLabel());&#xD;&#xA;var_step_label.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_step_label);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;descValueNode&quot;, descValueNode);&#xA;ruleresult.registerObject(&quot;descNode&quot;, descNode);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowNode&quot;, flowNode);&#xA;ruleresult.registerObject(&quot;nodeToBasicFlow&quot;, nodeToBasicFlow);&#xA;ruleresult.registerObject(&quot;nameNode&quot;, nameNode);&#xA;ruleresult.registerObject(&quot;nameValNode&quot;, nameValNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;altNode&quot;, altNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altNode&quot;,altNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;altNode&quot;, altNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;altNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;altNode&quot;, altNode);&#xA;match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;altFlowAltNode&quot;, altFlowAltNode);&#xA;match.registerObject(&quot;ifNode&quot;, ifNode);&#xA;match.registerObject(&quot;condNode&quot;, condNode);&#xA;match.registerObject(&quot;altIdNode&quot;, altIdNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_condNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;condNode.name&quot;, true, csp);&#xD;&#xA;var_condNode_name.setValue(condNode.getName());&#xD;&#xA;var_condNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altIdNode.name&quot;, true, csp);&#xD;&#xA;var_altIdNode_name.setValue(altIdNode.getName());&#xD;&#xA;var_altIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, true, csp);&#xD;&#xA;var_altFlow_name.setValue(altFlow.getName());&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_altFlowAlt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlowAlt.condition&quot;, csp);&#xD;&#xA;var_altFlowAlt_condition.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_altIdNode_name,var_altFlow_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_condNode_name,var_altFlowAlt_condition);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altNode&quot;,altNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNode&quot;,altFlowAltNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ifNode&quot;,ifNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;condNode&quot;,condNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altIdNode&quot;,altIdNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;altNode&quot;, altNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;altFlowAltNode&quot;, altFlowAltNode);&#xA;ruleresult.registerObject(&quot;altFlowAlt&quot;, altFlowAlt);&#xA;ruleresult.registerObject(&quot;ifNode&quot;, ifNode);&#xA;ruleresult.registerObject(&quot;condNode&quot;, condNode);&#xA;ruleresult.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;, altFlowAltNodeToAltFlowAlt);&#xA;ruleresult.registerObject(&quot;altIdNode&quot;, altIdNode);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;altFlowAltNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;ifNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;condNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;altIdNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;altFlowAlt&quot;, altFlowAlt);&#xA;match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_altFlowAlt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlowAlt.condition&quot;, true, csp);&#xD;&#xA;var_altFlowAlt_condition.setValue(altFlowAlt.getCondition());&#xD;&#xA;var_altFlowAlt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, true, csp);&#xD;&#xA;var_altFlow_name.setValue(altFlow.getName());&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_condNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;condNode.name&quot;, csp);&#xD;&#xA;var_condNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altIdNode.name&quot;, csp);&#xD;&#xA;var_altIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_condNode_name,var_altFlowAlt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_altIdNode_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altNode&quot;,altNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAlt&quot;,altFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;altNode&quot;, altNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;altFlowAltNode&quot;, altFlowAltNode);&#xA;ruleresult.registerObject(&quot;altFlowAlt&quot;, altFlowAlt);&#xA;ruleresult.registerObject(&quot;ifNode&quot;, ifNode);&#xA;ruleresult.registerObject(&quot;condNode&quot;, condNode);&#xA;ruleresult.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;, altFlowAltNodeToAltFlowAlt);&#xA;ruleresult.registerObject(&quot;altIdNode&quot;, altIdNode);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;altFlowAlt&quot;).eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative());">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;altFlowAltNode&quot;, altFlowAltNode);&#xA;match.registerObject(&quot;contNode&quot;, contNode);&#xA;match.registerObject(&quot;stepIdNode&quot;, stepIdNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_stepIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;stepIdNode.name&quot;, true, csp);&#xD;&#xA;var_stepIdNode_name.setValue(stepIdNode.getName());&#xD;&#xA;var_stepIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_stepIdNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAlt&quot;,altFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNode&quot;,altFlowAltNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;,altFlowAltNodeToAltFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;contNode&quot;,contNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepIdNode&quot;,stepIdNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;altFlowAlt&quot;, altFlowAlt);&#xA;ruleresult.registerObject(&quot;altFlowAltNode&quot;, altFlowAltNode);&#xA;ruleresult.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;, altFlowAltNodeToAltFlowAlt);&#xA;ruleresult.registerObject(&quot;contNode&quot;, contNode);&#xA;ruleresult.registerObject(&quot;stepIdNode&quot;, stepIdNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;contNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;) &amp;&amp; match.getObject(&quot;stepIdNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;altFlowAlt&quot;, altFlowAlt);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_stepIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;stepIdNode.name&quot;, csp);&#xD;&#xA;var_stepIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_stepIdNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAlt&quot;,altFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNode&quot;,altFlowAltNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;,altFlowAltNodeToAltFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;altFlowAlt&quot;, altFlowAlt);&#xA;ruleresult.registerObject(&quot;altFlowAltNode&quot;, altFlowAltNode);&#xA;ruleresult.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;, altFlowAltNodeToAltFlowAlt);&#xA;ruleresult.registerObject(&quot;contNode&quot;, contNode);&#xA;ruleresult.registerObject(&quot;stepIdNode&quot;, stepIdNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;invokeNode&quot;, invokeNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokeNode&quot;,invokeNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;invokeNode&quot;, invokeNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;invokeNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;invokeNode&quot;, invokeNode);&#xA;match.registerObject(&quot;stepNode&quot;, stepNode);&#xA;match.registerObject(&quot;flowIdNode&quot;, flowIdNode);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flowIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowIdNode.name&quot;, true, csp);&#xD;&#xA;var_flowIdNode_name.setValue(flowIdNode.getName());&#xD;&#xA;var_flowIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_flow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.name&quot;, true, csp);&#xD;&#xA;var_flow_name.setValue(flow.getName());&#xD;&#xA;var_flow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_flowIdNode_name,var_flow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokeNode&quot;,invokeNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowIdNode&quot;,flowIdNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;invokeNode&quot;, invokeNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowIdNode&quot;, flowIdNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;flowIdNode&quot;).eClass().getInstanceClassName().equals(&quot;MocaTree.Node&quot;);">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;f&quot;, f);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.name&quot;, true, csp);&#xD;&#xA;var_flow_name.setValue(flow.getName());&#xD;&#xA;var_flow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_flowIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowIdNode.name&quot;, csp);&#xD;&#xA;var_flowIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_flowIdNode_name,var_flow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokeNode&quot;,invokeNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;f&quot;, f);&#xA;ruleresult.registerObject(&quot;invokeNode&quot;, invokeNode);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;stepNode&quot;, stepNode);&#xA;ruleresult.registerObject(&quot;stepNodeToStep&quot;, stepNodeToStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;flowIdNode&quot;, flowIdNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// TODO: NICO!!!&#xA;return null;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_rootNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;rootNode.name&quot;, csp);&#xD;&#xA;var_rootNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_p_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;p.name&quot;, csp);&#xD;&#xA;var_p_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_rootNode_name,var_p_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;ucModel&quot;,ucModel);&#xD;&#xA;isApplicableMatch.registerObject(&quot;file&quot;,file);&#xD;&#xA;isApplicableMatch.registerObject(&quot;fileToUcModel&quot;,fileToUcModel);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, csp);&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_typeNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;typeNodeVal.name&quot;, csp);&#xD;&#xA;var_typeNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actorNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actorNode.name&quot;, csp);&#xD;&#xA;var_actorNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;EqActorType eqActorType = new EqActorType();Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,var_typeNodeVal_name);&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_actorNode_name,var_actor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.description&quot;, csp);&#xD;&#xA;var_actor_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.type&quot;, csp);&#xD;&#xA;var_actor_type.setType(&quot;UseCaseDSL.ActorType&quot;);&#xD;&#xA;Variable var_typeNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;typeNodeVal.name&quot;, csp);&#xD;&#xA;var_typeNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actorNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actorNode.name&quot;, csp);&#xD;&#xA;var_actorNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, csp);&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();EqActorType eqActorType = new EqActorType();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eqActorType);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_actor_description);&#xD;&#xA;eqActorType.setRuleName(&quot;&quot;);&#xD;&#xA;eqActorType.solve(var_actor_type,var_typeNodeVal_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_actorNode_name,var_actor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_superUseCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;superUseCase.name&quot;, true, csp);&#xD;&#xA;var_superUseCase_name.setValue(superUseCase.getName());&#xD;&#xA;var_superUseCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_extendsValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;extendsValNode.name&quot;, csp);&#xD;&#xA;var_extendsValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_extendsValNode_name,var_superUseCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCaseNode&quot;,superUseCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCase&quot;,superUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superUseCaseNodeToSuperUseCase&quot;,superUseCaseNodeToSuperUseCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCasesNode&quot;,useCasesNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, csp);&#xD;&#xA;var_useCase_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_useCase_description);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_preCondValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;preCondValNode.name&quot;, csp);&#xD;&#xA;var_preCondValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, csp);&#xD;&#xA;var_useCase_preConditions.setType(&quot;String&quot;);&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_description = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.description&quot;, csp);&#xD;&#xA;var_useCase_description.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_preCondValNode_name,var_useCase_preConditions);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_descValueNode_name,var_useCase_description);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_preCondValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;preCondValNode.name&quot;, csp);&#xD;&#xA;var_preCondValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_preConditions = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.preConditions&quot;, csp);&#xD;&#xA;var_useCase_preConditions.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCaseNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCaseNode.name&quot;, csp);&#xD;&#xA;var_useCaseNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.name&quot;, csp);&#xD;&#xA;var_useCase_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_preCondValNode_name,var_useCase_preConditions);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_useCaseNode_name,var_useCase_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseRootNode&quot;,useCaseRootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNode&quot;,rootNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;rootNodeToPackage&quot;,rootNodeToPackage);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, csp);&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameNodeVal_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, csp);&#xD;&#xA;var_parallelFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_nameNodeVal_name,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, csp);&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_basicFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;basicFlow.finalState&quot;, csp);&#xD;&#xA;var_basicFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_basicFlow_finalState);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_superActor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;superActor.name&quot;, true, csp);&#xD;&#xA;var_superActor_name.setValue(superActor.getName());&#xD;&#xA;var_superActor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_extendsValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;extendsValNode.name&quot;, csp);&#xD;&#xA;var_extendsValNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_extendsValNode_name,var_superActor_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActorNode&quot;,superActorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActorNodeToSuperActor&quot;,superActorNodeToSuperActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNode&quot;,actorNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;superActor&quot;,superActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorNodeToActor&quot;,actorNodeToActor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;actorsNode&quot;,actorsNode);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(&quot;literal0&quot;, true, csp);&#xD;&#xA;literal0.setValue(&quot;with postcondition&quot;);&#xD;&#xA;literal0.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, csp);&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.finalState&quot;, csp);&#xD;&#xA;var_altFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;Variable var_finalStateNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateNode.name&quot;, csp);&#xD;&#xA;var_finalStateNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, csp);&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateNode_name,literal0);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_finalStateValNode_name,var_altFlow_finalState);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_nameNodeVal_name,var_altFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_finalStateValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;finalStateValNode.name&quot;, csp);&#xD;&#xA;var_finalStateValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_parallelFlow_finalState = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.finalState&quot;, csp);&#xD;&#xA;var_parallelFlow_finalState.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameNodeVal_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameNodeVal.name&quot;, csp);&#xD;&#xA;var_nameNodeVal_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_parallelFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;parallelFlow.name&quot;, csp);&#xD;&#xA;var_parallelFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_finalStateValNode_name,var_parallelFlow_finalState);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameNodeVal_name,var_parallelFlow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNode&quot;,useCaseNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCaseNodeToUseCase&quot;,useCaseNodeToUseCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_byValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;byValNode.name&quot;, csp);&#xD;&#xA;var_byValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_byValNode_name,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;actor.name&quot;, true, csp);&#xD;&#xA;var_actor_name.setValue(actor.getName());&#xD;&#xA;var_actor_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.label&quot;, csp);&#xD;&#xA;var_step_label.setType(&quot;String&quot;);&#xD;&#xA;Variable var_byValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;byValNode.name&quot;, csp);&#xD;&#xA;var_byValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_byValNode_name,var_actor_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_descValueNode_name,var_step_label);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;actor&quot;,actor);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p&quot;,p);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_descValueNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;descValueNode.name&quot;, csp);&#xD;&#xA;var_descValueNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_label = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.label&quot;, csp);&#xD;&#xA;var_step_label.setType(&quot;String&quot;);&#xD;&#xA;Variable var_nameValNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;nameValNode.name&quot;, csp);&#xD;&#xA;var_nameValNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, csp);&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_descValueNode_name,var_step_label);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_nameValNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flowNode&quot;,flowNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;nodeToBasicFlow&quot;,nodeToBasicFlow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.name&quot;, true, csp);&#xD;&#xA;var_altFlow_name.setValue(altFlow.getName());&#xD;&#xA;var_altFlow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_condNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;condNode.name&quot;, csp);&#xD;&#xA;var_condNode_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlowAlt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlowAlt.condition&quot;, csp);&#xD;&#xA;var_altFlowAlt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altIdNode.name&quot;, csp);&#xD;&#xA;var_altIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_altIdNode_name,var_altFlow_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_condNode_name,var_altFlowAlt_condition);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altNode&quot;,altNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.name&quot;, true, csp);&#xD;&#xA;var_step_name.setValue(step.getName());&#xD;&#xA;var_step_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_stepIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;stepIdNode.name&quot;, csp);&#xD;&#xA;var_stepIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_stepIdNode_name,var_step_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAlt&quot;,altFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNode&quot;,altFlowAltNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlowAltNodeToAltFlowAlt&quot;,altFlowAltNodeToAltFlowAlt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flow_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.name&quot;, true, csp);&#xD;&#xA;var_flow_name.setValue(flow.getName());&#xD;&#xA;var_flow_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_flowIdNode_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flowIdNode.name&quot;, csp);&#xD;&#xA;var_flowIdNode_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_flowIdNode_name,var_flow_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;f&quot;,f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;invokeNode&quot;,invokeNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNode&quot;,stepNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;stepNodeToStep&quot;,stepNodeToStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/FileToUCModel"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/PackageRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseExtendsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasesRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCaseDescPreCondRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/UseCasePreCondRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AlternativeFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/BasicFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ActorExtendsRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowFinalStateRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepDescRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/StepAlternativesRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/AltFlowAltContinueRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelFlowInvokeRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/UseCaseCodeAdapter/model/UseCaseCodeAdapter.ecore#//Rules/ParallelStepInvokeRefRule"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
